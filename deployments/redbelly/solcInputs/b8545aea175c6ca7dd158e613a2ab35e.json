{
  "language": "Solidity",
  "sources": {
    "@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\nimport \"../common/SelfAuthorized.sol\";\n\n/// @title OwnerManager - Manages a set of owners and a threshold to perform actions.\n/// @author Stefan George - <stefan@gnosis.pm>\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract OwnerManager is SelfAuthorized {\n    event AddedOwner(address owner);\n    event RemovedOwner(address owner);\n    event ChangedThreshold(uint256 threshold);\n\n    address internal constant SENTINEL_OWNERS = address(0x1);\n\n    mapping(address => address) internal owners;\n    uint256 internal ownerCount;\n    uint256 internal threshold;\n\n    /// @dev Setup function sets initial storage of contract.\n    /// @param _owners List of Safe owners.\n    /// @param _threshold Number of required confirmations for a Safe transaction.\n    function setupOwners(address[] memory _owners, uint256 _threshold) internal {\n        // Threshold can only be 0 at initialization.\n        // Check ensures that setup function can only be called once.\n        require(threshold == 0, \"GS200\");\n        // Validate that threshold is smaller than number of added owners.\n        require(_threshold <= _owners.length, \"GS201\");\n        // There has to be at least one Safe owner.\n        require(_threshold >= 1, \"GS202\");\n        // Initializing Safe owners.\n        address currentOwner = SENTINEL_OWNERS;\n        for (uint256 i = 0; i < _owners.length; i++) {\n            // Owner address cannot be null.\n            address owner = _owners[i];\n            require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this) && currentOwner != owner, \"GS203\");\n            // No duplicate owners allowed.\n            require(owners[owner] == address(0), \"GS204\");\n            owners[currentOwner] = owner;\n            currentOwner = owner;\n        }\n        owners[currentOwner] = SENTINEL_OWNERS;\n        ownerCount = _owners.length;\n        threshold = _threshold;\n    }\n\n    /// @dev Allows to add a new owner to the Safe and update the threshold at the same time.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\n    /// @param owner New owner address.\n    /// @param _threshold New threshold.\n    function addOwnerWithThreshold(address owner, uint256 _threshold) public authorized {\n        // Owner address cannot be null, the sentinel or the Safe itself.\n        require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this), \"GS203\");\n        // No duplicate owners allowed.\n        require(owners[owner] == address(0), \"GS204\");\n        owners[owner] = owners[SENTINEL_OWNERS];\n        owners[SENTINEL_OWNERS] = owner;\n        ownerCount++;\n        emit AddedOwner(owner);\n        // Change threshold if threshold was changed.\n        if (threshold != _threshold) changeThreshold(_threshold);\n    }\n\n    /// @dev Allows to remove an owner from the Safe and update the threshold at the same time.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\n    /// @param prevOwner Owner that pointed to the owner to be removed in the linked list\n    /// @param owner Owner address to be removed.\n    /// @param _threshold New threshold.\n    function removeOwner(\n        address prevOwner,\n        address owner,\n        uint256 _threshold\n    ) public authorized {\n        // Only allow to remove an owner, if threshold can still be reached.\n        require(ownerCount - 1 >= _threshold, \"GS201\");\n        // Validate owner address and check that it corresponds to owner index.\n        require(owner != address(0) && owner != SENTINEL_OWNERS, \"GS203\");\n        require(owners[prevOwner] == owner, \"GS205\");\n        owners[prevOwner] = owners[owner];\n        owners[owner] = address(0);\n        ownerCount--;\n        emit RemovedOwner(owner);\n        // Change threshold if threshold was changed.\n        if (threshold != _threshold) changeThreshold(_threshold);\n    }\n\n    /// @dev Allows to swap/replace an owner from the Safe with another address.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\n    /// @param prevOwner Owner that pointed to the owner to be replaced in the linked list\n    /// @param oldOwner Owner address to be replaced.\n    /// @param newOwner New owner address.\n    function swapOwner(\n        address prevOwner,\n        address oldOwner,\n        address newOwner\n    ) public authorized {\n        // Owner address cannot be null, the sentinel or the Safe itself.\n        require(newOwner != address(0) && newOwner != SENTINEL_OWNERS && newOwner != address(this), \"GS203\");\n        // No duplicate owners allowed.\n        require(owners[newOwner] == address(0), \"GS204\");\n        // Validate oldOwner address and check that it corresponds to owner index.\n        require(oldOwner != address(0) && oldOwner != SENTINEL_OWNERS, \"GS203\");\n        require(owners[prevOwner] == oldOwner, \"GS205\");\n        owners[newOwner] = owners[oldOwner];\n        owners[prevOwner] = newOwner;\n        owners[oldOwner] = address(0);\n        emit RemovedOwner(oldOwner);\n        emit AddedOwner(newOwner);\n    }\n\n    /// @dev Allows to update the number of required confirmations by Safe owners.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Changes the threshold of the Safe to `_threshold`.\n    /// @param _threshold New threshold.\n    function changeThreshold(uint256 _threshold) public authorized {\n        // Validate that threshold is smaller than number of owners.\n        require(_threshold <= ownerCount, \"GS201\");\n        // There has to be at least one Safe owner.\n        require(_threshold >= 1, \"GS202\");\n        threshold = _threshold;\n        emit ChangedThreshold(threshold);\n    }\n\n    function getThreshold() public view returns (uint256) {\n        return threshold;\n    }\n\n    function isOwner(address owner) public view returns (bool) {\n        return owner != SENTINEL_OWNERS && owners[owner] != address(0);\n    }\n\n    /// @dev Returns array of owners.\n    /// @return Array of Safe owners.\n    function getOwners() public view returns (address[] memory) {\n        address[] memory array = new address[](ownerCount);\n\n        // populate return array\n        uint256 index = 0;\n        address currentOwner = owners[SENTINEL_OWNERS];\n        while (currentOwner != SENTINEL_OWNERS) {\n            array[index] = currentOwner;\n            currentOwner = owners[currentOwner];\n            index++;\n        }\n        return array;\n    }\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/common/Enum.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title Enum - Collection of enums\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract Enum {\n    enum Operation {Call, DelegateCall}\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/common/SelfAuthorized.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title SelfAuthorized - authorizes current contract to perform actions\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract SelfAuthorized {\n    function requireSelfCall() private view {\n        require(msg.sender == address(this), \"GS031\");\n    }\n\n    modifier authorized() {\n        // This is a function call as it minimized the bytecode size\n        requireSelfCall();\n        _;\n    }\n}\n"
    },
    "@gnosis.pm/zodiac/contracts/core/Module.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\n\n/// @title Module Interface - A contract that can pass messages to a Module Manager contract if enabled by that contract.\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"../interfaces/IAvatar.sol\";\nimport \"../factory/FactoryFriendly.sol\";\nimport \"../guard/Guardable.sol\";\n\nabstract contract Module is FactoryFriendly, Guardable {\n    /// @dev Address that will ultimately execute function calls.\n    address public avatar;\n    /// @dev Address that this module will pass transactions to.\n    address public target;\n\n    /// @dev Emitted each time the avatar is set.\n    event AvatarSet(address indexed previousAvatar, address indexed newAvatar);\n    /// @dev Emitted each time the Target is set.\n    event TargetSet(address indexed previousTarget, address indexed newTarget);\n\n    /// @dev Sets the avatar to a new avatar (`newAvatar`).\n    /// @notice Can only be called by the current owner.\n    function setAvatar(address _avatar) public onlyOwner {\n        address previousAvatar = avatar;\n        avatar = _avatar;\n        emit AvatarSet(previousAvatar, _avatar);\n    }\n\n    /// @dev Sets the target to a new target (`newTarget`).\n    /// @notice Can only be called by the current owner.\n    function setTarget(address _target) public onlyOwner {\n        address previousTarget = target;\n        target = _target;\n        emit TargetSet(previousTarget, _target);\n    }\n\n    /// @dev Passes a transaction to be executed by the avatar.\n    /// @notice Can only be called by this contract.\n    /// @param to Destination address of module transaction.\n    /// @param value Ether value of module transaction.\n    /// @param data Data payload of module transaction.\n    /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\n    function exec(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation\n    ) internal returns (bool success) {\n        /// Check if a transactioon guard is enabled.\n        if (guard != address(0)) {\n            IGuard(guard).checkTransaction(\n                /// Transaction info used by module transactions.\n                to,\n                value,\n                data,\n                operation,\n                /// Zero out the redundant transaction information only used for Safe multisig transctions.\n                0,\n                0,\n                0,\n                address(0),\n                payable(0),\n                bytes(\"0x\"),\n                msg.sender\n            );\n        }\n        success = IAvatar(target).execTransactionFromModule(\n            to,\n            value,\n            data,\n            operation\n        );\n        if (guard != address(0)) {\n            IGuard(guard).checkAfterExecution(bytes32(\"0x\"), success);\n        }\n        return success;\n    }\n\n    /// @dev Passes a transaction to be executed by the target and returns data.\n    /// @notice Can only be called by this contract.\n    /// @param to Destination address of module transaction.\n    /// @param value Ether value of module transaction.\n    /// @param data Data payload of module transaction.\n    /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\n    function execAndReturnData(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation\n    ) internal returns (bool success, bytes memory returnData) {\n        /// Check if a transactioon guard is enabled.\n        if (guard != address(0)) {\n            IGuard(guard).checkTransaction(\n                /// Transaction info used by module transactions.\n                to,\n                value,\n                data,\n                operation,\n                /// Zero out the redundant transaction information only used for Safe multisig transctions.\n                0,\n                0,\n                0,\n                address(0),\n                payable(0),\n                bytes(\"0x\"),\n                msg.sender\n            );\n        }\n        (success, returnData) = IAvatar(target)\n            .execTransactionFromModuleReturnData(to, value, data, operation);\n        if (guard != address(0)) {\n            IGuard(guard).checkAfterExecution(bytes32(\"0x\"), success);\n        }\n        return (success, returnData);\n    }\n}\n"
    },
    "@gnosis.pm/zodiac/contracts/factory/FactoryFriendly.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\n\n/// @title Zodiac FactoryFriendly - A contract that allows other contracts to be initializable and pass bytes as arguments to define contract state\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nabstract contract FactoryFriendly is OwnableUpgradeable {\n    function setUp(bytes memory initializeParams) public virtual;\n}\n"
    },
    "@gnosis.pm/zodiac/contracts/guard/BaseGuard.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport \"../interfaces/IGuard.sol\";\n\nabstract contract BaseGuard is IERC165 {\n    function supportsInterface(bytes4 interfaceId)\n        external\n        pure\n        override\n        returns (bool)\n    {\n        return\n            interfaceId == type(IGuard).interfaceId || // 0xe6d7a83a\n            interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\n    }\n\n    /// @dev Module transactions only use the first four parameters: to, value, data, and operation.\n    /// Module.sol hardcodes the remaining parameters as 0 since they are not used for module transactions.\n    /// @notice This interface is used to maintain compatibilty with Gnosis Safe transaction guards.\n    function checkTransaction(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver,\n        bytes memory signatures,\n        address msgSender\n    ) external virtual;\n\n    function checkAfterExecution(bytes32 txHash, bool success) external virtual;\n}\n"
    },
    "@gnosis.pm/zodiac/contracts/guard/Guardable.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"./BaseGuard.sol\";\n\n/// @title Guardable - A contract that manages fallback calls made to this contract\ncontract Guardable is OwnableUpgradeable {\n    address public guard;\n\n    event ChangedGuard(address guard);\n\n    /// `guard_` does not implement IERC165.\n    error NotIERC165Compliant(address guard_);\n\n    /// @dev Set a guard that checks transactions before execution.\n    /// @param _guard The address of the guard to be used or the 0 address to disable the guard.\n    function setGuard(address _guard) external onlyOwner {\n        if (_guard != address(0)) {\n            if (!BaseGuard(_guard).supportsInterface(type(IGuard).interfaceId))\n                revert NotIERC165Compliant(_guard);\n        }\n        guard = _guard;\n        emit ChangedGuard(guard);\n    }\n\n    function getGuard() external view returns (address _guard) {\n        return guard;\n    }\n}\n"
    },
    "@gnosis.pm/zodiac/contracts/interfaces/IAvatar.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\n\n/// @title Zodiac Avatar - A contract that manages modules that can execute transactions via this contract.\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\";\n\ninterface IAvatar {\n    event EnabledModule(address module);\n    event DisabledModule(address module);\n    event ExecutionFromModuleSuccess(address indexed module);\n    event ExecutionFromModuleFailure(address indexed module);\n\n    /// @dev Enables a module on the avatar.\n    /// @notice Can only be called by the avatar.\n    /// @notice Modules should be stored as a linked list.\n    /// @notice Must emit EnabledModule(address module) if successful.\n    /// @param module Module to be enabled.\n    function enableModule(address module) external;\n\n    /// @dev Disables a module on the avatar.\n    /// @notice Can only be called by the avatar.\n    /// @notice Must emit DisabledModule(address module) if successful.\n    /// @param prevModule Address that pointed to the module to be removed in the linked list\n    /// @param module Module to be removed.\n    function disableModule(address prevModule, address module) external;\n\n    /// @dev Allows a Module to execute a transaction.\n    /// @notice Can only be called by an enabled module.\n    /// @notice Must emit ExecutionFromModuleSuccess(address module) if successful.\n    /// @notice Must emit ExecutionFromModuleFailure(address module) if unsuccessful.\n    /// @param to Destination address of module transaction.\n    /// @param value Ether value of module transaction.\n    /// @param data Data payload of module transaction.\n    /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\n    function execTransactionFromModule(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation\n    ) external returns (bool success);\n\n    /// @dev Allows a Module to execute a transaction and return data\n    /// @notice Can only be called by an enabled module.\n    /// @notice Must emit ExecutionFromModuleSuccess(address module) if successful.\n    /// @notice Must emit ExecutionFromModuleFailure(address module) if unsuccessful.\n    /// @param to Destination address of module transaction.\n    /// @param value Ether value of module transaction.\n    /// @param data Data payload of module transaction.\n    /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\n    function execTransactionFromModuleReturnData(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation\n    ) external returns (bool success, bytes memory returnData);\n\n    /// @dev Returns if an module is enabled\n    /// @return True if the module is enabled\n    function isModuleEnabled(address module) external view returns (bool);\n\n    /// @dev Returns array of modules.\n    /// @param start Start of the page.\n    /// @param pageSize Maximum number of modules that should be returned.\n    /// @return array Array of modules.\n    /// @return next Start of the next page.\n    function getModulesPaginated(address start, uint256 pageSize)\n        external\n        view\n        returns (address[] memory array, address next);\n}\n"
    },
    "@gnosis.pm/zodiac/contracts/interfaces/IGuard.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\";\n\ninterface IGuard {\n    function checkTransaction(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver,\n        bytes memory signatures,\n        address msgSender\n    ) external;\n\n    function checkAfterExecution(bytes32 txHash, bool success) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver(to).onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/BatchCreate.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.7;\r\n\r\nimport \"./interfaces/IBullaClaim.sol\";\r\nimport \"./BullaBanker.sol\";\r\n\r\nerror NotOwner();\r\nerror BatchTooLarge();\r\nerror ZeroLength();\r\nerror BatchFailed();\r\n\r\n/// @title BatchCreate\r\n/// @author @colinnielsen\r\n/// @notice A contract to allow for the creation of multiple claims in a single transaction.\r\n/// @dev Uses delegatecall to forward the value of msg.sender to BullaBanker.\r\n/// @dev Max operations should be wary of the block gas limit on a certain network\r\ncontract BatchCreate {\r\n    address public bullaClaimERC721;\r\n    address public bullaBanker;\r\n    uint8 public maxOperations;\r\n    address public owner;\r\n\r\n    struct CreateClaimParams {\r\n        string description;\r\n        string tokenURI;\r\n        address creditor;\r\n        address debtor;\r\n        uint256 claimAmount;\r\n        uint256 dueBy;\r\n        address claimToken;\r\n        bytes32 tag;\r\n        Multihash attachment;\r\n    }\r\n\r\n    modifier batchGuard(uint256 length) {\r\n        if (length > maxOperations) revert BatchTooLarge();\r\n        if (length == 0) revert ZeroLength();\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) revert NotOwner();\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _bullaBanker,\r\n        address _bullaClaim,\r\n        uint8 _maxOperations\r\n    ) {\r\n        bullaClaimERC721 = _bullaClaim;\r\n        bullaBanker = _bullaBanker;\r\n        maxOperations = _maxOperations;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function updateMaxOperations(uint8 _maxOperations) external onlyOwner {\r\n        maxOperations = _maxOperations;\r\n    }\r\n\r\n    function batchCreate(CreateClaimParams[] calldata claims)\r\n        external\r\n        batchGuard(claims.length)\r\n    {\r\n        for (uint256 i = 0; i < claims.length; i++) {\r\n            (bool success, ) = bullaBanker.delegatecall(\r\n                abi.encodeWithSelector(\r\n                    BullaBanker.createBullaClaim.selector,\r\n                    BullaBanker.ClaimParams(\r\n                        claims[i].claimAmount,\r\n                        claims[i].creditor,\r\n                        claims[i].debtor,\r\n                        claims[i].description,\r\n                        claims[i].dueBy,\r\n                        claims[i].claimToken,\r\n                        claims[i].attachment\r\n                    ),\r\n                    claims[i].tag,\r\n                    claims[i].tokenURI\r\n                )\r\n            );\r\n            if (!success) revert BatchFailed();\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/BullaBanker.sol": {
      "content": "//SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\r\nimport \"./interfaces/IBullaClaim.sol\";\r\nimport \"./BullaClaimERC721.sol\";\r\n\r\ncontract BullaBanker {\r\n    address public bullaClaimERC721;\r\n\r\n    event BullaTagUpdated(\r\n        address indexed bullaManager,\r\n        uint256 indexed tokenId,\r\n        address indexed updatedBy,\r\n        bytes32 tag,\r\n        uint256 blocktime\r\n    );\r\n\r\n    event BullaBankerCreated(\r\n        address indexed bullaManager,\r\n        address indexed bullaClaimERC721,\r\n        address bullaBanker,\r\n        uint256 blocktime\r\n    );\r\n    \r\n    struct ClaimParams {\r\n        uint256 claimAmount;\r\n        address creditor;\r\n        address debtor;\r\n        string description;\r\n        uint256 dueBy;\r\n        address claimToken;\r\n        Multihash attachment;\r\n    }\r\n\r\n    constructor(address _bullaClaimERC721) {\r\n        bullaClaimERC721 = _bullaClaimERC721;\r\n        emit BullaBankerCreated(\r\n            IBullaClaim(_bullaClaimERC721).bullaManager(),\r\n            bullaClaimERC721,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function createBullaClaim(\r\n        ClaimParams calldata claim,\r\n        bytes32 bullaTag,\r\n        string calldata _tokenUri\r\n    ) public returns (uint256) {\r\n        if (msg.sender != claim.creditor && msg.sender != claim.debtor)\r\n            revert NotCreditorOrDebtor(msg.sender);\r\n\r\n        address _bullaClaimERC721Address = bullaClaimERC721;\r\n        uint256 newTokenId = BullaClaimERC721(_bullaClaimERC721Address)\r\n            .createClaimWithURI(\r\n                claim.creditor,\r\n                claim.debtor,\r\n                claim.description,\r\n                claim.claimAmount,\r\n                claim.dueBy,\r\n                claim.claimToken,\r\n                claim.attachment,\r\n                _tokenUri\r\n            );\r\n\r\n        emit BullaTagUpdated(\r\n            IBullaClaim(_bullaClaimERC721Address).bullaManager(),\r\n            newTokenId,\r\n            msg.sender,\r\n            bullaTag,\r\n            block.timestamp\r\n        );\r\n        return newTokenId;\r\n    }\r\n\r\n    function updateBullaTag(uint256 tokenId, bytes32 newTag) public {\r\n        address _bullaClaimERC721Address = bullaClaimERC721;\r\n        BullaClaimERC721 _bullaClaimERC721 = BullaClaimERC721(\r\n            _bullaClaimERC721Address\r\n        );\r\n\r\n        address claimOwner = _bullaClaimERC721.ownerOf(tokenId);\r\n        Claim memory bullaClaim = _bullaClaimERC721.getClaim(tokenId);\r\n        if (msg.sender != claimOwner && msg.sender != bullaClaim.debtor)\r\n            revert NotCreditorOrDebtor(msg.sender);\r\n\r\n        emit BullaTagUpdated(\r\n            IBullaClaim(_bullaClaimERC721Address).bullaManager(),\r\n            tokenId,\r\n            msg.sender,\r\n            newTag,\r\n            block.timestamp\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/BullaBankerModule.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.7;\r\nimport \"@gnosis.pm/zodiac/contracts/core/Module.sol\";\r\nimport \"@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol\";\r\nimport \"./BullaBanker.sol\";\r\nimport \"./BatchCreate.sol\";\r\nimport \"./interfaces/IBullaClaim.sol\";\r\n\r\n/// @title BullaBankerModule\r\n/// @author @colinnielsen\r\n/// @notice A gnosis module for BullaBanker allowing permissionless use of basic BullaClaim and BullaBanker\r\n///     functions (e.g. createClaim, payClaim, updateTag, rejectClaim, rescindClaim) for the signers of a safe.\r\n\r\ncontract BullaBankerModule is Module {\r\n    string public constant VERSION = \"0.0.9\";\r\n    address public bullaBankerAddress;\r\n    address public bullaClaimAddress;\r\n    address public batchCreateAddress;\r\n\r\n    event BullaBankerModuleDeploy(\r\n        string version,\r\n        address indexed safe,\r\n        address indexed moduleAddress,\r\n        address indexed initiator\r\n    );\r\n\r\n    /// checks the avatar of the module (will be the gnosis safe) and ensures the EOA is a signer on the safe.\r\n    modifier onlySafeOwner() {\r\n        require(\r\n            OwnerManager(avatar).isOwner(msg.sender),\r\n            \"BULLAMODULE: Not safe owner\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @dev Initialize function, will be triggered when a new proxy is deployed\r\n    /// @param _safe Address of the safe\r\n    /// @param _bullaBanker Address of the avatar in this case, a gnosis safe\r\n    /// @param _bullaClaim Address of the avatar in this case, a gnosis safe\r\n    /// @notice Designated token address can not be zero\r\n    constructor(\r\n        address _safe,\r\n        address _bullaBanker,\r\n        address _bullaClaim,\r\n        address _batchCreate\r\n    ) {\r\n        bytes memory initParams = abi.encode(\r\n            _safe,\r\n            _bullaBanker,\r\n            _bullaClaim,\r\n            _batchCreate\r\n        );\r\n        setUp(initParams);\r\n    }\r\n\r\n    function setUp(bytes memory initParams) public override initializer {\r\n        (\r\n            address _safe,\r\n            address _bullaBanker,\r\n            address _bullaClaim,\r\n            address _batchCreate\r\n        ) = abi.decode(initParams, (address, address, address, address));\r\n        require(_safe != address(0), \"BULLAMODULE: Zero safe address\");\r\n        __Ownable_init();\r\n        setAvatar(_safe);\r\n        setTarget(_safe);\r\n        transferOwnership(_safe);\r\n        bullaBankerAddress = _bullaBanker;\r\n        bullaClaimAddress = _bullaClaim;\r\n        batchCreateAddress = _batchCreate;\r\n\r\n        emit BullaBankerModuleDeploy(VERSION, _safe, address(this), msg.sender);\r\n    }\r\n\r\n    function createBullaClaim(\r\n        BullaBanker.ClaimParams calldata _claim,\r\n        bytes32 _bullaTag,\r\n        string calldata _tokenUri\r\n    ) external onlySafeOwner {\r\n        bytes memory data = abi.encodeWithSelector(\r\n            BullaBanker.createBullaClaim.selector,\r\n            _claim,\r\n            _bullaTag,\r\n            _tokenUri\r\n        );\r\n        require(\r\n            exec(bullaBankerAddress, 0, data, Enum.Operation.Call),\r\n            \"BULLAMODULE: Create claim failed\"\r\n        );\r\n    }\r\n\r\n    function batchCreate(BatchCreate.CreateClaimParams[] calldata claims)\r\n        external\r\n        onlySafeOwner\r\n    {\r\n        bytes memory data = abi.encodeWithSelector(\r\n            BatchCreate.batchCreate.selector,\r\n            claims\r\n        );\r\n        require(\r\n            exec(batchCreateAddress, 0, data, Enum.Operation.Call),\r\n            \"BULLAMODULE: Batch create failed\"\r\n        );\r\n    }\r\n\r\n    function updateBullaTag(uint256 _tokenId, bytes32 _bullaTag)\r\n        external\r\n        onlySafeOwner\r\n    {\r\n        bytes memory data = abi.encodeWithSelector(\r\n            BullaBanker.updateBullaTag.selector,\r\n            _tokenId,\r\n            _bullaTag\r\n        );\r\n        require(\r\n            exec(bullaBankerAddress, 0, data, Enum.Operation.Call),\r\n            \"BULLAMODULE: Tag update failed\"\r\n        );\r\n    }\r\n\r\n    function rejectClaim(uint256 _tokenId) external onlySafeOwner {\r\n        bytes memory data = abi.encodeWithSelector(\r\n            IBullaClaim.rejectClaim.selector,\r\n            _tokenId\r\n        );\r\n        require(\r\n            exec(bullaClaimAddress, 0, data, Enum.Operation.Call),\r\n            \"BULLAMODULE: Reject failed\"\r\n        );\r\n    }\r\n\r\n    function rescindClaim(uint256 _tokenId) external onlySafeOwner {\r\n        bytes memory data = abi.encodeWithSelector(\r\n            IBullaClaim.rescindClaim.selector,\r\n            _tokenId\r\n        );\r\n        require(\r\n            exec(bullaClaimAddress, 0, data, Enum.Operation.Call),\r\n            \"BULLAMODULE: Rescind failed\"\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/BullaClaimERC721.sol": {
      "content": "//SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./interfaces/IBullaManager.sol\";\r\nimport \"./interfaces/IBullaClaim.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\nerror ZeroAddress();\r\nerror PastDueDate();\r\nerror TokenIdNoExist();\r\nerror ClaimTokenNotContract();\r\nerror NotCreditor(address sender);\r\nerror NotDebtor(address sender);\r\nerror NotTokenOwner(address sender);\r\nerror NotCreditorOrDebtor(address sender);\r\nerror OwnerNotCreditor(address sender);\r\nerror ClaimCompleted();\r\nerror ClaimNotPending();\r\nerror IncorrectValue(uint256 value, uint256 expectedValue);\r\nerror InsufficientBalance(uint256 senderBalance);\r\nerror InsufficientAllowance(uint256 senderAllowance);\r\nerror RepayingTooMuch(uint256 amount, uint256 expectedAmount);\r\nerror ValueMustBeGreaterThanZero();\r\n\r\nabstract contract BullaClaimERC721URI is Ownable, ERC721URIStorage {\r\n    string public baseURI;\r\n\r\n    function setBaseURI(string memory baseURI_) public onlyOwner {\r\n        baseURI = baseURI_;\r\n    }\r\n\r\n    function _baseURI() internal view override returns (string memory) {\r\n        return baseURI;\r\n    }\r\n}\r\n\r\ncontract BullaClaimERC721 is IBullaClaim, BullaClaimERC721URI {\r\n    using SafeERC20 for IERC20;\r\n    using Counters for Counters.Counter;\r\n    using Address for address;\r\n\r\n    Counters.Counter private tokenIds;\r\n\r\n    address public override bullaManager;\r\n    mapping(uint256 => Claim) private claimTokens;\r\n\r\n    modifier onlyTokenOwner(uint256 tokenId) {\r\n        if (ownerOf(tokenId) != msg.sender) revert NotCreditor(msg.sender);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyDebtor(uint256 tokenId) {\r\n        if (claimTokens[tokenId].debtor != msg.sender)\r\n            revert NotDebtor(msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyIncompleteClaim(uint256 tokenId) {\r\n        if (\r\n            claimTokens[tokenId].status != Status.Pending &&\r\n            claimTokens[tokenId].status != Status.Repaying\r\n        ) revert ClaimCompleted();\r\n        _;\r\n    }\r\n\r\n    modifier onlyPendingClaim(uint256 tokenId) {\r\n        if (claimTokens[tokenId].status != Status.Pending)\r\n            revert ClaimNotPending();\r\n        _;\r\n    }\r\n\r\n    constructor(address bullaManager_, string memory baseURI_)\r\n        ERC721(\"BullaClaim721\", \"CLAIM\")\r\n    {\r\n        setBullaManager(bullaManager_);\r\n        setBaseURI(baseURI_);\r\n    }\r\n\r\n    function setBullaManager(address _bullaManager) public onlyOwner {\r\n        address prevBullaManager = bullaManager;\r\n        bullaManager = _bullaManager;\r\n        emit BullaManagerSet(prevBullaManager, bullaManager, block.timestamp);\r\n    }\r\n\r\n    function _createClaim(\r\n        address creditor,\r\n        address debtor,\r\n        string memory description,\r\n        uint256 claimAmount,\r\n        uint256 dueBy,\r\n        address claimToken,\r\n        Multihash calldata attachment\r\n    ) internal returns (uint256) {\r\n        if (creditor == address(0) || debtor == address(0)) {\r\n            revert ZeroAddress();\r\n        }\r\n        if (claimAmount == 0) {\r\n            revert ValueMustBeGreaterThanZero();\r\n        }\r\n        if (dueBy < block.timestamp) {\r\n            revert PastDueDate();\r\n        }\r\n        if (!claimToken.isContract()) {\r\n            revert ClaimTokenNotContract();\r\n        }\r\n\r\n        tokenIds.increment();\r\n        uint256 newTokenId = tokenIds.current();\r\n        _safeMint(creditor, newTokenId);\r\n\r\n        Claim memory newClaim;\r\n        newClaim.debtor = debtor;\r\n        newClaim.claimAmount = claimAmount;\r\n        newClaim.dueBy = dueBy;\r\n        newClaim.status = Status.Pending;\r\n        newClaim.claimToken = claimToken;\r\n        newClaim.attachment = attachment;\r\n        claimTokens[newTokenId] = newClaim;\r\n\r\n        emit ClaimCreated(\r\n            bullaManager,\r\n            newTokenId,\r\n            msg.sender,\r\n            creditor,\r\n            debtor,\r\n            tx.origin,\r\n            description,\r\n            newClaim,\r\n            block.timestamp\r\n        );\r\n        return newTokenId;\r\n    }\r\n\r\n    function createClaim(\r\n        address creditor,\r\n        address debtor,\r\n        string memory description,\r\n        uint256 claimAmount,\r\n        uint256 dueBy,\r\n        address claimToken,\r\n        Multihash calldata attachment\r\n    ) external override returns (uint256) {\r\n        uint256 _tokenId = _createClaim(\r\n            creditor,\r\n            debtor,\r\n            description,\r\n            claimAmount,\r\n            dueBy,\r\n            claimToken,\r\n            attachment\r\n        );\r\n        return _tokenId;\r\n    }\r\n\r\n    function createClaimWithURI(\r\n        address creditor,\r\n        address debtor,\r\n        string memory description,\r\n        uint256 claimAmount,\r\n        uint256 dueBy,\r\n        address claimToken,\r\n        Multihash calldata attachment,\r\n        string calldata _tokenUri\r\n    ) external override returns (uint256) {\r\n        uint256 _tokenId = _createClaim(\r\n            creditor,\r\n            debtor,\r\n            description,\r\n            claimAmount,\r\n            dueBy,\r\n            claimToken,\r\n            attachment\r\n        );\r\n        _setTokenURI(_tokenId, _tokenUri);\r\n        return _tokenId;\r\n    }\r\n\r\n    function payClaim(uint256 tokenId, uint256 paymentAmount)\r\n        external\r\n        override\r\n        onlyIncompleteClaim(tokenId)\r\n    {\r\n        if (paymentAmount == 0) revert ValueMustBeGreaterThanZero();\r\n        if (!_exists(tokenId)) revert TokenIdNoExist();\r\n\r\n        Claim memory claim = getClaim(tokenId);\r\n        address creditor = ownerOf(tokenId);\r\n\r\n        uint256 amountToRepay = claim.claimAmount - claim.paidAmount;\r\n        uint256 totalPayment = paymentAmount >= amountToRepay\r\n            ? amountToRepay\r\n            : paymentAmount;\r\n        claim.paidAmount + totalPayment == claim.claimAmount\r\n            ? claim.status = Status.Paid\r\n            : claim.status = Status.Repaying;\r\n        claimTokens[tokenId].paidAmount += totalPayment;\r\n        claimTokens[tokenId].status = claim.status;\r\n\r\n        (address collectionAddress, uint256 transactionFee) = IBullaManager(\r\n            bullaManager\r\n        ).getTransactionFee(msg.sender, totalPayment);\r\n\r\n        IERC20(claim.claimToken).safeTransferFrom(\r\n            msg.sender,\r\n            creditor,\r\n            totalPayment - transactionFee\r\n        );\r\n\r\n        if (transactionFee > 0) {\r\n            IERC20(claim.claimToken).safeTransferFrom(\r\n                msg.sender,\r\n                collectionAddress,\r\n                transactionFee\r\n            );\r\n        }\r\n\r\n        emit ClaimPayment(\r\n            bullaManager,\r\n            tokenId,\r\n            claim.debtor,\r\n            msg.sender,\r\n            tx.origin,\r\n            paymentAmount,\r\n            block.timestamp\r\n        );\r\n        emit FeePaid(\r\n            bullaManager,\r\n            tokenId,\r\n            collectionAddress,\r\n            paymentAmount,\r\n            transactionFee,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function rejectClaim(uint256 tokenId)\r\n        external\r\n        override\r\n        onlyDebtor(tokenId)\r\n        onlyPendingClaim(tokenId)\r\n    {\r\n        claimTokens[tokenId].status = Status.Rejected;\r\n        emit ClaimRejected(bullaManager, tokenId, block.timestamp);\r\n    }\r\n\r\n    function rescindClaim(uint256 tokenId)\r\n        external\r\n        override\r\n        onlyTokenOwner(tokenId)\r\n        onlyPendingClaim(tokenId)\r\n    {\r\n        claimTokens[tokenId].status = Status.Rescinded;\r\n        emit ClaimRescinded(bullaManager, tokenId, block.timestamp);\r\n    }\r\n\r\n    function burn(uint256 tokenId) external onlyTokenOwner(tokenId) {\r\n        _burn(tokenId);\r\n    }\r\n\r\n    function nextClaimId() external view returns (uint256) {\r\n        return tokenIds.current() + 1;\r\n    }\r\n\r\n    function getClaim(uint256 tokenId)\r\n        public\r\n        view\r\n        override\r\n        returns (Claim memory)\r\n    {\r\n        return claimTokens[tokenId];\r\n    }\r\n}\r\n"
    },
    "contracts/BullaFinance.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.7;\r\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\r\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol';\r\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\r\nimport './interfaces/IBullaClaim.sol';\r\nimport './BullaBanker.sol';\r\n\r\nuint256 constant MAX_BPS = 10_000;\r\n\r\n/// @title An extension to BullaClaim V1 that allows creditors to finance invoices\r\n/// @author @colinnielsen\r\n/// @notice Arbitrates loan terms between a creditor and a debtor, managing payments and credit via Bulla Claims\r\ncontract BullaFinance {\r\n    using SafeERC20 for IERC20;\r\n    struct FinanceTerms {\r\n        uint24 minDownPaymentBPS;\r\n        uint24 interestBPS;\r\n        uint40 termLength;\r\n    }\r\n\r\n    event FinancingOffered(uint256 indexed originatingClaimId, FinanceTerms terms, uint256 blocktime);\r\n    event FinancingAccepted(uint256 indexed originatingClaimId, uint256 indexed financedClaimId, uint256 blocktime);\r\n    event BullaTagUpdated(address indexed bullaManager, uint256 indexed tokenId, address indexed updatedBy, bytes32 tag, uint256 blocktime);\r\n    event FeeReclaimed(uint256 indexed originatingClaimId, uint256 blocktime);\r\n\r\n    error INSUFFICIENT_FEE();\r\n    error NOT_CREDITOR();\r\n    error NOT_DEBTOR();\r\n    error NOT_ADMIN();\r\n    error INVALID_MIN_DOWN_PAYMENT();\r\n    error INVALID_TERM_LENGTH();\r\n    error CLAIM_NOT_PENDING();\r\n    error NO_FINANCE_OFFER();\r\n    error UNDER_PAYING();\r\n    error OVER_PAYING();\r\n    error WITHDRAWAL_FAILED();\r\n\r\n    /// address of the Bulla Claim contract\r\n    IBullaClaim public bullaClaim;\r\n    /// the admin of the contract\r\n    address public admin;\r\n    /// the fee represented as the wei amount of the network's native token\r\n    uint256 public fee;\r\n    /// a mapping of financiable claimId to the FinanceTerms offered by the creditor\r\n    mapping(uint256 => FinanceTerms) public financeTermsByClaimId;\r\n\r\n    constructor(\r\n        IBullaClaim _bullaClaim,\r\n        address _admin,\r\n        uint256 _fee\r\n    ) {\r\n        bullaClaim = _bullaClaim;\r\n        admin = _admin;\r\n        fee = _fee;\r\n    }\r\n\r\n    ////// ADMIN FUNCTIONS //////\r\n\r\n    /// @param _admin the new admin\r\n    /// @notice SPEC:\r\n    ///     allows an admin to change the admin address to `_admin`\r\n    ///     Given the following: `msg.sender == admin`\r\n    // function changeAdmin(address _admin) public virtual;\r\n\r\n    /// @param _fee the new fee\r\n    /// @notice SPEC:\r\n    ///     allows an admin to update the fee amount to `_fee`\r\n    ///     Given the following: `msg.sender == admin`\r\n    // function feeChanged(uint256 _fee) public virtual;\r\n\r\n    /// @notice SPEC:\r\n    ///     allows an admin to withdraw `withdrawableFee` amount of tokens from this contract's balance\r\n    ///     Given the following: `msg.sender == admin`\r\n    function withdrawFee(uint256 _amount) public {\r\n        if (msg.sender != admin) revert NOT_ADMIN();\r\n\r\n        (bool success, ) = admin.call{ value: _amount }('');\r\n        if (!success) revert WITHDRAWAL_FAILED();\r\n    }\r\n\r\n    //\r\n    //// CREDITOR FUNCTIONS ////\r\n    //\r\n\r\n    /// @param claim claim creation parameters\r\n    /// @param terms financing terms\r\n    /// @notice SPEC:\r\n    ///     Allows a user to create a Bulla Claim with and offer finance terms to the debtor\r\n    ///     This function will:\r\n    ///         RES1. Create a claim on BullaClaim with the specified parameters in calldata\r\n    ///         RES2. Store the loanTerms as indexed by newly created claimId\r\n    ///         RES3. Emit a FinancingOffered event with the newly created claimId, the terms from calldata, and any user tags\r\n    ///         RES4. Emit a BullaTagUpdated event with the user's tag\r\n    ///         RETURNS: the newly created claimId\r\n    ///     Given the following:\r\n    ///         P1. `msg.value == fee`\r\n    ///         P2. `msg.sender == claim.creditor`\r\n    ///         P3. `(terms.minDownPaymentBPS * claim.claimAmount / 10_000) > 0`\r\n    ///         P4. `terms.minDownPaymentBPS < type(uint24).max`\r\n    ///         P5. `terms.interestBPS < type(uint24).max`\r\n    ///         P6. `terms.termLength < type(uint40).max`\r\n    ///         P7. `terms.termLength > 0`\r\n    function createInvoiceWithFinanceOffer(\r\n        BullaBanker.ClaimParams calldata claim,\r\n        string calldata tokenURI,\r\n        FinanceTerms calldata terms,\r\n        bytes32 tag\r\n    ) public payable virtual returns (uint256) {\r\n        if (msg.value != fee) revert INSUFFICIENT_FEE();\r\n        if (msg.sender != claim.creditor) revert NOT_CREDITOR();\r\n        if (((terms.minDownPaymentBPS * claim.claimAmount) / MAX_BPS) == 0) revert INVALID_MIN_DOWN_PAYMENT();\r\n        if (terms.termLength == 0) revert INVALID_TERM_LENGTH();\r\n\r\n        uint256 claimId = bullaClaim.createClaimWithURI(\r\n            claim.creditor,\r\n            claim.debtor,\r\n            claim.description,\r\n            claim.claimAmount,\r\n            claim.dueBy,\r\n            claim.claimToken,\r\n            claim.attachment,\r\n            tokenURI\r\n        );\r\n\r\n        financeTermsByClaimId[claimId] = terms;\r\n\r\n        emit BullaTagUpdated(bullaClaim.bullaManager(), claimId, msg.sender, tag, block.timestamp);\r\n        emit FinancingOffered(claimId, terms, block.timestamp);\r\n\r\n        return claimId;\r\n    }\r\n\r\n    /// @param claimId the id of the underlying claim\r\n    /// @param terms financing terms\r\n    /// @notice SPEC:\r\n    ///     Allows a creditor to offer financing on an existing pending claim OR update previously offerred financing terms // TODO: should this function be used to rescind a financing offer?\r\n    ///     This function will:\r\n    ///         RES1. Overwrite the `terms` as indexed by the specified `claimId`\r\n    ///         RES2. Emit a FinancingOffered event\r\n    ///     Given the following:\r\n    ///         P1. `claim.status == ClaimStatus.Pending`\r\n    ///         P2. `msg.sender == claim.creditor`\r\n    ///         P3. if terms[claimId].termLength == 0 (implying new terms on an existing claim) ensure msg.value == fee\r\n    ///         P4. `(terms.minDownPaymentBPS * claim.claimAmount / 10_000) > 0`\r\n    ///         P5. `terms.minDownPaymentBPS < type(uint24).max`\r\n    ///         P6. `terms.interestBPS < type(uint24).max`\r\n    ///         P7. `terms.termLength < type(uint40).max`\r\n    ///         P8. `terms.termLength > block.timestamp` TODO: necessary?\r\n    // function offerFinancing(uint256 claimId, FinanceTerms memory terms) public;\r\n\r\n    /// @param claimId the id of the underlying claim\r\n    /// @notice SPEC:\r\n    ///     Allows a creditor to reclaim feeAmount of tokens if the underlying claim is no longer pending\r\n    ///     This function will:\r\n    ///         RES1. delete `financeTerms[claimId]`\r\n    ///         RES2. transfer the creditor `fee` amount of tokens\r\n    ///         RES3. Emit a FeeReclaimed event with the underlying claimId\r\n    ///     Given the following:\r\n    ///         P1. `claim.status != ClaimStatus.Pending`\r\n    // function reclaimFee(uint256 claimId) public virtual;\r\n\r\n    //\r\n    //// DEBTOR FUNCTIONS ////\r\n    //\r\n\r\n    /// @param claimId id of the originating claim\r\n    /// @param downPayment the amount the debtor wishes to contribute\r\n    /// @notice SPEC:\r\n    ///     Allows a debtor to accept a creditor's financing offer and begin payment\r\n    ///     This function will:\r\n    ///         RES1. load the previous claim details and create a new bulla claim specifying `claimAmount` as `originatingClaimAmount + (originatingClaimAmount * terms.interestBPS / 10_000)` and `dueBy` as `term.termLength + block.timestamp`\r\n    ///         RES2. deletes the `financeTerms`\r\n    ///         RES3. pays `downPayment` amount on the newly created claim\r\n    ///         RES4. emits a LoanAccepted event with the `originatingClaimId` and the new claimId as `financedClaimId`\r\n    ///         RETURNS: the newly created claimId\r\n    ///     Given the following:\r\n    ///         P1. msg.sender has approved BullaFinance to spend at least `downPayment` amount of the underlying claim's denominating ERC20 token\r\n    ///         P2. `financingTerms[claimId].termLength != 0` (offer exists)\r\n    ///         P3. `claim.status == ClaimStatus.Pending`\r\n    ///         P4. `msg.sender == claim.debtor`\r\n    ///         P5. `downPayment >= (claimAmount * minDownPaymentBPS / 10_000)` && `downPayment < claimAmount + (claimAmount * interestBPS / 10_000) (not overpaying or underpaying)\r\n    function acceptFinancing(\r\n        uint256 claimId,\r\n        uint256 downPayment,\r\n        string calldata description\r\n    ) public returns (uint256) {\r\n        Claim memory claim = bullaClaim.getClaim(claimId);\r\n        FinanceTerms memory terms = financeTermsByClaimId[claimId];\r\n\r\n        if (claim.status != Status.Pending) revert CLAIM_NOT_PENDING();\r\n        if (claim.debtor != msg.sender) revert NOT_DEBTOR();\r\n        if (terms.termLength == 0) revert NO_FINANCE_OFFER();\r\n        if (downPayment < ((claim.claimAmount * terms.minDownPaymentBPS) / MAX_BPS)) revert UNDER_PAYING();\r\n        if (downPayment > claim.claimAmount) revert OVER_PAYING();\r\n\r\n        address creditor = IERC721(address(bullaClaim)).ownerOf(claimId);\r\n        string memory tokenURI = ERC721URIStorage(address(bullaClaim)).tokenURI(claimId);\r\n\r\n        uint256 newClaimAmount = claim.claimAmount + (((claim.claimAmount - downPayment) * terms.interestBPS) / MAX_BPS);\r\n        uint256 financedClaimId = bullaClaim.createClaimWithURI({\r\n            creditor: creditor,\r\n            debtor: claim.debtor,\r\n            description: description,\r\n            claimAmount: newClaimAmount, // add interest to the new claim\r\n            dueBy: block.timestamp + terms.termLength,\r\n            claimToken: claim.claimToken,\r\n            attachment: claim.attachment,\r\n            _tokenUri: tokenURI\r\n        });\r\n\r\n        delete financeTermsByClaimId[claimId];\r\n\r\n        IERC20(claim.claimToken).safeTransferFrom(msg.sender, address(this), downPayment);\r\n        IERC20(claim.claimToken).approve(address(bullaClaim), downPayment);\r\n        bullaClaim.payClaim(financedClaimId, downPayment);\r\n\r\n        emit FinancingAccepted(claimId, financedClaimId, block.timestamp);\r\n\r\n        return financedClaimId;\r\n    }\r\n}\r\n"
    },
    "contracts/BullaInstantPayment.sol": {
      "content": "//SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.7;\r\n\r\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\r\nimport '@openzeppelin/contracts/security/Pausable.sol';\r\nimport '@openzeppelin/contracts/access/Ownable.sol';\r\nimport './libraries/BoringBatchable.sol';\r\n\r\nerror ValueMustNoBeZero();\r\nerror NotContractOwner(address _sender);\r\n\r\ncontract BullaInstantPayment is BoringBatchable, Pausable, Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    event InstantPaymentTagUpdated(bytes32 indexed txAndLogIndexHash, address indexed updatedBy, string tag, uint256 blocktime);\r\n\r\n    event InstantPayment(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount,\r\n        address indexed tokenAddress,\r\n        string description,\r\n        string tag,\r\n        string ipfsHash,\r\n        uint256 blocktime\r\n    );\r\n\r\n    function pause() public whenNotPaused onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public whenPaused onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function instantPayment(\r\n        address to,\r\n        uint256 amount,\r\n        address tokenAddress,\r\n        string memory description,\r\n        string memory tag,\r\n        string memory ipfsHash\r\n    ) public payable whenNotPaused {\r\n        if (amount == 0) {\r\n            revert ValueMustNoBeZero();\r\n        }\r\n\r\n        if (tokenAddress == address(0)) {\r\n            (bool success, ) = to.call{ value: amount }('');\r\n            require(success, 'Failed to transfer native tokens');\r\n        } else {\r\n            IERC20(tokenAddress).safeTransferFrom(msg.sender, to, amount);\r\n        }\r\n\r\n        emit InstantPayment(msg.sender, to, amount, tokenAddress, description, tag, ipfsHash, block.timestamp);\r\n    }\r\n\r\n    function updateBullaTag(bytes32 txAndLogIndexHash, string memory newTag) public {\r\n        emit InstantPaymentTagUpdated(txAndLogIndexHash, msg.sender, newTag, block.timestamp);\r\n    }\r\n}\r\n"
    },
    "contracts/BullaManager.sol": {
      "content": "//SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./interfaces/IBullaManager.sol\";\r\n\r\nerror NotContractOwner(address _sender);\r\nerror ZeroAddress();\r\nerror ValueMustBeGreaterThanZero();\r\n\r\ncontract BullaManager is IBullaManager {\r\n    bytes32 public immutable description;\r\n    FeeInfo public feeInfo;\r\n    IERC20 public bullaToken;\r\n    address public owner;\r\n\r\n    modifier onlyOwner() {\r\n        if (owner != msg.sender) revert NotContractOwner(msg.sender);\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        bytes32 _description,\r\n        address payable _collectionAddress,\r\n        uint32 _feeBasisPoints\r\n    ) {\r\n        owner = msg.sender;\r\n        feeInfo.collectionAddress = _collectionAddress;\r\n        description = _description;\r\n        feeInfo.feeBasisPoints = _feeBasisPoints;\r\n\r\n        emit FeeChanged(address(this), 0, _feeBasisPoints, block.timestamp);\r\n        emit CollectorChanged(\r\n            address(this),\r\n            address(0),\r\n            _collectionAddress,\r\n            block.timestamp\r\n        );\r\n        emit OwnerChanged(\r\n            address(this),\r\n            address(0),\r\n            msg.sender,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function setOwner(address _newOwner) external override onlyOwner {\r\n        if(_newOwner == address(0)) revert ZeroAddress();\r\n        owner = _newOwner;\r\n        emit OwnerChanged(address(this), owner, _newOwner, block.timestamp);\r\n    }\r\n\r\n    function setFee(uint32 _feeBasisPoints) external override onlyOwner {\r\n        if(_feeBasisPoints == 0) revert ValueMustBeGreaterThanZero();\r\n        uint32 oldFee = feeInfo.feeBasisPoints;\r\n        feeInfo.feeBasisPoints = _feeBasisPoints;\r\n        emit FeeChanged(\r\n            address(this),\r\n            oldFee,\r\n            feeInfo.feeBasisPoints,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function setCollectionAddress(address _collectionAddress)\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        if(_collectionAddress == address(0)) revert ZeroAddress();\r\n        feeInfo.collectionAddress = _collectionAddress;\r\n        emit CollectorChanged(\r\n            address(this),\r\n            feeInfo.collectionAddress,\r\n            _collectionAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    //Set threshold of BULLA tokens owned that are required to receive reduced fee\r\n    function setbullaThreshold(uint32 _threshold) external override onlyOwner {\r\n        feeInfo.bullaTokenThreshold = _threshold;\r\n        emit FeeThresholdChanged(\r\n            address(this),\r\n            feeInfo.bullaTokenThreshold,\r\n            _threshold,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    //reduced fee if threshold of BULLA tokens owned is met\r\n    function setReducedFee(uint32 reducedFeeBasisPoints)\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        if(reducedFeeBasisPoints == 0) revert ValueMustBeGreaterThanZero();\r\n        uint32 oldFee = feeInfo.reducedFeeBasisPoints;\r\n        feeInfo.reducedFeeBasisPoints = reducedFeeBasisPoints;\r\n        emit FeeChanged(\r\n            address(this),\r\n            oldFee,\r\n            feeInfo.feeBasisPoints,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    //set the contract address of BULLA ERC20 token\r\n    function setBullaTokenAddress(address _bullaTokenAddress)\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        if(_bullaTokenAddress == address(0)) revert ZeroAddress();\r\n        bullaToken = IERC20(_bullaTokenAddress);\r\n        emit BullaTokenChanged(\r\n            address(this),\r\n            address(bullaToken),\r\n            _bullaTokenAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    //get the amount of BULLA tokens held by a given address\r\n    function getBullaBalance(address _holder)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        uint256 balance = address(bullaToken) == address(0)\r\n            ? 0\r\n            : bullaToken.balanceOf(_holder);\r\n        return balance;\r\n    }\r\n\r\n    function getFeeInfo(address _holder)\r\n        public\r\n        view\r\n        override\r\n        returns (uint32, address)\r\n    {\r\n        uint256 bullaTokenBalance = getBullaBalance(_holder);\r\n        uint32 fee = feeInfo.bullaTokenThreshold > 0 &&\r\n            bullaTokenBalance >= feeInfo.bullaTokenThreshold\r\n            ? feeInfo.reducedFeeBasisPoints\r\n            : feeInfo.feeBasisPoints;\r\n\r\n        return (fee, feeInfo.collectionAddress);\r\n    }\r\n\r\n    function getTransactionFee(address _holder, uint paymentAmount) external view override returns(address sendFeesTo, uint transactionFee){\r\n        (uint32 fee, address collectionAddress ) = getFeeInfo(_holder);\r\n        sendFeesTo = collectionAddress;\r\n        transactionFee = fee > 0 ? (paymentAmount * fee) / 10000 : 0;\r\n    }\r\n}\r\n"
    },
    "contracts/FrendLend.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.7;\r\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\r\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol';\r\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\r\nimport './interfaces/IBullaClaim.sol';\r\nimport './BullaBanker.sol';\r\n\r\nuint256 constant MAX_BPS = 10_000;\r\n\r\n/// @title FrendLend POC\r\n/// @author @colinnielsen\r\n/// @notice An extension to BullaClaim V1 that allows a creditor to offer capital in exchange for a claim\r\n/// @notice This is experimental software, use at your own risk\r\ncontract FrendLend {\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct LoanOffer {\r\n        uint24 interestBPS; // can be 0\r\n        uint40 termLength; // cannot be 0\r\n        uint128 loanAmount;\r\n        address creditor;\r\n        address debtor;\r\n        string description;\r\n        address claimToken;\r\n        Multihash attachment;\r\n    }\r\n\r\n    /// address of the Bulla Claim contract\r\n    IBullaClaim public bullaClaim;\r\n    /// the admin of the contract\r\n    address public admin;\r\n    /// the fee represented as the wei amount of the network's native token\r\n    uint256 public fee;\r\n    /// the number of loan offers\r\n    uint256 public loanOfferCount;\r\n    /// a mapping of id to the FinanceTerms offered by the creditor\r\n    mapping(uint256 => LoanOffer) public loanOffers;\r\n\r\n    event LoanOffered(uint256 indexed loanId, address indexed offeredBy, LoanOffer loanOffer, uint256 blocktime);\r\n    event LoanOfferAccepted(uint256 indexed loanId, uint256 indexed claimId, uint256 blocktime);\r\n    event LoanOfferRejected(uint256 indexed loanId, address indexed rejectedBy, uint256 blocktime);\r\n    event BullaTagUpdated(address indexed bullaManager, uint256 indexed tokenId, address indexed updatedBy, bytes32 tag, uint256 blocktime);\r\n\r\n    error INCORRECT_FEE();\r\n    error NOT_CREDITOR();\r\n    error NOT_DEBTOR();\r\n    error NOT_CREDITOR_OR_DEBTOR();\r\n    error NOT_ADMIN();\r\n    error INVALID_TERM_LENGTH();\r\n    error WITHDRAWAL_FAILED();\r\n    error TRANSFER_FAILED();\r\n\r\n    constructor(\r\n        IBullaClaim _bullaClaim,\r\n        address _admin,\r\n        uint256 _fee\r\n    ) {\r\n        bullaClaim = _bullaClaim;\r\n        admin = _admin;\r\n        fee = _fee;\r\n    }\r\n\r\n    ////// ADMIN FUNCTIONS //////\r\n\r\n    /// @notice SPEC:\r\n    ///     allows an admin to withdraw `withdrawableFee` amount of tokens from this contract's balance\r\n    ///     Given the following: `msg.sender == admin`\r\n    function withdrawFee(uint256 _amount) public {\r\n        if (msg.sender != admin) revert NOT_ADMIN();\r\n\r\n        (bool success, ) = admin.call{ value: _amount }('');\r\n        if (!success) revert WITHDRAWAL_FAILED();\r\n    }\r\n\r\n    ////// USER FUNCTIONS //////\r\n\r\n    /// @param offer claim creation params and loan info\r\n    /// @notice SPEC:\r\n    ///     Allows a user to create offer a loan to a potential debtor\r\n    ///     This function will:\r\n    ///         RES1. Increment the loan offer count in storage\r\n    ///         RES2. Store the offer parameters\r\n    ///         RES3. Emit a LoanOffered event with the offer parameters, the offerId, the creator, and the current timestamp\r\n    ///         RETURNS: the offerId\r\n    ///     Given the following:\r\n    ///         P1. `msg.value == fee`\r\n    ///         P2. `msg.sender == offer.creditor`\r\n    ///         P3. `terms.interestBPS < type(uint24).max`\r\n    ///         P4. `terms.termLength < type(uint40).max`\r\n    ///         P5. `terms.termLength > 0`\r\n    function offerLoan(LoanOffer calldata offer) public payable returns (uint256) {\r\n        if (msg.value != fee) revert INCORRECT_FEE();\r\n        if (msg.sender != offer.creditor) revert NOT_CREDITOR();\r\n        if (offer.termLength == 0) revert INVALID_TERM_LENGTH();\r\n\r\n        uint256 offerId = ++loanOfferCount;\r\n        loanOffers[offerId] = offer;\r\n\r\n        emit LoanOffered(offerId, msg.sender, offer, block.timestamp);\r\n\r\n        return offerId;\r\n    }\r\n\r\n    /// @param offerId the offerId to reject\r\n    /// @notice SPEC:\r\n    ///     Allows a debtor or a offerrer to reject (or rescind) a loan offer\r\n    ///     This function will:\r\n    ///         RES1. Delete the offer from storage\r\n    ///         RES2. Emit a LoanOfferRejected event with the offerId, the msg.sender, and the current timestamp\r\n    ///     Given the following:\r\n    ///         P1. the current msg.sender is either the creditor or debtor (covers: offer exists)\r\n    function rejectLoanOffer(uint256 offerId) public {\r\n        LoanOffer memory offer = loanOffers[offerId];\r\n        if (msg.sender != offer.creditor && msg.sender != offer.debtor) revert NOT_CREDITOR_OR_DEBTOR();\r\n\r\n        delete loanOffers[offerId];\r\n\r\n        emit LoanOfferRejected(offerId, msg.sender, block.timestamp);\r\n    }\r\n\r\n    /// @param offerId the offerId to acceot\r\n    /// @param tokenURI the tokenURI for the underlying claim\r\n    /// @param tag a bytes32 tag for the frontend\r\n    /// @notice WARNING: will not work with fee on transfer tokens\r\n    /// @notice SPEC:\r\n    ///     Allows a debtor to accept a loan offer, and receive payment\r\n    ///     This function will:\r\n    ///         RES1. Delete the offer from storage\r\n    ///         RES2. Creates a new claim for the loan amount + interest\r\n    ///         RES3. Transfers the offered loan amount from the creditor to the debtor\r\n    ///         RES4. Puts the claim into a non-rejectable repaying state by paying 1 wei\r\n    ///         RES5. Emits a BullaTagUpdated event with the claimId, the debtor address, a tag, and the current timestamp\r\n    ///         RES6. Emits a LoanOfferAccepted event with the offerId, the accepted claimId, and the current timestamp\r\n    ///     Given the following:\r\n    ///         P1. the current msg.sender is the debtor listed on the offer (covers: offer exists)\r\n    function acceptLoan(\r\n        uint256 offerId,\r\n        string calldata tokenURI,\r\n        bytes32 tag\r\n    ) public {\r\n        LoanOffer memory offer = loanOffers[offerId];\r\n        if (msg.sender != offer.debtor) revert NOT_DEBTOR();\r\n\r\n        delete loanOffers[offerId];\r\n\r\n        uint256 claimAmount = offer.loanAmount + (offer.loanAmount * offer.interestBPS) / MAX_BPS + 1;\r\n        uint256 claimId = bullaClaim.createClaimWithURI(\r\n            offer.creditor,\r\n            offer.debtor,\r\n            offer.description,\r\n            claimAmount,\r\n            block.timestamp + offer.termLength,\r\n            offer.claimToken,\r\n            offer.attachment,\r\n            tokenURI\r\n        );\r\n\r\n        // add 1 wei to force repaying status\r\n        IERC20(offer.claimToken).safeTransferFrom(offer.creditor, address(this), offer.loanAmount + 1);\r\n        IERC20(offer.claimToken).approve(address(bullaClaim), 1);\r\n        bullaClaim.payClaim(claimId, 1);\r\n\r\n        IERC20(offer.claimToken).safeTransfer(offer.debtor, offer.loanAmount);\r\n\r\n        emit BullaTagUpdated(bullaClaim.bullaManager(), claimId, msg.sender, tag, block.timestamp);\r\n        emit LoanOfferAccepted(offerId, claimId, block.timestamp);\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IBullaClaim.sol": {
      "content": "//SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"./IBullaManager.sol\";\r\n\r\nstruct Multihash {\r\n    bytes32 hash;\r\n    uint8 hashFunction;\r\n    uint8 size;\r\n}\r\n\r\nenum Status {\r\n    Pending,\r\n    Repaying,\r\n    Paid,\r\n    Rejected,\r\n    Rescinded\r\n}\r\n\r\nstruct Claim {\r\n    uint256 claimAmount;\r\n    uint256 paidAmount;\r\n    Status status;\r\n    uint256 dueBy;\r\n    address debtor;\r\n    address claimToken;\r\n    Multihash attachment;\r\n}\r\n\r\ninterface IBullaClaim {\r\n    event ClaimCreated(\r\n        address bullaManager,\r\n        uint256 indexed tokenId,\r\n        address parent,\r\n        address indexed creditor,\r\n        address indexed debtor,\r\n        address origin,\r\n        string description,\r\n        Claim claim,\r\n        uint256 blocktime\r\n    );\r\n\r\n    event ClaimPayment(\r\n        address indexed bullaManager,\r\n        uint256 indexed tokenId,\r\n        address indexed debtor,\r\n        address paidBy,\r\n        address paidByOrigin,\r\n        uint256 paymentAmount,\r\n        uint256 blocktime\r\n    );\r\n\r\n    event ClaimRejected(\r\n        address indexed bullaManager,\r\n        uint256 indexed tokenId,\r\n        uint256 blocktime\r\n    );\r\n\r\n    event ClaimRescinded(\r\n        address indexed bullaManager,\r\n        uint256 indexed tokenId,\r\n        uint256 blocktime\r\n    );\r\n\r\n    event FeePaid(\r\n        address indexed bullaManager,\r\n        uint256 indexed tokenId,\r\n        address indexed collectionAddress,\r\n        uint256 paymentAmount,\r\n        uint256 transactionFee,\r\n        uint256 blocktime\r\n    );\r\n\r\n    event BullaManagerSet(\r\n        address indexed prevBullaManager,\r\n        address indexed newBullaManager,\r\n        uint256 blocktime\r\n    );\r\n\r\n    function createClaim(\r\n        address creditor,\r\n        address debtor,\r\n        string memory description,\r\n        uint256 claimAmount,\r\n        uint256 dueBy,\r\n        address claimToken,\r\n        Multihash calldata attachment\r\n    ) external returns (uint256 newTokenId);\r\n\r\n    function createClaimWithURI(\r\n        address creditor,\r\n        address debtor,\r\n        string memory description,\r\n        uint256 claimAmount,\r\n        uint256 dueBy,\r\n        address claimToken,\r\n        Multihash calldata attachment,\r\n        string calldata _tokenUri\r\n    ) external returns (uint256 newTokenId);\r\n\r\n    function payClaim(uint256 tokenId, uint256 paymentAmount) external;\r\n\r\n    function rejectClaim(uint256 tokenId) external;\r\n\r\n    function rescindClaim(uint256 tokenId) external;\r\n\r\n    function getClaim(uint256 tokenId) external view returns (Claim calldata);\r\n\r\n    function bullaManager() external view returns (address);\r\n}\r\n"
    },
    "contracts/interfaces/IBullaManager.sol": {
      "content": "//SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.3;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\nstruct FeeInfo {\r\n    address collectionAddress;\r\n    uint32 feeBasisPoints;\r\n    uint32 bullaTokenThreshold; //# of BULLA tokens held to get fee reduction\r\n    uint32 reducedFeeBasisPoints; //reduced fee for BULLA token holders\r\n}\r\n\r\ninterface IBullaManager {\r\n    event FeeChanged(\r\n        address indexed bullaManager,\r\n        uint256 prevFee,\r\n        uint256 newFee,\r\n        uint256 blocktime\r\n    );\r\n    event CollectorChanged(\r\n        address indexed bullaManager,\r\n        address prevCollector,\r\n        address newCollector,\r\n        uint256 blocktime\r\n    );\r\n    event OwnerChanged(\r\n        address indexed bullaManager,\r\n        address prevOwner,\r\n        address newOwner,\r\n        uint256 blocktime\r\n    );\r\n    event BullaTokenChanged(\r\n        address indexed bullaManager,\r\n        address prevBullaToken,\r\n        address newBullaToken,\r\n        uint256 blocktime\r\n    );\r\n    event FeeThresholdChanged(\r\n        address indexed bullaManager,\r\n        uint256 prevFeeThreshold,\r\n        uint256 newFeeThreshold,\r\n        uint256 blocktime\r\n    );\r\n    event ReducedFeeChanged(\r\n        address indexed bullaManager,\r\n        uint256 prevFee,\r\n        uint256 newFee,\r\n        uint256 blocktime\r\n    );\r\n\r\n    function setOwner(address _owner) external;\r\n\r\n    function setFee(uint32 _feeBasisPoints) external;\r\n\r\n    function setCollectionAddress(address _collectionAddress) external;\r\n\r\n    function setbullaThreshold(uint32 _threshold) external;\r\n\r\n    function setReducedFee(uint32 reducedFeeBasisPoints) external;\r\n\r\n    function setBullaTokenAddress(address _bullaTokenAddress) external;\r\n\r\n    function getBullaBalance(address _holder) external view returns (uint256);\r\n\r\n    function getFeeInfo(address _holder)\r\n        external\r\n        view\r\n        returns (uint32, address);\r\n    \r\n    function getTransactionFee(address _holder, uint paymentAmount) external view returns(address sendFeesTo, uint transactionFee);\r\n}\r\n"
    },
    "contracts/libraries/BoringBatchable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7; // @audit : bump version from 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\r\n// WARNING!!!\r\n// Combining BoringBatchable with msg.value can cause double spending issues\r\n// https://www.paradigm.xyz/2021/08/two-rights-might-make-a-wrong/\r\n\r\ncontract BoringBatchable {\r\n    /// @dev Helper function to extract a useful revert message from a failed call.\r\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\r\n    function _getRevertMsg(bytes memory _returnData)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\r\n        if (_returnData.length < 68) return \"Transaction reverted silently\";\r\n\r\n        assembly {\r\n            // Slice the sighash.\r\n            _returnData := add(_returnData, 0x04)\r\n        }\r\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\r\n    }\r\n\r\n    /// @notice Allows batched call to self (this contract).\r\n    /// @param calls An array of inputs for each call.\r\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\r\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\r\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\r\n    // C3: The length of the loop is fully under user control, so can't be exploited\r\n    // C7: Delegatecall is only used on the same contract, so it's safe\r\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable {\r\n        for (uint256 i = 0; i < calls.length; i++) {\r\n            (bool success, bytes memory result) = address(this).delegatecall(\r\n                calls[i]\r\n            );\r\n            if (!success && revertOnFail) {\r\n                revert(_getRevertMsg(result));\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/SafeModuleFactory.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.8.0;\r\n\r\ncontract ModuleProxyFactory {\r\n    event ModuleProxyCreation(\r\n        address indexed proxy,\r\n        address indexed masterCopy\r\n    );\r\n\r\n    /// `target` can not be zero.\r\n    error ZeroAddress(address target);\r\n\r\n    /// `address_` is already taken.\r\n    error TakenAddress(address address_);\r\n\r\n    /// @notice Initialization failed.\r\n    error FailedInitialization();\r\n\r\n    function createProxy(address target, bytes32 salt)\r\n        internal\r\n        returns (address result)\r\n    {\r\n        if (address(target) == address(0)) revert ZeroAddress(target);\r\n        bytes memory deployment = abi.encodePacked(\r\n            hex\"602d8060093d393df3363d3d373d3d3d363d73\",\r\n            target,\r\n            hex\"5af43d82803e903d91602b57fd5bf3\"\r\n        );\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            result := create2(0, add(deployment, 0x20), mload(deployment), salt)\r\n        }\r\n        if (result == address(0)) revert TakenAddress(result);\r\n    }\r\n\r\n    function deployModule(\r\n        address masterCopy,\r\n        bytes memory initializer,\r\n        uint256 saltNonce\r\n    ) public returns (address proxy) {\r\n        proxy = createProxy(\r\n            masterCopy,\r\n            keccak256(abi.encodePacked(keccak256(initializer), saltNonce))\r\n        );\r\n        (bool success, ) = proxy.call(initializer);\r\n        if (!success) revert FailedInitialization();\r\n\r\n        emit ModuleProxyCreation(proxy, masterCopy);\r\n    }\r\n}"
    },
    "contracts/mocks/BullaToken.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.3;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract BullaToken is ERC20 {\r\n    constructor() ERC20(\"Token\", \"TKN\") {\r\n        _mint(msg.sender, 1000000 * (10**uint256(decimals())));\r\n    }\r\n\r\n    function mint(address to, uint256 amount) public {\r\n        _mint(to, amount);\r\n    } \r\n}\r\n"
    },
    "contracts/mocks/gnosisSafe.sol": {
      "content": "// SPDX-License-Identifier: Unlicensed\r\npragma solidity >=0.8.0;\r\nimport \"@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\r\n\r\ncontract Enum {\r\n    enum Operation {\r\n        Call,\r\n        DelegateCall\r\n    }\r\n}\r\n\r\ncontract TestSafe is OwnerManager, IERC721Receiver {\r\n    address public module;\r\n\r\n    constructor(address[] memory owners, uint8 threshold) {\r\n        setupOwners(owners, threshold);\r\n    }\r\n\r\n    function enableModule(address _module) external {\r\n        module = _module;\r\n    }\r\n\r\n    function disableModule(address, address) external {\r\n        module = address(0);\r\n    }\r\n\r\n    function isModuleEnabled(address _module) external view returns (bool) {\r\n        if (module == _module) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function execTransactionFromModule(\r\n        address payable to,\r\n        uint256 value,\r\n        bytes calldata data,\r\n        uint8 operation\r\n    ) external returns (bool success) {\r\n        require(msg.sender == module, \"Not authorized\");\r\n        if (operation == 1) (success, ) = to.delegatecall(data);\r\n        else (success, ) = to.call{value: value}(data);\r\n    }\r\n\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes calldata\r\n    ) external pure override returns (bytes4) {\r\n        return IERC721Receiver.onERC721Received.selector;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}