{
  "address": "0x1c534661326b41c8b8aab5631ECED6D9755ff192",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bullaManager_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ClaimCompleted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClaimNotPending",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClaimTokenNotContract",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "NotCreditor",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "NotDebtor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PastDueDate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenIdNoExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ValueMustBeGreaterThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevBullaManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newBullaManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blocktime",
          "type": "uint256"
        }
      ],
      "name": "BullaManagerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bullaManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "parent",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creditor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "debtor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "claimAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paidAmount",
              "type": "uint256"
            },
            {
              "internalType": "enum Status",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "dueBy",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "debtor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "claimToken",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint8",
                  "name": "hashFunction",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "size",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Multihash",
              "name": "attachment",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Claim",
          "name": "claim",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blocktime",
          "type": "uint256"
        }
      ],
      "name": "ClaimCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bullaManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "debtor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paidBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paidByOrigin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paymentAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blocktime",
          "type": "uint256"
        }
      ],
      "name": "ClaimPayment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bullaManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blocktime",
          "type": "uint256"
        }
      ],
      "name": "ClaimRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bullaManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blocktime",
          "type": "uint256"
        }
      ],
      "name": "ClaimRescinded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bullaManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collectionAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paymentAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transactionFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blocktime",
          "type": "uint256"
        }
      ],
      "name": "FeePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bullaManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creditor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debtor",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "claimAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dueBy",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "hashFunction",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "size",
              "type": "uint8"
            }
          ],
          "internalType": "struct Multihash",
          "name": "attachment",
          "type": "tuple"
        }
      ],
      "name": "createClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creditor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debtor",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "claimAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dueBy",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "hashFunction",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "size",
              "type": "uint8"
            }
          ],
          "internalType": "struct Multihash",
          "name": "attachment",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "_tokenUri",
          "type": "string"
        }
      ],
      "name": "createClaimWithURI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getClaim",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "claimAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paidAmount",
              "type": "uint256"
            },
            {
              "internalType": "enum Status",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "dueBy",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "debtor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "claimToken",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint8",
                  "name": "hashFunction",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "size",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Multihash",
              "name": "attachment",
              "type": "tuple"
            }
          ],
          "internalType": "struct Claim",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextClaimId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "paymentAmount",
          "type": "uint256"
        }
      ],
      "name": "payClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "rejectClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "rescindClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bullaManager",
          "type": "address"
        }
      ],
      "name": "setBullaManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x72a33d2d57ea7cdd90c28fe7dd961098b064dbe4eb9a8e6cfc5fe6684f18e801",
  "receipt": {
    "to": null,
    "from": "0x81f1e947811496453dBBaeA0AC2c250e056BBd96",
    "contractAddress": "0x1c534661326b41c8b8aab5631ECED6D9755ff192",
    "transactionIndex": 0,
    "gasUsed": "4745857",
    "logsBloom": "0x
    "blockHash": "0x9e45bc0dfab5fb2cd5eebc3c0baeab71cbd94398c367a11d08d939411c06e674",
    "transactionHash": "0x72a33d2d57ea7cdd90c28fe7dd961098b064dbe4eb9a8e6cfc5fe6684f18e801",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2487889,
        "transactionHash": "0x72a33d2d57ea7cdd90c28fe7dd961098b064dbe4eb9a8e6cfc5fe6684f18e801",
        "address": "0x1c534661326b41c8b8aab5631ECED6D9755ff192",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000081f1e947811496453dbbaea0ac2c250e056bbd96"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9e45bc0dfab5fb2cd5eebc3c0baeab71cbd94398c367a11d08d939411c06e674"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 2487889,
        "transactionHash": "0x72a33d2d57ea7cdd90c28fe7dd961098b064dbe4eb9a8e6cfc5fe6684f18e801",
        "address": "0x1c534661326b41c8b8aab5631ECED6D9755ff192",
        "topics": [
          "0x68756449c91230029864f3a385c98edecfd7f9d6824b6fbff849e07500f96bd9",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e14e624b29bcda2ec409bbbf97037fede3803797"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000006894b85c",
        "logIndex": 1,
        "blockHash": "0x9e45bc0dfab5fb2cd5eebc3c0baeab71cbd94398c367a11d08d939411c06e674"
      }
    ],
    "blockNumber": 2487889,
    "cumulativeGasUsed": "4745857",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE14E624b29BcDa2ec409BBBf97037fEDe3803797",
    "https://ipfs.io/ipfs/"
  ],
  "numDeployments": 1,
  "solcInputHash": "b8545aea175c6ca7dd158e613a2ab35e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bullaManager_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ClaimCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimNotPending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimTokenNotContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NotCreditor\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NotDebtor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PastDueDate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenIdNoExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValueMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevBullaManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBullaManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"BullaManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bullaManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dueBy\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"hashFunction\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"size\",\"type\":\"uint8\"}],\"internalType\":\"struct Multihash\",\"name\":\"attachment\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Claim\",\"name\":\"claim\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"ClaimCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bullaManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paidBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paidByOrigin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"ClaimPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bullaManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"ClaimRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bullaManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"ClaimRescinded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bullaManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"FeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bullaManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dueBy\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"hashFunction\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"size\",\"type\":\"uint8\"}],\"internalType\":\"struct Multihash\",\"name\":\"attachment\",\"type\":\"tuple\"}],\"name\":\"createClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dueBy\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"hashFunction\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"size\",\"type\":\"uint8\"}],\"internalType\":\"struct Multihash\",\"name\":\"attachment\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"_tokenUri\",\"type\":\"string\"}],\"name\":\"createClaimWithURI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getClaim\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dueBy\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"hashFunction\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"size\",\"type\":\"uint8\"}],\"internalType\":\"struct Multihash\",\"name\":\"attachment\",\"type\":\"tuple\"}],\"internalType\":\"struct Claim\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextClaimId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"}],\"name\":\"payClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"rejectClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"rescindClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bullaManager\",\"type\":\"address\"}],\"name\":\"setBullaManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BullaClaimERC721.sol\":\"BullaClaimERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd644260d8e4e64563a7adba96d774dbaac6ae89c2ee58ef49a19850ff1239b08\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x188d038a65a945481cc13fe30db334472dfbed61f7959d4478d05feb6303b1ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/BullaClaimERC721.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./interfaces/IBullaManager.sol\\\";\\r\\nimport \\\"./interfaces/IBullaClaim.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\nerror ZeroAddress();\\r\\nerror PastDueDate();\\r\\nerror TokenIdNoExist();\\r\\nerror ClaimTokenNotContract();\\r\\nerror NotCreditor(address sender);\\r\\nerror NotDebtor(address sender);\\r\\nerror NotTokenOwner(address sender);\\r\\nerror NotCreditorOrDebtor(address sender);\\r\\nerror OwnerNotCreditor(address sender);\\r\\nerror ClaimCompleted();\\r\\nerror ClaimNotPending();\\r\\nerror IncorrectValue(uint256 value, uint256 expectedValue);\\r\\nerror InsufficientBalance(uint256 senderBalance);\\r\\nerror InsufficientAllowance(uint256 senderAllowance);\\r\\nerror RepayingTooMuch(uint256 amount, uint256 expectedAmount);\\r\\nerror ValueMustBeGreaterThanZero();\\r\\n\\r\\nabstract contract BullaClaimERC721URI is Ownable, ERC721URIStorage {\\r\\n    string public baseURI;\\r\\n\\r\\n    function setBaseURI(string memory baseURI_) public onlyOwner {\\r\\n        baseURI = baseURI_;\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n        return baseURI;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract BullaClaimERC721 is IBullaClaim, BullaClaimERC721URI {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Counters for Counters.Counter;\\r\\n    using Address for address;\\r\\n\\r\\n    Counters.Counter private tokenIds;\\r\\n\\r\\n    address public override bullaManager;\\r\\n    mapping(uint256 => Claim) private claimTokens;\\r\\n\\r\\n    modifier onlyTokenOwner(uint256 tokenId) {\\r\\n        if (ownerOf(tokenId) != msg.sender) revert NotCreditor(msg.sender);\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier onlyDebtor(uint256 tokenId) {\\r\\n        if (claimTokens[tokenId].debtor != msg.sender)\\r\\n            revert NotDebtor(msg.sender);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyIncompleteClaim(uint256 tokenId) {\\r\\n        if (\\r\\n            claimTokens[tokenId].status != Status.Pending &&\\r\\n            claimTokens[tokenId].status != Status.Repaying\\r\\n        ) revert ClaimCompleted();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPendingClaim(uint256 tokenId) {\\r\\n        if (claimTokens[tokenId].status != Status.Pending)\\r\\n            revert ClaimNotPending();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address bullaManager_, string memory baseURI_)\\r\\n        ERC721(\\\"BullaClaim721\\\", \\\"CLAIM\\\")\\r\\n    {\\r\\n        setBullaManager(bullaManager_);\\r\\n        setBaseURI(baseURI_);\\r\\n    }\\r\\n\\r\\n    function setBullaManager(address _bullaManager) public onlyOwner {\\r\\n        address prevBullaManager = bullaManager;\\r\\n        bullaManager = _bullaManager;\\r\\n        emit BullaManagerSet(prevBullaManager, bullaManager, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function _createClaim(\\r\\n        address creditor,\\r\\n        address debtor,\\r\\n        string memory description,\\r\\n        uint256 claimAmount,\\r\\n        uint256 dueBy,\\r\\n        address claimToken,\\r\\n        Multihash calldata attachment\\r\\n    ) internal returns (uint256) {\\r\\n        if (creditor == address(0) || debtor == address(0)) {\\r\\n            revert ZeroAddress();\\r\\n        }\\r\\n        if (claimAmount == 0) {\\r\\n            revert ValueMustBeGreaterThanZero();\\r\\n        }\\r\\n        if (dueBy < block.timestamp) {\\r\\n            revert PastDueDate();\\r\\n        }\\r\\n        if (!claimToken.isContract()) {\\r\\n            revert ClaimTokenNotContract();\\r\\n        }\\r\\n\\r\\n        tokenIds.increment();\\r\\n        uint256 newTokenId = tokenIds.current();\\r\\n        _safeMint(creditor, newTokenId);\\r\\n\\r\\n        Claim memory newClaim;\\r\\n        newClaim.debtor = debtor;\\r\\n        newClaim.claimAmount = claimAmount;\\r\\n        newClaim.dueBy = dueBy;\\r\\n        newClaim.status = Status.Pending;\\r\\n        newClaim.claimToken = claimToken;\\r\\n        newClaim.attachment = attachment;\\r\\n        claimTokens[newTokenId] = newClaim;\\r\\n\\r\\n        emit ClaimCreated(\\r\\n            bullaManager,\\r\\n            newTokenId,\\r\\n            msg.sender,\\r\\n            creditor,\\r\\n            debtor,\\r\\n            tx.origin,\\r\\n            description,\\r\\n            newClaim,\\r\\n            block.timestamp\\r\\n        );\\r\\n        return newTokenId;\\r\\n    }\\r\\n\\r\\n    function createClaim(\\r\\n        address creditor,\\r\\n        address debtor,\\r\\n        string memory description,\\r\\n        uint256 claimAmount,\\r\\n        uint256 dueBy,\\r\\n        address claimToken,\\r\\n        Multihash calldata attachment\\r\\n    ) external override returns (uint256) {\\r\\n        uint256 _tokenId = _createClaim(\\r\\n            creditor,\\r\\n            debtor,\\r\\n            description,\\r\\n            claimAmount,\\r\\n            dueBy,\\r\\n            claimToken,\\r\\n            attachment\\r\\n        );\\r\\n        return _tokenId;\\r\\n    }\\r\\n\\r\\n    function createClaimWithURI(\\r\\n        address creditor,\\r\\n        address debtor,\\r\\n        string memory description,\\r\\n        uint256 claimAmount,\\r\\n        uint256 dueBy,\\r\\n        address claimToken,\\r\\n        Multihash calldata attachment,\\r\\n        string calldata _tokenUri\\r\\n    ) external override returns (uint256) {\\r\\n        uint256 _tokenId = _createClaim(\\r\\n            creditor,\\r\\n            debtor,\\r\\n            description,\\r\\n            claimAmount,\\r\\n            dueBy,\\r\\n            claimToken,\\r\\n            attachment\\r\\n        );\\r\\n        _setTokenURI(_tokenId, _tokenUri);\\r\\n        return _tokenId;\\r\\n    }\\r\\n\\r\\n    function payClaim(uint256 tokenId, uint256 paymentAmount)\\r\\n        external\\r\\n        override\\r\\n        onlyIncompleteClaim(tokenId)\\r\\n    {\\r\\n        if (paymentAmount == 0) revert ValueMustBeGreaterThanZero();\\r\\n        if (!_exists(tokenId)) revert TokenIdNoExist();\\r\\n\\r\\n        Claim memory claim = getClaim(tokenId);\\r\\n        address creditor = ownerOf(tokenId);\\r\\n\\r\\n        uint256 amountToRepay = claim.claimAmount - claim.paidAmount;\\r\\n        uint256 totalPayment = paymentAmount >= amountToRepay\\r\\n            ? amountToRepay\\r\\n            : paymentAmount;\\r\\n        claim.paidAmount + totalPayment == claim.claimAmount\\r\\n            ? claim.status = Status.Paid\\r\\n            : claim.status = Status.Repaying;\\r\\n        claimTokens[tokenId].paidAmount += totalPayment;\\r\\n        claimTokens[tokenId].status = claim.status;\\r\\n\\r\\n        (address collectionAddress, uint256 transactionFee) = IBullaManager(\\r\\n            bullaManager\\r\\n        ).getTransactionFee(msg.sender, totalPayment);\\r\\n\\r\\n        IERC20(claim.claimToken).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            creditor,\\r\\n            totalPayment - transactionFee\\r\\n        );\\r\\n\\r\\n        if (transactionFee > 0) {\\r\\n            IERC20(claim.claimToken).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                collectionAddress,\\r\\n                transactionFee\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit ClaimPayment(\\r\\n            bullaManager,\\r\\n            tokenId,\\r\\n            claim.debtor,\\r\\n            msg.sender,\\r\\n            tx.origin,\\r\\n            paymentAmount,\\r\\n            block.timestamp\\r\\n        );\\r\\n        emit FeePaid(\\r\\n            bullaManager,\\r\\n            tokenId,\\r\\n            collectionAddress,\\r\\n            paymentAmount,\\r\\n            transactionFee,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function rejectClaim(uint256 tokenId)\\r\\n        external\\r\\n        override\\r\\n        onlyDebtor(tokenId)\\r\\n        onlyPendingClaim(tokenId)\\r\\n    {\\r\\n        claimTokens[tokenId].status = Status.Rejected;\\r\\n        emit ClaimRejected(bullaManager, tokenId, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function rescindClaim(uint256 tokenId)\\r\\n        external\\r\\n        override\\r\\n        onlyTokenOwner(tokenId)\\r\\n        onlyPendingClaim(tokenId)\\r\\n    {\\r\\n        claimTokens[tokenId].status = Status.Rescinded;\\r\\n        emit ClaimRescinded(bullaManager, tokenId, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function burn(uint256 tokenId) external onlyTokenOwner(tokenId) {\\r\\n        _burn(tokenId);\\r\\n    }\\r\\n\\r\\n    function nextClaimId() external view returns (uint256) {\\r\\n        return tokenIds.current() + 1;\\r\\n    }\\r\\n\\r\\n    function getClaim(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (Claim memory)\\r\\n    {\\r\\n        return claimTokens[tokenId];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x04fde59493b5291c52467876485e04b393c14d69466eca2ee3b41c8616436dc3\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBullaClaim.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./IBullaManager.sol\\\";\\r\\n\\r\\nstruct Multihash {\\r\\n    bytes32 hash;\\r\\n    uint8 hashFunction;\\r\\n    uint8 size;\\r\\n}\\r\\n\\r\\nenum Status {\\r\\n    Pending,\\r\\n    Repaying,\\r\\n    Paid,\\r\\n    Rejected,\\r\\n    Rescinded\\r\\n}\\r\\n\\r\\nstruct Claim {\\r\\n    uint256 claimAmount;\\r\\n    uint256 paidAmount;\\r\\n    Status status;\\r\\n    uint256 dueBy;\\r\\n    address debtor;\\r\\n    address claimToken;\\r\\n    Multihash attachment;\\r\\n}\\r\\n\\r\\ninterface IBullaClaim {\\r\\n    event ClaimCreated(\\r\\n        address bullaManager,\\r\\n        uint256 indexed tokenId,\\r\\n        address parent,\\r\\n        address indexed creditor,\\r\\n        address indexed debtor,\\r\\n        address origin,\\r\\n        string description,\\r\\n        Claim claim,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n\\r\\n    event ClaimPayment(\\r\\n        address indexed bullaManager,\\r\\n        uint256 indexed tokenId,\\r\\n        address indexed debtor,\\r\\n        address paidBy,\\r\\n        address paidByOrigin,\\r\\n        uint256 paymentAmount,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n\\r\\n    event ClaimRejected(\\r\\n        address indexed bullaManager,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n\\r\\n    event ClaimRescinded(\\r\\n        address indexed bullaManager,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n\\r\\n    event FeePaid(\\r\\n        address indexed bullaManager,\\r\\n        uint256 indexed tokenId,\\r\\n        address indexed collectionAddress,\\r\\n        uint256 paymentAmount,\\r\\n        uint256 transactionFee,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n\\r\\n    event BullaManagerSet(\\r\\n        address indexed prevBullaManager,\\r\\n        address indexed newBullaManager,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n\\r\\n    function createClaim(\\r\\n        address creditor,\\r\\n        address debtor,\\r\\n        string memory description,\\r\\n        uint256 claimAmount,\\r\\n        uint256 dueBy,\\r\\n        address claimToken,\\r\\n        Multihash calldata attachment\\r\\n    ) external returns (uint256 newTokenId);\\r\\n\\r\\n    function createClaimWithURI(\\r\\n        address creditor,\\r\\n        address debtor,\\r\\n        string memory description,\\r\\n        uint256 claimAmount,\\r\\n        uint256 dueBy,\\r\\n        address claimToken,\\r\\n        Multihash calldata attachment,\\r\\n        string calldata _tokenUri\\r\\n    ) external returns (uint256 newTokenId);\\r\\n\\r\\n    function payClaim(uint256 tokenId, uint256 paymentAmount) external;\\r\\n\\r\\n    function rejectClaim(uint256 tokenId) external;\\r\\n\\r\\n    function rescindClaim(uint256 tokenId) external;\\r\\n\\r\\n    function getClaim(uint256 tokenId) external view returns (Claim calldata);\\r\\n\\r\\n    function bullaManager() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xea0beb1115699b76692d1d251ec041c73eb66e411d4f47d46e0e60fff0339045\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBullaManager.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.3;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nstruct FeeInfo {\\r\\n    address collectionAddress;\\r\\n    uint32 feeBasisPoints;\\r\\n    uint32 bullaTokenThreshold; //# of BULLA tokens held to get fee reduction\\r\\n    uint32 reducedFeeBasisPoints; //reduced fee for BULLA token holders\\r\\n}\\r\\n\\r\\ninterface IBullaManager {\\r\\n    event FeeChanged(\\r\\n        address indexed bullaManager,\\r\\n        uint256 prevFee,\\r\\n        uint256 newFee,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n    event CollectorChanged(\\r\\n        address indexed bullaManager,\\r\\n        address prevCollector,\\r\\n        address newCollector,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n    event OwnerChanged(\\r\\n        address indexed bullaManager,\\r\\n        address prevOwner,\\r\\n        address newOwner,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n    event BullaTokenChanged(\\r\\n        address indexed bullaManager,\\r\\n        address prevBullaToken,\\r\\n        address newBullaToken,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n    event FeeThresholdChanged(\\r\\n        address indexed bullaManager,\\r\\n        uint256 prevFeeThreshold,\\r\\n        uint256 newFeeThreshold,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n    event ReducedFeeChanged(\\r\\n        address indexed bullaManager,\\r\\n        uint256 prevFee,\\r\\n        uint256 newFee,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n\\r\\n    function setOwner(address _owner) external;\\r\\n\\r\\n    function setFee(uint32 _feeBasisPoints) external;\\r\\n\\r\\n    function setCollectionAddress(address _collectionAddress) external;\\r\\n\\r\\n    function setbullaThreshold(uint32 _threshold) external;\\r\\n\\r\\n    function setReducedFee(uint32 reducedFeeBasisPoints) external;\\r\\n\\r\\n    function setBullaTokenAddress(address _bullaTokenAddress) external;\\r\\n\\r\\n    function getBullaBalance(address _holder) external view returns (uint256);\\r\\n\\r\\n    function getFeeInfo(address _holder)\\r\\n        external\\r\\n        view\\r\\n        returns (uint32, address);\\r\\n    \\r\\n    function getTransactionFee(address _holder, uint paymentAmount) external view returns(address sendFeesTo, uint transactionFee);\\r\\n}\\r\\n\",\"keccak256\":\"0x81451ca76f6027531a9873d5c05159b76178ac38bb0c754dfad9c91af8a3378a\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162005b1838038062005b1883398181016040528101906200003791906200058a565b6040518060400160405280600d81526020017f42756c6c61436c61696d373231000000000000000000000000000000000000008152506040518060400160405280600581526020017f434c41494d000000000000000000000000000000000000000000000000000000815250620000c3620000b76200012160201b60201c565b6200012960201b60201c565b8160019080519060200190620000db92919062000445565b508060029080519060200190620000f492919062000445565b5050506200010882620001ed60201b60201c565b62000119816200037160201b60201c565b50506200087d565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620001fd6200012160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620002236200041c60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16146200027c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002739062000628565b60405180910390fd5b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f68756449c91230029864f3a385c98edecfd7f9d6824b6fbff849e07500f96bd9426040516200036591906200064a565b60405180910390a35050565b620003816200012160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620003a76200041c60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff161462000400576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003f79062000628565b60405180910390fd5b80600890805190602001906200041892919062000445565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b82805462000453906200074b565b90600052602060002090601f016020900481019282620004775760008555620004c3565b82601f106200049257805160ff1916838001178555620004c3565b82800160010185558215620004c3579182015b82811115620004c2578251825591602001919060010190620004a5565b5b509050620004d29190620004d6565b5090565b5b80821115620004f1576000816000905550600101620004d7565b5090565b60006200050c620005068462000690565b62000667565b9050828152602081018484840111156200052b576200052a6200081a565b5b6200053884828562000715565b509392505050565b600081519050620005518162000863565b92915050565b600082601f8301126200056f576200056e62000815565b5b815162000581848260208601620004f5565b91505092915050565b60008060408385031215620005a457620005a362000824565b5b6000620005b48582860162000540565b925050602083015167ffffffffffffffff811115620005d857620005d76200081f565b5b620005e68582860162000557565b9150509250929050565b6000620005ff602083620006c6565b91506200060c826200083a565b602082019050919050565b62000622816200070b565b82525050565b600060208201905081810360008301526200064381620005f0565b9050919050565b600060208201905062000661600083018462000617565b92915050565b60006200067362000686565b905062000681828262000781565b919050565b6000604051905090565b600067ffffffffffffffff821115620006ae57620006ad620007e6565b5b620006b98262000829565b9050602081019050919050565b600082825260208201905092915050565b6000620006e482620006eb565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156200073557808201518184015260208101905062000718565b8381111562000745576000848401525b50505050565b600060028204905060018216806200076457607f821691505b602082108114156200077b576200077a620007b7565b5b50919050565b6200078c8262000829565b810181811067ffffffffffffffff82111715620007ae57620007ad620007e6565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6200086e81620006d7565b81146200087a57600080fd5b50565b61528b806200088d6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c8063715018a6116100f9578063b88d4fde11610097578063c99c444811610071578063c99c444814610503578063e8042ce51461051f578063e985e9c51461053b578063f2fde38b1461056b576101c4565b8063b88d4fde14610487578063c87b56dd146104a3578063c92aeec1146104d3576101c4565b8063987b22be116100d3578063987b22be14610401578063a0021cf114610431578063a22cb4651461044f578063af9486bd1461046b576101c4565b8063715018a6146103bb5780638da5cb5b146103c557806395d89b41146103e3576101c4565b806342966c68116101665780635e39986f116101405780635e39986f1461031f5780636352211e1461033d5780636c0360eb1461036d57806370a082311461038b576101c4565b806342966c68146102b757806355f804b3146102d35780635aef2447146102ef576101c4565b8063095ea7b3116101a2578063095ea7b314610247578063203411011461026357806323b872dd1461027f57806342842e0e1461029b576101c4565b806301ffc9a7146101c957806306fdde03146101f9578063081812fc14610217575b600080fd5b6101e360048036038101906101de9190613c13565b610587565b6040516101f091906143fd565b60405180910390f35b610201610669565b60405161020e9190614418565b60405180910390f35b610231600480360381019061022c9190613ce3565b6106fb565b60405161023e9190614287565b60405180910390f35b610261600480360381019061025c9190613b66565b610780565b005b61027d60048036038101906102789190613ce3565b610898565b005b61029960048036038101906102949190613a50565b610a76565b005b6102b560048036038101906102b09190613a50565b610ad6565b005b6102d160048036038101906102cc9190613ce3565b610af6565b005b6102ed60048036038101906102e89190613c6d565b610b7c565b005b61030960048036038101906103049190613ce3565b610c12565b60405161031691906146da565b60405180910390f35b610327610d9c565b6040516103349190614287565b60405180910390f35b61035760048036038101906103529190613ce3565b610dc2565b6040516103649190614287565b60405180910390f35b610375610e74565b6040516103829190614418565b60405180910390f35b6103a560048036038101906103a09190613831565b610f02565b6040516103b291906146f6565b60405180910390f35b6103c3610fba565b005b6103cd611042565b6040516103da9190614287565b60405180910390f35b6103eb61106b565b6040516103f89190614418565b60405180910390f35b61041b6004803603810190610416919061389e565b6110fd565b60405161042891906146f6565b60405180910390f35b610439611120565b60405161044691906146f6565b60405180910390f35b61046960048036038101906104649190613b26565b61113d565b005b61048560048036038101906104809190613831565b6112be565b005b6104a1600480360381019061049c9190613aa3565b61142d565b005b6104bd60048036038101906104b89190613ce3565b61148f565b6040516104ca9190614418565b60405180910390f35b6104ed60048036038101906104e8919061395d565b6115e1565b6040516104fa91906146f6565b60405180910390f35b61051d60048036038101906105189190613d10565b611654565b005b61053960048036038101906105349190613ce3565b611b2f565b005b6105556004803603810190610550919061385e565b611cdf565b60405161056291906143fd565b60405180910390f35b61058560048036038101906105809190613831565b611d73565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061065257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610662575061066182611e6b565b5b9050919050565b606060018054610678906149ca565b80601f01602080910402602001604051908101604052809291908181526020018280546106a4906149ca565b80156106f15780601f106106c6576101008083540402835291602001916106f1565b820191906000526020600020905b8154815290600101906020018083116106d457829003601f168201915b5050505050905090565b600061070682611ed5565b610745576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073c906145da565b60405180910390fd5b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061078b82610dc2565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f39061465a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661081b611f41565b73ffffffffffffffffffffffffffffffffffffffff16148061084a575061084981610844611f41565b611cdf565b5b610889576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108809061451a565b60405180910390fd5b6108938383611f49565b505050565b803373ffffffffffffffffffffffffffffffffffffffff16600b600083815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461093f57336040517f21b03b8d0000000000000000000000000000000000000000000000000000000081526004016109369190614287565b60405180910390fd5b816000600481111561095457610953614b05565b5b600b600083815260200190815260200160002060020160009054906101000a900460ff16600481111561098a57610989614b05565b5b146109c1576040517f48f8d3b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003600b600085815260200190815260200160002060020160006101000a81548160ff021916908360048111156109fb576109fa614b05565b5b021790555082600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f6dac2c2cd2246c509966cc98ed16a65cab4a224ed77453b2c1014a58eafa8aeb42604051610a6991906146f6565b60405180910390a3505050565b610a87610a81611f41565b82612002565b610ac6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610abd9061467a565b60405180910390fd5b610ad18383836120e0565b505050565b610af18383836040518060200160405280600081525061142d565b505050565b803373ffffffffffffffffffffffffffffffffffffffff16610b1782610dc2565b73ffffffffffffffffffffffffffffffffffffffff1614610b6f57336040517fb56aedb3000000000000000000000000000000000000000000000000000000008152600401610b669190614287565b60405180910390fd5b610b788261233c565b5050565b610b84611f41565b73ffffffffffffffffffffffffffffffffffffffff16610ba2611042565b73ffffffffffffffffffffffffffffffffffffffff1614610bf8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bef906145fa565b60405180910390fd5b8060089080519060200190610c0e929190613418565b5050565b610c1a61349e565b600b60008381526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff166004811115610c7157610c70614b05565b5b6004811115610c8357610c82614b05565b5b8152602001600382015481526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160068201604051806060016040529081600082015481526020016001820160009054906101000a900460ff1660ff1660ff1681526020016001820160019054906101000a900460ff1660ff1660ff1681525050815250509050919050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e629061455a565b60405180910390fd5b80915050919050565b60088054610e81906149ca565b80601f0160208091040260200160405190810160405280929190818152602001828054610ead906149ca565b8015610efa5780601f10610ecf57610100808354040283529160200191610efa565b820191906000526020600020905b815481529060010190602001808311610edd57829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6a9061453a565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610fc2611f41565b73ffffffffffffffffffffffffffffffffffffffff16610fe0611042565b73ffffffffffffffffffffffffffffffffffffffff1614611036576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102d906145fa565b60405180910390fd5b611040600061238f565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606002805461107a906149ca565b80601f01602080910402602001604051908101604052809291908181526020018280546110a6906149ca565b80156110f35780601f106110c8576101008083540402835291602001916110f3565b820191906000526020600020905b8154815290600101906020018083116110d657829003601f168201915b5050505050905090565b60008061110f89898989898989612453565b905080915050979650505050505050565b6000600161112e60096128a0565b611138919061481d565b905090565b611145611f41565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156111b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111aa906144ba565b60405180910390fd5b80600660006111c0611f41565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff1661126d611f41565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516112b291906143fd565b60405180910390a35050565b6112c6611f41565b73ffffffffffffffffffffffffffffffffffffffff166112e4611042565b73ffffffffffffffffffffffffffffffffffffffff161461133a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611331906145fa565b60405180910390fd5b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f68756449c91230029864f3a385c98edecfd7f9d6824b6fbff849e07500f96bd94260405161142191906146f6565b60405180910390a35050565b61143e611438611f41565b83612002565b61147d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114749061467a565b60405180910390fd5b611489848484846128ae565b50505050565b606061149a82611ed5565b6114d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d0906145ba565b60405180910390fd5b60006007600084815260200190815260200160002080546114f9906149ca565b80601f0160208091040260200160405190810160405280929190818152602001828054611525906149ca565b80156115725780601f1061154757610100808354040283529160200191611572565b820191906000526020600020905b81548152906001019060200180831161155557829003601f168201915b50505050509050600061158361290a565b90506000815114156115995781925050506115dc565b6000825111156115ce5780826040516020016115b6929190614263565b604051602081830303815290604052925050506115dc565b6115d78461299c565b925050505b919050565b6000806115f38b8b8b8b8b8b8b612453565b90506116438185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612a43565b809150509998505050505050505050565b816000600481111561166957611668614b05565b5b600b600083815260200190815260200160002060020160009054906101000a900460ff16600481111561169f5761169e614b05565b5b141580156116f55750600160048111156116bc576116bb614b05565b5b600b600083815260200190815260200160002060020160009054906101000a900460ff1660048111156116f2576116f1614b05565b5b14155b1561172c576040517f9d7505b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000821415611767576040517f8565fcfe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61177083611ed5565b6117a6576040517fc4ee946700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006117b184610c12565b905060006117be85610dc2565b90506000826020015183600001516117d691906148a4565b90506000818610156117e857856117ea565b815b90508360000151818560200151611801919061481d565b1461183b5760018460400190600481111561181f5761181e614b05565b5b9081600481111561183357611832614b05565b5b81525061186c565b60028460400190600481111561185457611853614b05565b5b9081600481111561186857611867614b05565b5b8152505b5080600b60008981526020019081526020016000206001016000828254611893919061481d565b925050819055508360400151600b600089815260200190815260200160002060020160006101000a81548160ff021916908360048111156118d7576118d6614b05565b5b0217905550600080600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636bb9945233856040518363ffffffff1660e01b815260040161193c9291906143d4565b604080518083038186803b15801561195357600080fd5b505afa158015611967573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198b9190613ba6565b915091506119cb338683866119a091906148a4565b8960a0015173ffffffffffffffffffffffffffffffffffffffff16612ab7909392919063ffffffff16565b6000811115611a0657611a053383838960a0015173ffffffffffffffffffffffffffffffffffffffff16612ab7909392919063ffffffff16565b5b856080015173ffffffffffffffffffffffffffffffffffffffff1689600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f6b70980886b3f210dff54c3f272d310c29fdf8bb69228630ecda21ac0be9fa5a33328d42604051611a90949392919061438f565b60405180910390a48173ffffffffffffffffffffffffffffffffffffffff1689600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fc408e942eca1f64c9012c5fb6383258c0137b350771f4fa85ff5e818cd5e9c6e8b8542604051611b1c93929190614711565b60405180910390a4505050505050505050565b803373ffffffffffffffffffffffffffffffffffffffff16611b5082610dc2565b73ffffffffffffffffffffffffffffffffffffffff1614611ba857336040517fb56aedb3000000000000000000000000000000000000000000000000000000008152600401611b9f9190614287565b60405180910390fd5b8160006004811115611bbd57611bbc614b05565b5b600b600083815260200190815260200160002060020160009054906101000a900460ff166004811115611bf357611bf2614b05565b5b14611c2a576040517f48f8d3b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6004600b600085815260200190815260200160002060020160006101000a81548160ff02191690836004811115611c6457611c63614b05565b5b021790555082600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fe9b9c96d65a95df345b53f3f8bbc04f69190dae380948945886692e71a1ffa7942604051611cd291906146f6565b60405180910390a3505050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611d7b611f41565b73ffffffffffffffffffffffffffffffffffffffff16611d99611042565b73ffffffffffffffffffffffffffffffffffffffff1614611def576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611de6906145fa565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611e5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e569061445a565b60405180910390fd5b611e688161238f565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611fbc83610dc2565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061200d82611ed5565b61204c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612043906144fa565b60405180910390fd5b600061205783610dc2565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806120c657508373ffffffffffffffffffffffffffffffffffffffff166120ae846106fb565b73ffffffffffffffffffffffffffffffffffffffff16145b806120d757506120d68185611cdf565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661210082610dc2565b73ffffffffffffffffffffffffffffffffffffffff1614612156576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161214d9061461a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156121c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121bd9061449a565b60405180910390fd5b6121d1838383612b40565b6121dc600082611f49565b6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461222c91906148a4565b925050819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612283919061481d565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b61234581612b45565b6000600760008381526020019081526020016000208054612365906149ca565b90501461238c5760076000828152602001908152602001600020600061238b919061351f565b5b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614806124bb5750600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16145b156124f2576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600085141561252d576040517f8565fcfe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42841015612567576040517fd3f6d9da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6125868373ffffffffffffffffffffffffffffffffffffffff16612c56565b6125bc576040517fb491a3d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6125c66009612c69565b60006125d260096128a0565b90506125de8982612c7f565b6125e661349e565b88816080019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050868160000181815250508581606001818152505060008160400190600481111561264b5761264a614b05565b5b9081600481111561265f5761265e614b05565b5b81525050848160a0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050838036038101906126ac9190613cb6565b8160c0018190525080600b6000848152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff0219169083600481111561270757612706614b05565b5b02179055506060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c0820151816006016000820151816000015560208201518160010160006101000a81548160ff021916908360ff16021790555060408201518160010160016101000a81548160ff021916908360ff16021790555050509050508873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16837f2c26753faf099ab143b808c53a33347c87ef5c63458fd8ed4e2437add36f4f0a600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633328e8842604051612888969594939291906142a2565b60405180910390a48192505050979650505050505050565b600081600001549050919050565b6128b98484846120e0565b6128c584848484612c9d565b612904576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128fb9061443a565b60405180910390fd5b50505050565b606060088054612919906149ca565b80601f0160208091040260200160405190810160405280929190818152602001828054612945906149ca565b80156129925780601f1061296757610100808354040283529160200191612992565b820191906000526020600020905b81548152906001019060200180831161297557829003601f168201915b5050505050905090565b60606129a782611ed5565b6129e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129dd9061463a565b60405180910390fd5b60006129f061290a565b90506000815111612a105760405180602001604052806000815250612a3b565b80612a1a84612e34565b604051602001612a2b929190614263565b6040516020818303038152906040525b915050919050565b612a4c82611ed5565b612a8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a829061457a565b60405180910390fd5b80600760008481526020019081526020016000209080519060200190612ab2929190613418565b505050565b612b3a846323b872dd60e01b858585604051602401612ad89392919061430c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612f95565b50505050565b505050565b6000612b5082610dc2565b9050612b5e81600084612b40565b612b69600083611f49565b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612bb991906148a4565b925050819055506003600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600080823b905060008111915050919050565b6001816000016000828254019250508190555050565b612c9982826040518060200160405280600081525061305c565b5050565b6000612cbe8473ffffffffffffffffffffffffffffffffffffffff16612c56565b15612e27578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612ce7611f41565b8786866040518563ffffffff1660e01b8152600401612d099493929190614343565b602060405180830381600087803b158015612d2357600080fd5b505af1925050508015612d5457506040513d601f19601f82011682018060405250810190612d519190613c40565b60015b612dd7573d8060008114612d84576040519150601f19603f3d011682016040523d82523d6000602084013e612d89565b606091505b50600081511415612dcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dc69061443a565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612e2c565b600190505b949350505050565b60606000821415612e7c576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612f90565b600082905060005b60008214612eae578080612e9790614a2d565b915050600a82612ea79190614873565b9150612e84565b60008167ffffffffffffffff811115612eca57612ec9614b92565b5b6040519080825280601f01601f191660200182016040528015612efc5781602001600182028036833780820191505090505b5090505b60008514612f8957600182612f1591906148a4565b9150600a85612f249190614a76565b6030612f30919061481d565b60f81b818381518110612f4657612f45614b63565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612f829190614873565b9450612f00565b8093505050505b919050565b6000612ff7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166130b79092919063ffffffff16565b905060008151111561305757808060200190518101906130179190613be6565b613056576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161304d906146ba565b60405180910390fd5b5b505050565b61306683836130cf565b6130736000848484612c9d565b6130b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130a99061443a565b60405180910390fd5b505050565b60606130c6848460008561329d565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561313f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131369061459a565b60405180910390fd5b61314881611ed5565b15613188576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161317f9061447a565b60405180910390fd5b61319460008383612b40565b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546131e4919061481d565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6060824710156132e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132d9906144da565b60405180910390fd5b6132eb85612c56565b61332a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133219061469a565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051613353919061424c565b60006040518083038185875af1925050503d8060008114613390576040519150601f19603f3d011682016040523d82523d6000602084013e613395565b606091505b50915091506133a58282866133b1565b92505050949350505050565b606083156133c157829050613411565b6000835111156133d45782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134089190614418565b60405180910390fd5b9392505050565b828054613424906149ca565b90600052602060002090601f016020900481019282613446576000855561348d565b82601f1061345f57805160ff191683800117855561348d565b8280016001018555821561348d579182015b8281111561348c578251825591602001919060010190613471565b5b50905061349a919061355f565b5090565b6040518060e001604052806000815260200160008152602001600060048111156134cb576134ca614b05565b5b815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200161351961357c565b81525090565b50805461352b906149ca565b6000825580601f1061353d575061355c565b601f01602090049060005260206000209081019061355b919061355f565b5b50565b5b80821115613578576000816000905550600101613560565b5090565b604051806060016040528060008019168152602001600060ff168152602001600060ff1681525090565b60006135b96135b48461476d565b614748565b9050828152602081018484840111156135d5576135d4614bda565b5b6135e0848285614988565b509392505050565b60006135fb6135f68461479e565b614748565b90508281526020810184848401111561361757613616614bda565b5b613622848285614988565b509392505050565b600081359050613639816151cb565b92915050565b60008151905061364e816151cb565b92915050565b600081359050613663816151e2565b92915050565b600081519050613678816151e2565b92915050565b60008135905061368d816151f9565b92915050565b6000813590506136a281615210565b92915050565b6000815190506136b781615210565b92915050565b600082601f8301126136d2576136d1614bc6565b5b81356136e28482602086016135a6565b91505092915050565b60008083601f84011261370157613700614bc6565b5b8235905067ffffffffffffffff81111561371e5761371d614bc1565b5b60208301915083600182028301111561373a57613739614bd5565b5b9250929050565b600082601f83011261375657613755614bc6565b5b81356137668482602086016135e8565b91505092915050565b60006060828403121561378557613784614bcb565b5b81905092915050565b6000606082840312156137a4576137a3614bd0565b5b6137ae6060614748565b905060006137be8482850161367e565b60008301525060206137d28482850161381c565b60208301525060406137e68482850161381c565b60408301525092915050565b60008135905061380181615227565b92915050565b60008151905061381681615227565b92915050565b60008135905061382b8161523e565b92915050565b60006020828403121561384757613846614be4565b5b60006138558482850161362a565b91505092915050565b6000806040838503121561387557613874614be4565b5b60006138838582860161362a565b92505060206138948582860161362a565b9150509250929050565b6000806000806000806000610120888a0312156138be576138bd614be4565b5b60006138cc8a828b0161362a565b97505060206138dd8a828b0161362a565b965050604088013567ffffffffffffffff8111156138fe576138fd614bdf565b5b61390a8a828b01613741565b955050606061391b8a828b016137f2565b945050608061392c8a828b016137f2565b93505060a061393d8a828b0161362a565b92505060c061394e8a828b0161376f565b91505092959891949750929550565b60008060008060008060008060006101408a8c0312156139805761397f614be4565b5b600061398e8c828d0161362a565b995050602061399f8c828d0161362a565b98505060408a013567ffffffffffffffff8111156139c0576139bf614bdf565b5b6139cc8c828d01613741565b97505060606139dd8c828d016137f2565b96505060806139ee8c828d016137f2565b95505060a06139ff8c828d0161362a565b94505060c0613a108c828d0161376f565b9350506101208a013567ffffffffffffffff811115613a3257613a31614bdf565b5b613a3e8c828d016136eb565b92509250509295985092959850929598565b600080600060608486031215613a6957613a68614be4565b5b6000613a778682870161362a565b9350506020613a888682870161362a565b9250506040613a99868287016137f2565b9150509250925092565b60008060008060808587031215613abd57613abc614be4565b5b6000613acb8782880161362a565b9450506020613adc8782880161362a565b9350506040613aed878288016137f2565b925050606085013567ffffffffffffffff811115613b0e57613b0d614bdf565b5b613b1a878288016136bd565b91505092959194509250565b60008060408385031215613b3d57613b3c614be4565b5b6000613b4b8582860161362a565b9250506020613b5c85828601613654565b9150509250929050565b60008060408385031215613b7d57613b7c614be4565b5b6000613b8b8582860161362a565b9250506020613b9c858286016137f2565b9150509250929050565b60008060408385031215613bbd57613bbc614be4565b5b6000613bcb8582860161363f565b9250506020613bdc85828601613807565b9150509250929050565b600060208284031215613bfc57613bfb614be4565b5b6000613c0a84828501613669565b91505092915050565b600060208284031215613c2957613c28614be4565b5b6000613c3784828501613693565b91505092915050565b600060208284031215613c5657613c55614be4565b5b6000613c64848285016136a8565b91505092915050565b600060208284031215613c8357613c82614be4565b5b600082013567ffffffffffffffff811115613ca157613ca0614bdf565b5b613cad84828501613741565b91505092915050565b600060608284031215613ccc57613ccb614be4565b5b6000613cda8482850161378e565b91505092915050565b600060208284031215613cf957613cf8614be4565b5b6000613d07848285016137f2565b91505092915050565b60008060408385031215613d2757613d26614be4565b5b6000613d35858286016137f2565b9250506020613d46858286016137f2565b9150509250929050565b613d59816148d8565b82525050565b613d68816148d8565b82525050565b613d77816148ea565b82525050565b613d86816148f6565b82525050565b6000613d97826147cf565b613da181856147e5565b9350613db1818560208601614997565b613dba81614be9565b840191505092915050565b6000613dd0826147cf565b613dda81856147f6565b9350613dea818560208601614997565b80840191505092915050565b613dff81614976565b82525050565b6000613e10826147da565b613e1a8185614801565b9350613e2a818560208601614997565b613e3381614be9565b840191505092915050565b6000613e49826147da565b613e538185614812565b9350613e63818560208601614997565b80840191505092915050565b6000613e7c603283614801565b9150613e8782614bfa565b604082019050919050565b6000613e9f602683614801565b9150613eaa82614c49565b604082019050919050565b6000613ec2601c83614801565b9150613ecd82614c98565b602082019050919050565b6000613ee5602483614801565b9150613ef082614cc1565b604082019050919050565b6000613f08601983614801565b9150613f1382614d10565b602082019050919050565b6000613f2b602683614801565b9150613f3682614d39565b604082019050919050565b6000613f4e602c83614801565b9150613f5982614d88565b604082019050919050565b6000613f71603883614801565b9150613f7c82614dd7565b604082019050919050565b6000613f94602a83614801565b9150613f9f82614e26565b604082019050919050565b6000613fb7602983614801565b9150613fc282614e75565b604082019050919050565b6000613fda602e83614801565b9150613fe582614ec4565b604082019050919050565b6000613ffd602083614801565b915061400882614f13565b602082019050919050565b6000614020603183614801565b915061402b82614f3c565b604082019050919050565b6000614043602c83614801565b915061404e82614f8b565b604082019050919050565b6000614066602083614801565b915061407182614fda565b602082019050919050565b6000614089602983614801565b915061409482615003565b604082019050919050565b60006140ac602f83614801565b91506140b782615052565b604082019050919050565b60006140cf602183614801565b91506140da826150a1565b604082019050919050565b60006140f2603183614801565b91506140fd826150f0565b604082019050919050565b6000614115601d83614801565b91506141208261513f565b602082019050919050565b6000614138602a83614801565b915061414382615168565b604082019050919050565b61012082016000820151614165600085018261421f565b506020820151614178602085018261421f565b50604082015161418b6040850182613df6565b50606082015161419e606085018261421f565b5060808201516141b16080850182613d50565b5060a08201516141c460a0850182613d50565b5060c08201516141d760c08501826141dd565b50505050565b6060820160008201516141f36000850182613d7d565b506020820151614206602085018261423d565b506040820151614219604085018261423d565b50505050565b6142288161495f565b82525050565b6142378161495f565b82525050565b61424681614969565b82525050565b60006142588284613dc5565b915081905092915050565b600061426f8285613e3e565b915061427b8284613e3e565b91508190509392505050565b600060208201905061429c6000830184613d5f565b92915050565b60006101c0820190506142b86000830189613d5f565b6142c56020830188613d5f565b6142d26040830187613d5f565b81810360608301526142e48186613e05565b90506142f3608083018561414e565b6143016101a083018461422e565b979650505050505050565b60006060820190506143216000830186613d5f565b61432e6020830185613d5f565b61433b604083018461422e565b949350505050565b60006080820190506143586000830187613d5f565b6143656020830186613d5f565b614372604083018561422e565b81810360608301526143848184613d8c565b905095945050505050565b60006080820190506143a46000830187613d5f565b6143b16020830186613d5f565b6143be604083018561422e565b6143cb606083018461422e565b95945050505050565b60006040820190506143e96000830185613d5f565b6143f6602083018461422e565b9392505050565b60006020820190506144126000830184613d6e565b92915050565b600060208201905081810360008301526144328184613e05565b905092915050565b6000602082019050818103600083015261445381613e6f565b9050919050565b6000602082019050818103600083015261447381613e92565b9050919050565b6000602082019050818103600083015261449381613eb5565b9050919050565b600060208201905081810360008301526144b381613ed8565b9050919050565b600060208201905081810360008301526144d381613efb565b9050919050565b600060208201905081810360008301526144f381613f1e565b9050919050565b6000602082019050818103600083015261451381613f41565b9050919050565b6000602082019050818103600083015261453381613f64565b9050919050565b6000602082019050818103600083015261455381613f87565b9050919050565b6000602082019050818103600083015261457381613faa565b9050919050565b6000602082019050818103600083015261459381613fcd565b9050919050565b600060208201905081810360008301526145b381613ff0565b9050919050565b600060208201905081810360008301526145d381614013565b9050919050565b600060208201905081810360008301526145f381614036565b9050919050565b6000602082019050818103600083015261461381614059565b9050919050565b600060208201905081810360008301526146338161407c565b9050919050565b600060208201905081810360008301526146538161409f565b9050919050565b60006020820190508181036000830152614673816140c2565b9050919050565b60006020820190508181036000830152614693816140e5565b9050919050565b600060208201905081810360008301526146b381614108565b9050919050565b600060208201905081810360008301526146d38161412b565b9050919050565b6000610120820190506146f0600083018461414e565b92915050565b600060208201905061470b600083018461422e565b92915050565b6000606082019050614726600083018661422e565b614733602083018561422e565b614740604083018461422e565b949350505050565b6000614752614763565b905061475e82826149fc565b919050565b6000604051905090565b600067ffffffffffffffff82111561478857614787614b92565b5b61479182614be9565b9050602081019050919050565b600067ffffffffffffffff8211156147b9576147b8614b92565b5b6147c282614be9565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006148288261495f565b91506148338361495f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561486857614867614aa7565b5b828201905092915050565b600061487e8261495f565b91506148898361495f565b92508261489957614898614ad6565b5b828204905092915050565b60006148af8261495f565b91506148ba8361495f565b9250828210156148cd576148cc614aa7565b5b828203905092915050565b60006148e38261493f565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600081905061493a826151b7565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006149818261492c565b9050919050565b82818337600083830152505050565b60005b838110156149b557808201518184015260208101905061499a565b838111156149c4576000848401525b50505050565b600060028204905060018216806149e257607f821691505b602082108114156149f6576149f5614b34565b5b50919050565b614a0582614be9565b810181811067ffffffffffffffff82111715614a2457614a23614b92565b5b80604052505050565b6000614a388261495f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614a6b57614a6a614aa7565b5b600182019050919050565b6000614a818261495f565b9150614a8c8361495f565b925082614a9c57614a9b614ad6565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600581106151c8576151c7614b05565b5b50565b6151d4816148d8565b81146151df57600080fd5b50565b6151eb816148ea565b81146151f657600080fd5b50565b615202816148f6565b811461520d57600080fd5b50565b61521981614900565b811461522457600080fd5b50565b6152308161495f565b811461523b57600080fd5b50565b61524781614969565b811461525257600080fd5b5056fea26469706673582212202c26b582473a7e4bd97cce3ef314874ec96dd6f6675ba0865d14124fc18f60cc64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c8063715018a6116100f9578063b88d4fde11610097578063c99c444811610071578063c99c444814610503578063e8042ce51461051f578063e985e9c51461053b578063f2fde38b1461056b576101c4565b8063b88d4fde14610487578063c87b56dd146104a3578063c92aeec1146104d3576101c4565b8063987b22be116100d3578063987b22be14610401578063a0021cf114610431578063a22cb4651461044f578063af9486bd1461046b576101c4565b8063715018a6146103bb5780638da5cb5b146103c557806395d89b41146103e3576101c4565b806342966c68116101665780635e39986f116101405780635e39986f1461031f5780636352211e1461033d5780636c0360eb1461036d57806370a082311461038b576101c4565b806342966c68146102b757806355f804b3146102d35780635aef2447146102ef576101c4565b8063095ea7b3116101a2578063095ea7b314610247578063203411011461026357806323b872dd1461027f57806342842e0e1461029b576101c4565b806301ffc9a7146101c957806306fdde03146101f9578063081812fc14610217575b600080fd5b6101e360048036038101906101de9190613c13565b610587565b6040516101f091906143fd565b60405180910390f35b610201610669565b60405161020e9190614418565b60405180910390f35b610231600480360381019061022c9190613ce3565b6106fb565b60405161023e9190614287565b60405180910390f35b610261600480360381019061025c9190613b66565b610780565b005b61027d60048036038101906102789190613ce3565b610898565b005b61029960048036038101906102949190613a50565b610a76565b005b6102b560048036038101906102b09190613a50565b610ad6565b005b6102d160048036038101906102cc9190613ce3565b610af6565b005b6102ed60048036038101906102e89190613c6d565b610b7c565b005b61030960048036038101906103049190613ce3565b610c12565b60405161031691906146da565b60405180910390f35b610327610d9c565b6040516103349190614287565b60405180910390f35b61035760048036038101906103529190613ce3565b610dc2565b6040516103649190614287565b60405180910390f35b610375610e74565b6040516103829190614418565b60405180910390f35b6103a560048036038101906103a09190613831565b610f02565b6040516103b291906146f6565b60405180910390f35b6103c3610fba565b005b6103cd611042565b6040516103da9190614287565b60405180910390f35b6103eb61106b565b6040516103f89190614418565b60405180910390f35b61041b6004803603810190610416919061389e565b6110fd565b60405161042891906146f6565b60405180910390f35b610439611120565b60405161044691906146f6565b60405180910390f35b61046960048036038101906104649190613b26565b61113d565b005b61048560048036038101906104809190613831565b6112be565b005b6104a1600480360381019061049c9190613aa3565b61142d565b005b6104bd60048036038101906104b89190613ce3565b61148f565b6040516104ca9190614418565b60405180910390f35b6104ed60048036038101906104e8919061395d565b6115e1565b6040516104fa91906146f6565b60405180910390f35b61051d60048036038101906105189190613d10565b611654565b005b61053960048036038101906105349190613ce3565b611b2f565b005b6105556004803603810190610550919061385e565b611cdf565b60405161056291906143fd565b60405180910390f35b61058560048036038101906105809190613831565b611d73565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061065257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610662575061066182611e6b565b5b9050919050565b606060018054610678906149ca565b80601f01602080910402602001604051908101604052809291908181526020018280546106a4906149ca565b80156106f15780601f106106c6576101008083540402835291602001916106f1565b820191906000526020600020905b8154815290600101906020018083116106d457829003601f168201915b5050505050905090565b600061070682611ed5565b610745576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073c906145da565b60405180910390fd5b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061078b82610dc2565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f39061465a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661081b611f41565b73ffffffffffffffffffffffffffffffffffffffff16148061084a575061084981610844611f41565b611cdf565b5b610889576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108809061451a565b60405180910390fd5b6108938383611f49565b505050565b803373ffffffffffffffffffffffffffffffffffffffff16600b600083815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461093f57336040517f21b03b8d0000000000000000000000000000000000000000000000000000000081526004016109369190614287565b60405180910390fd5b816000600481111561095457610953614b05565b5b600b600083815260200190815260200160002060020160009054906101000a900460ff16600481111561098a57610989614b05565b5b146109c1576040517f48f8d3b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003600b600085815260200190815260200160002060020160006101000a81548160ff021916908360048111156109fb576109fa614b05565b5b021790555082600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f6dac2c2cd2246c509966cc98ed16a65cab4a224ed77453b2c1014a58eafa8aeb42604051610a6991906146f6565b60405180910390a3505050565b610a87610a81611f41565b82612002565b610ac6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610abd9061467a565b60405180910390fd5b610ad18383836120e0565b505050565b610af18383836040518060200160405280600081525061142d565b505050565b803373ffffffffffffffffffffffffffffffffffffffff16610b1782610dc2565b73ffffffffffffffffffffffffffffffffffffffff1614610b6f57336040517fb56aedb3000000000000000000000000000000000000000000000000000000008152600401610b669190614287565b60405180910390fd5b610b788261233c565b5050565b610b84611f41565b73ffffffffffffffffffffffffffffffffffffffff16610ba2611042565b73ffffffffffffffffffffffffffffffffffffffff1614610bf8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bef906145fa565b60405180910390fd5b8060089080519060200190610c0e929190613418565b5050565b610c1a61349e565b600b60008381526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff166004811115610c7157610c70614b05565b5b6004811115610c8357610c82614b05565b5b8152602001600382015481526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160068201604051806060016040529081600082015481526020016001820160009054906101000a900460ff1660ff1660ff1681526020016001820160019054906101000a900460ff1660ff1660ff1681525050815250509050919050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e629061455a565b60405180910390fd5b80915050919050565b60088054610e81906149ca565b80601f0160208091040260200160405190810160405280929190818152602001828054610ead906149ca565b8015610efa5780601f10610ecf57610100808354040283529160200191610efa565b820191906000526020600020905b815481529060010190602001808311610edd57829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6a9061453a565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610fc2611f41565b73ffffffffffffffffffffffffffffffffffffffff16610fe0611042565b73ffffffffffffffffffffffffffffffffffffffff1614611036576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102d906145fa565b60405180910390fd5b611040600061238f565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606002805461107a906149ca565b80601f01602080910402602001604051908101604052809291908181526020018280546110a6906149ca565b80156110f35780601f106110c8576101008083540402835291602001916110f3565b820191906000526020600020905b8154815290600101906020018083116110d657829003601f168201915b5050505050905090565b60008061110f89898989898989612453565b905080915050979650505050505050565b6000600161112e60096128a0565b611138919061481d565b905090565b611145611f41565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156111b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111aa906144ba565b60405180910390fd5b80600660006111c0611f41565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff1661126d611f41565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516112b291906143fd565b60405180910390a35050565b6112c6611f41565b73ffffffffffffffffffffffffffffffffffffffff166112e4611042565b73ffffffffffffffffffffffffffffffffffffffff161461133a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611331906145fa565b60405180910390fd5b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f68756449c91230029864f3a385c98edecfd7f9d6824b6fbff849e07500f96bd94260405161142191906146f6565b60405180910390a35050565b61143e611438611f41565b83612002565b61147d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114749061467a565b60405180910390fd5b611489848484846128ae565b50505050565b606061149a82611ed5565b6114d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d0906145ba565b60405180910390fd5b60006007600084815260200190815260200160002080546114f9906149ca565b80601f0160208091040260200160405190810160405280929190818152602001828054611525906149ca565b80156115725780601f1061154757610100808354040283529160200191611572565b820191906000526020600020905b81548152906001019060200180831161155557829003601f168201915b50505050509050600061158361290a565b90506000815114156115995781925050506115dc565b6000825111156115ce5780826040516020016115b6929190614263565b604051602081830303815290604052925050506115dc565b6115d78461299c565b925050505b919050565b6000806115f38b8b8b8b8b8b8b612453565b90506116438185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612a43565b809150509998505050505050505050565b816000600481111561166957611668614b05565b5b600b600083815260200190815260200160002060020160009054906101000a900460ff16600481111561169f5761169e614b05565b5b141580156116f55750600160048111156116bc576116bb614b05565b5b600b600083815260200190815260200160002060020160009054906101000a900460ff1660048111156116f2576116f1614b05565b5b14155b1561172c576040517f9d7505b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000821415611767576040517f8565fcfe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61177083611ed5565b6117a6576040517fc4ee946700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006117b184610c12565b905060006117be85610dc2565b90506000826020015183600001516117d691906148a4565b90506000818610156117e857856117ea565b815b90508360000151818560200151611801919061481d565b1461183b5760018460400190600481111561181f5761181e614b05565b5b9081600481111561183357611832614b05565b5b81525061186c565b60028460400190600481111561185457611853614b05565b5b9081600481111561186857611867614b05565b5b8152505b5080600b60008981526020019081526020016000206001016000828254611893919061481d565b925050819055508360400151600b600089815260200190815260200160002060020160006101000a81548160ff021916908360048111156118d7576118d6614b05565b5b0217905550600080600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636bb9945233856040518363ffffffff1660e01b815260040161193c9291906143d4565b604080518083038186803b15801561195357600080fd5b505afa158015611967573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198b9190613ba6565b915091506119cb338683866119a091906148a4565b8960a0015173ffffffffffffffffffffffffffffffffffffffff16612ab7909392919063ffffffff16565b6000811115611a0657611a053383838960a0015173ffffffffffffffffffffffffffffffffffffffff16612ab7909392919063ffffffff16565b5b856080015173ffffffffffffffffffffffffffffffffffffffff1689600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f6b70980886b3f210dff54c3f272d310c29fdf8bb69228630ecda21ac0be9fa5a33328d42604051611a90949392919061438f565b60405180910390a48173ffffffffffffffffffffffffffffffffffffffff1689600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fc408e942eca1f64c9012c5fb6383258c0137b350771f4fa85ff5e818cd5e9c6e8b8542604051611b1c93929190614711565b60405180910390a4505050505050505050565b803373ffffffffffffffffffffffffffffffffffffffff16611b5082610dc2565b73ffffffffffffffffffffffffffffffffffffffff1614611ba857336040517fb56aedb3000000000000000000000000000000000000000000000000000000008152600401611b9f9190614287565b60405180910390fd5b8160006004811115611bbd57611bbc614b05565b5b600b600083815260200190815260200160002060020160009054906101000a900460ff166004811115611bf357611bf2614b05565b5b14611c2a576040517f48f8d3b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6004600b600085815260200190815260200160002060020160006101000a81548160ff02191690836004811115611c6457611c63614b05565b5b021790555082600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fe9b9c96d65a95df345b53f3f8bbc04f69190dae380948945886692e71a1ffa7942604051611cd291906146f6565b60405180910390a3505050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611d7b611f41565b73ffffffffffffffffffffffffffffffffffffffff16611d99611042565b73ffffffffffffffffffffffffffffffffffffffff1614611def576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611de6906145fa565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611e5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e569061445a565b60405180910390fd5b611e688161238f565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611fbc83610dc2565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061200d82611ed5565b61204c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612043906144fa565b60405180910390fd5b600061205783610dc2565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806120c657508373ffffffffffffffffffffffffffffffffffffffff166120ae846106fb565b73ffffffffffffffffffffffffffffffffffffffff16145b806120d757506120d68185611cdf565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661210082610dc2565b73ffffffffffffffffffffffffffffffffffffffff1614612156576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161214d9061461a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156121c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121bd9061449a565b60405180910390fd5b6121d1838383612b40565b6121dc600082611f49565b6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461222c91906148a4565b925050819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612283919061481d565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b61234581612b45565b6000600760008381526020019081526020016000208054612365906149ca565b90501461238c5760076000828152602001908152602001600020600061238b919061351f565b5b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614806124bb5750600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16145b156124f2576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600085141561252d576040517f8565fcfe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42841015612567576040517fd3f6d9da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6125868373ffffffffffffffffffffffffffffffffffffffff16612c56565b6125bc576040517fb491a3d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6125c66009612c69565b60006125d260096128a0565b90506125de8982612c7f565b6125e661349e565b88816080019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050868160000181815250508581606001818152505060008160400190600481111561264b5761264a614b05565b5b9081600481111561265f5761265e614b05565b5b81525050848160a0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050838036038101906126ac9190613cb6565b8160c0018190525080600b6000848152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff0219169083600481111561270757612706614b05565b5b02179055506060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c0820151816006016000820151816000015560208201518160010160006101000a81548160ff021916908360ff16021790555060408201518160010160016101000a81548160ff021916908360ff16021790555050509050508873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16837f2c26753faf099ab143b808c53a33347c87ef5c63458fd8ed4e2437add36f4f0a600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633328e8842604051612888969594939291906142a2565b60405180910390a48192505050979650505050505050565b600081600001549050919050565b6128b98484846120e0565b6128c584848484612c9d565b612904576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128fb9061443a565b60405180910390fd5b50505050565b606060088054612919906149ca565b80601f0160208091040260200160405190810160405280929190818152602001828054612945906149ca565b80156129925780601f1061296757610100808354040283529160200191612992565b820191906000526020600020905b81548152906001019060200180831161297557829003601f168201915b5050505050905090565b60606129a782611ed5565b6129e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129dd9061463a565b60405180910390fd5b60006129f061290a565b90506000815111612a105760405180602001604052806000815250612a3b565b80612a1a84612e34565b604051602001612a2b929190614263565b6040516020818303038152906040525b915050919050565b612a4c82611ed5565b612a8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a829061457a565b60405180910390fd5b80600760008481526020019081526020016000209080519060200190612ab2929190613418565b505050565b612b3a846323b872dd60e01b858585604051602401612ad89392919061430c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612f95565b50505050565b505050565b6000612b5082610dc2565b9050612b5e81600084612b40565b612b69600083611f49565b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612bb991906148a4565b925050819055506003600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600080823b905060008111915050919050565b6001816000016000828254019250508190555050565b612c9982826040518060200160405280600081525061305c565b5050565b6000612cbe8473ffffffffffffffffffffffffffffffffffffffff16612c56565b15612e27578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612ce7611f41565b8786866040518563ffffffff1660e01b8152600401612d099493929190614343565b602060405180830381600087803b158015612d2357600080fd5b505af1925050508015612d5457506040513d601f19601f82011682018060405250810190612d519190613c40565b60015b612dd7573d8060008114612d84576040519150601f19603f3d011682016040523d82523d6000602084013e612d89565b606091505b50600081511415612dcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dc69061443a565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612e2c565b600190505b949350505050565b60606000821415612e7c576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612f90565b600082905060005b60008214612eae578080612e9790614a2d565b915050600a82612ea79190614873565b9150612e84565b60008167ffffffffffffffff811115612eca57612ec9614b92565b5b6040519080825280601f01601f191660200182016040528015612efc5781602001600182028036833780820191505090505b5090505b60008514612f8957600182612f1591906148a4565b9150600a85612f249190614a76565b6030612f30919061481d565b60f81b818381518110612f4657612f45614b63565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612f829190614873565b9450612f00565b8093505050505b919050565b6000612ff7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166130b79092919063ffffffff16565b905060008151111561305757808060200190518101906130179190613be6565b613056576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161304d906146ba565b60405180910390fd5b5b505050565b61306683836130cf565b6130736000848484612c9d565b6130b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130a99061443a565b60405180910390fd5b505050565b60606130c6848460008561329d565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561313f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131369061459a565b60405180910390fd5b61314881611ed5565b15613188576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161317f9061447a565b60405180910390fd5b61319460008383612b40565b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546131e4919061481d565b92505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6060824710156132e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132d9906144da565b60405180910390fd5b6132eb85612c56565b61332a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133219061469a565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051613353919061424c565b60006040518083038185875af1925050503d8060008114613390576040519150601f19603f3d011682016040523d82523d6000602084013e613395565b606091505b50915091506133a58282866133b1565b92505050949350505050565b606083156133c157829050613411565b6000835111156133d45782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134089190614418565b60405180910390fd5b9392505050565b828054613424906149ca565b90600052602060002090601f016020900481019282613446576000855561348d565b82601f1061345f57805160ff191683800117855561348d565b8280016001018555821561348d579182015b8281111561348c578251825591602001919060010190613471565b5b50905061349a919061355f565b5090565b6040518060e001604052806000815260200160008152602001600060048111156134cb576134ca614b05565b5b815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200161351961357c565b81525090565b50805461352b906149ca565b6000825580601f1061353d575061355c565b601f01602090049060005260206000209081019061355b919061355f565b5b50565b5b80821115613578576000816000905550600101613560565b5090565b604051806060016040528060008019168152602001600060ff168152602001600060ff1681525090565b60006135b96135b48461476d565b614748565b9050828152602081018484840111156135d5576135d4614bda565b5b6135e0848285614988565b509392505050565b60006135fb6135f68461479e565b614748565b90508281526020810184848401111561361757613616614bda565b5b613622848285614988565b509392505050565b600081359050613639816151cb565b92915050565b60008151905061364e816151cb565b92915050565b600081359050613663816151e2565b92915050565b600081519050613678816151e2565b92915050565b60008135905061368d816151f9565b92915050565b6000813590506136a281615210565b92915050565b6000815190506136b781615210565b92915050565b600082601f8301126136d2576136d1614bc6565b5b81356136e28482602086016135a6565b91505092915050565b60008083601f84011261370157613700614bc6565b5b8235905067ffffffffffffffff81111561371e5761371d614bc1565b5b60208301915083600182028301111561373a57613739614bd5565b5b9250929050565b600082601f83011261375657613755614bc6565b5b81356137668482602086016135e8565b91505092915050565b60006060828403121561378557613784614bcb565b5b81905092915050565b6000606082840312156137a4576137a3614bd0565b5b6137ae6060614748565b905060006137be8482850161367e565b60008301525060206137d28482850161381c565b60208301525060406137e68482850161381c565b60408301525092915050565b60008135905061380181615227565b92915050565b60008151905061381681615227565b92915050565b60008135905061382b8161523e565b92915050565b60006020828403121561384757613846614be4565b5b60006138558482850161362a565b91505092915050565b6000806040838503121561387557613874614be4565b5b60006138838582860161362a565b92505060206138948582860161362a565b9150509250929050565b6000806000806000806000610120888a0312156138be576138bd614be4565b5b60006138cc8a828b0161362a565b97505060206138dd8a828b0161362a565b965050604088013567ffffffffffffffff8111156138fe576138fd614bdf565b5b61390a8a828b01613741565b955050606061391b8a828b016137f2565b945050608061392c8a828b016137f2565b93505060a061393d8a828b0161362a565b92505060c061394e8a828b0161376f565b91505092959891949750929550565b60008060008060008060008060006101408a8c0312156139805761397f614be4565b5b600061398e8c828d0161362a565b995050602061399f8c828d0161362a565b98505060408a013567ffffffffffffffff8111156139c0576139bf614bdf565b5b6139cc8c828d01613741565b97505060606139dd8c828d016137f2565b96505060806139ee8c828d016137f2565b95505060a06139ff8c828d0161362a565b94505060c0613a108c828d0161376f565b9350506101208a013567ffffffffffffffff811115613a3257613a31614bdf565b5b613a3e8c828d016136eb565b92509250509295985092959850929598565b600080600060608486031215613a6957613a68614be4565b5b6000613a778682870161362a565b9350506020613a888682870161362a565b9250506040613a99868287016137f2565b9150509250925092565b60008060008060808587031215613abd57613abc614be4565b5b6000613acb8782880161362a565b9450506020613adc8782880161362a565b9350506040613aed878288016137f2565b925050606085013567ffffffffffffffff811115613b0e57613b0d614bdf565b5b613b1a878288016136bd565b91505092959194509250565b60008060408385031215613b3d57613b3c614be4565b5b6000613b4b8582860161362a565b9250506020613b5c85828601613654565b9150509250929050565b60008060408385031215613b7d57613b7c614be4565b5b6000613b8b8582860161362a565b9250506020613b9c858286016137f2565b9150509250929050565b60008060408385031215613bbd57613bbc614be4565b5b6000613bcb8582860161363f565b9250506020613bdc85828601613807565b9150509250929050565b600060208284031215613bfc57613bfb614be4565b5b6000613c0a84828501613669565b91505092915050565b600060208284031215613c2957613c28614be4565b5b6000613c3784828501613693565b91505092915050565b600060208284031215613c5657613c55614be4565b5b6000613c64848285016136a8565b91505092915050565b600060208284031215613c8357613c82614be4565b5b600082013567ffffffffffffffff811115613ca157613ca0614bdf565b5b613cad84828501613741565b91505092915050565b600060608284031215613ccc57613ccb614be4565b5b6000613cda8482850161378e565b91505092915050565b600060208284031215613cf957613cf8614be4565b5b6000613d07848285016137f2565b91505092915050565b60008060408385031215613d2757613d26614be4565b5b6000613d35858286016137f2565b9250506020613d46858286016137f2565b9150509250929050565b613d59816148d8565b82525050565b613d68816148d8565b82525050565b613d77816148ea565b82525050565b613d86816148f6565b82525050565b6000613d97826147cf565b613da181856147e5565b9350613db1818560208601614997565b613dba81614be9565b840191505092915050565b6000613dd0826147cf565b613dda81856147f6565b9350613dea818560208601614997565b80840191505092915050565b613dff81614976565b82525050565b6000613e10826147da565b613e1a8185614801565b9350613e2a818560208601614997565b613e3381614be9565b840191505092915050565b6000613e49826147da565b613e538185614812565b9350613e63818560208601614997565b80840191505092915050565b6000613e7c603283614801565b9150613e8782614bfa565b604082019050919050565b6000613e9f602683614801565b9150613eaa82614c49565b604082019050919050565b6000613ec2601c83614801565b9150613ecd82614c98565b602082019050919050565b6000613ee5602483614801565b9150613ef082614cc1565b604082019050919050565b6000613f08601983614801565b9150613f1382614d10565b602082019050919050565b6000613f2b602683614801565b9150613f3682614d39565b604082019050919050565b6000613f4e602c83614801565b9150613f5982614d88565b604082019050919050565b6000613f71603883614801565b9150613f7c82614dd7565b604082019050919050565b6000613f94602a83614801565b9150613f9f82614e26565b604082019050919050565b6000613fb7602983614801565b9150613fc282614e75565b604082019050919050565b6000613fda602e83614801565b9150613fe582614ec4565b604082019050919050565b6000613ffd602083614801565b915061400882614f13565b602082019050919050565b6000614020603183614801565b915061402b82614f3c565b604082019050919050565b6000614043602c83614801565b915061404e82614f8b565b604082019050919050565b6000614066602083614801565b915061407182614fda565b602082019050919050565b6000614089602983614801565b915061409482615003565b604082019050919050565b60006140ac602f83614801565b91506140b782615052565b604082019050919050565b60006140cf602183614801565b91506140da826150a1565b604082019050919050565b60006140f2603183614801565b91506140fd826150f0565b604082019050919050565b6000614115601d83614801565b91506141208261513f565b602082019050919050565b6000614138602a83614801565b915061414382615168565b604082019050919050565b61012082016000820151614165600085018261421f565b506020820151614178602085018261421f565b50604082015161418b6040850182613df6565b50606082015161419e606085018261421f565b5060808201516141b16080850182613d50565b5060a08201516141c460a0850182613d50565b5060c08201516141d760c08501826141dd565b50505050565b6060820160008201516141f36000850182613d7d565b506020820151614206602085018261423d565b506040820151614219604085018261423d565b50505050565b6142288161495f565b82525050565b6142378161495f565b82525050565b61424681614969565b82525050565b60006142588284613dc5565b915081905092915050565b600061426f8285613e3e565b915061427b8284613e3e565b91508190509392505050565b600060208201905061429c6000830184613d5f565b92915050565b60006101c0820190506142b86000830189613d5f565b6142c56020830188613d5f565b6142d26040830187613d5f565b81810360608301526142e48186613e05565b90506142f3608083018561414e565b6143016101a083018461422e565b979650505050505050565b60006060820190506143216000830186613d5f565b61432e6020830185613d5f565b61433b604083018461422e565b949350505050565b60006080820190506143586000830187613d5f565b6143656020830186613d5f565b614372604083018561422e565b81810360608301526143848184613d8c565b905095945050505050565b60006080820190506143a46000830187613d5f565b6143b16020830186613d5f565b6143be604083018561422e565b6143cb606083018461422e565b95945050505050565b60006040820190506143e96000830185613d5f565b6143f6602083018461422e565b9392505050565b60006020820190506144126000830184613d6e565b92915050565b600060208201905081810360008301526144328184613e05565b905092915050565b6000602082019050818103600083015261445381613e6f565b9050919050565b6000602082019050818103600083015261447381613e92565b9050919050565b6000602082019050818103600083015261449381613eb5565b9050919050565b600060208201905081810360008301526144b381613ed8565b9050919050565b600060208201905081810360008301526144d381613efb565b9050919050565b600060208201905081810360008301526144f381613f1e565b9050919050565b6000602082019050818103600083015261451381613f41565b9050919050565b6000602082019050818103600083015261453381613f64565b9050919050565b6000602082019050818103600083015261455381613f87565b9050919050565b6000602082019050818103600083015261457381613faa565b9050919050565b6000602082019050818103600083015261459381613fcd565b9050919050565b600060208201905081810360008301526145b381613ff0565b9050919050565b600060208201905081810360008301526145d381614013565b9050919050565b600060208201905081810360008301526145f381614036565b9050919050565b6000602082019050818103600083015261461381614059565b9050919050565b600060208201905081810360008301526146338161407c565b9050919050565b600060208201905081810360008301526146538161409f565b9050919050565b60006020820190508181036000830152614673816140c2565b9050919050565b60006020820190508181036000830152614693816140e5565b9050919050565b600060208201905081810360008301526146b381614108565b9050919050565b600060208201905081810360008301526146d38161412b565b9050919050565b6000610120820190506146f0600083018461414e565b92915050565b600060208201905061470b600083018461422e565b92915050565b6000606082019050614726600083018661422e565b614733602083018561422e565b614740604083018461422e565b949350505050565b6000614752614763565b905061475e82826149fc565b919050565b6000604051905090565b600067ffffffffffffffff82111561478857614787614b92565b5b61479182614be9565b9050602081019050919050565b600067ffffffffffffffff8211156147b9576147b8614b92565b5b6147c282614be9565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006148288261495f565b91506148338361495f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561486857614867614aa7565b5b828201905092915050565b600061487e8261495f565b91506148898361495f565b92508261489957614898614ad6565b5b828204905092915050565b60006148af8261495f565b91506148ba8361495f565b9250828210156148cd576148cc614aa7565b5b828203905092915050565b60006148e38261493f565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600081905061493a826151b7565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006149818261492c565b9050919050565b82818337600083830152505050565b60005b838110156149b557808201518184015260208101905061499a565b838111156149c4576000848401525b50505050565b600060028204905060018216806149e257607f821691505b602082108114156149f6576149f5614b34565b5b50919050565b614a0582614be9565b810181811067ffffffffffffffff82111715614a2457614a23614b92565b5b80604052505050565b6000614a388261495f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614a6b57614a6a614aa7565b5b600182019050919050565b6000614a818261495f565b9150614a8c8361495f565b925082614a9c57614a9b614ad6565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600581106151c8576151c7614b05565b5b50565b6151d4816148d8565b81146151df57600080fd5b50565b6151eb816148ea565b81146151f657600080fd5b50565b615202816148f6565b811461520d57600080fd5b50565b61521981614900565b811461522457600080fd5b50565b6152308161495f565b811461523b57600080fd5b50565b61524781614969565b811461525257600080fd5b5056fea26469706673582212202c26b582473a7e4bd97cce3ef314874ec96dd6f6675ba0865d14124fc18f60cc64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1635,
        "contract": "contracts/BullaClaimERC721.sol:BullaClaimERC721",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2802,
        "contract": "contracts/BullaClaimERC721.sol:BullaClaimERC721",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2804,
        "contract": "contracts/BullaClaimERC721.sol:BullaClaimERC721",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2808,
        "contract": "contracts/BullaClaimERC721.sol:BullaClaimERC721",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2812,
        "contract": "contracts/BullaClaimERC721.sol:BullaClaimERC721",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2816,
        "contract": "contracts/BullaClaimERC721.sol:BullaClaimERC721",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2822,
        "contract": "contracts/BullaClaimERC721.sol:BullaClaimERC721",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3741,
        "contract": "contracts/BullaClaimERC721.sol:BullaClaimERC721",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 5312,
        "contract": "contracts/BullaClaimERC721.sol:BullaClaimERC721",
        "label": "baseURI",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 5352,
        "contract": "contracts/BullaClaimERC721.sol:BullaClaimERC721",
        "label": "tokenIds",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(Counter)4206_storage"
      },
      {
        "astId": 5355,
        "contract": "contracts/BullaClaimERC721.sol:BullaClaimERC721",
        "label": "bullaManager",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 5360,
        "contract": "contracts/BullaClaimERC721.sol:BullaClaimERC721",
        "label": "claimTokens",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(Claim)7426_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(Status)7409": {
        "encoding": "inplace",
        "label": "enum Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Claim)7426_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Claim)",
        "numberOfBytes": "32",
        "value": "t_struct(Claim)7426_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Claim)7426_storage": {
        "encoding": "inplace",
        "label": "struct Claim",
        "members": [
          {
            "astId": 7411,
            "contract": "contracts/BullaClaimERC721.sol:BullaClaimERC721",
            "label": "claimAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7413,
            "contract": "contracts/BullaClaimERC721.sol:BullaClaimERC721",
            "label": "paidAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7416,
            "contract": "contracts/BullaClaimERC721.sol:BullaClaimERC721",
            "label": "status",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(Status)7409"
          },
          {
            "astId": 7418,
            "contract": "contracts/BullaClaimERC721.sol:BullaClaimERC721",
            "label": "dueBy",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7420,
            "contract": "contracts/BullaClaimERC721.sol:BullaClaimERC721",
            "label": "debtor",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 7422,
            "contract": "contracts/BullaClaimERC721.sol:BullaClaimERC721",
            "label": "claimToken",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 7425,
            "contract": "contracts/BullaClaimERC721.sol:BullaClaimERC721",
            "label": "attachment",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(Multihash)7403_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Counter)4206_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 4205,
            "contract": "contracts/BullaClaimERC721.sol:BullaClaimERC721",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Multihash)7403_storage": {
        "encoding": "inplace",
        "label": "struct Multihash",
        "members": [
          {
            "astId": 7398,
            "contract": "contracts/BullaClaimERC721.sol:BullaClaimERC721",
            "label": "hash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 7400,
            "contract": "contracts/BullaClaimERC721.sol:BullaClaimERC721",
            "label": "hashFunction",
            "offset": 0,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 7402,
            "contract": "contracts/BullaClaimERC721.sol:BullaClaimERC721",
            "label": "size",
            "offset": 1,
            "slot": "1",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}