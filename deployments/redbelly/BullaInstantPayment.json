{
  "address": "0xce704a7Fae206ad009852258dDD8574B844eDa3b",
  "abi": [
    {
      "inputs": [],
      "name": "ValueMustNoBeZero",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tag",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "ipfsHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blocktime",
          "type": "uint256"
        }
      ],
      "name": "InstantPayment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "txAndLogIndexHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "updatedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tag",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blocktime",
          "type": "uint256"
        }
      ],
      "name": "InstantPaymentTagUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "calls",
          "type": "bytes[]"
        },
        {
          "internalType": "bool",
          "name": "revertOnFail",
          "type": "bool"
        }
      ],
      "name": "batch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tag",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ipfsHash",
          "type": "string"
        }
      ],
      "name": "instantPayment",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "txAndLogIndexHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "newTag",
          "type": "string"
        }
      ],
      "name": "updateBullaTag",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x856472840eca9c8eb1839b7d2c060ff573c6b971422c9716aec13614b1aec7ee",
  "receipt": {
    "to": null,
    "from": "0x81f1e947811496453dBBaeA0AC2c250e056BBd96",
    "contractAddress": "0xce704a7Fae206ad009852258dDD8574B844eDa3b",
    "transactionIndex": 0,
    "gasUsed": "1585731",
    "logsBloom": "0x
    "blockHash": "0x736f6a8a70b4bec2224567fd8ec92d9baf6e2928c5a80006ba68f27224b2380b",
    "transactionHash": "0x856472840eca9c8eb1839b7d2c060ff573c6b971422c9716aec13614b1aec7ee",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2488926,
        "transactionHash": "0x856472840eca9c8eb1839b7d2c060ff573c6b971422c9716aec13614b1aec7ee",
        "address": "0xce704a7Fae206ad009852258dDD8574B844eDa3b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000081f1e947811496453dbbaea0ac2c250e056bbd96"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x736f6a8a70b4bec2224567fd8ec92d9baf6e2928c5a80006ba68f27224b2380b"
      }
    ],
    "blockNumber": 2488926,
    "cumulativeGasUsed": "1585731",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b8545aea175c6ca7dd158e613a2ab35e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ValueMustNoBeZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"InstantPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txAndLogIndexHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"InstantPaymentTagUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"calls\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"revertOnFail\",\"type\":\"bool\"}],\"name\":\"batch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"}],\"name\":\"instantPayment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txAndLogIndexHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"newTag\",\"type\":\"string\"}],\"name\":\"updateBullaTag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"batch(bytes[],bool)\":{\"params\":{\"calls\":\"An array of inputs for each call.\",\"revertOnFail\":\"If True then reverts after a failed call and stops doing further calls.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batch(bytes[],bool)\":{\"notice\":\"Allows batched call to self (this contract).\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BullaInstantPayment.sol\":\"BullaInstantPayment\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/BullaInstantPayment.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\r\\nimport '@openzeppelin/contracts/security/Pausable.sol';\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\nimport './libraries/BoringBatchable.sol';\\r\\n\\r\\nerror ValueMustNoBeZero();\\r\\nerror NotContractOwner(address _sender);\\r\\n\\r\\ncontract BullaInstantPayment is BoringBatchable, Pausable, Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    event InstantPaymentTagUpdated(bytes32 indexed txAndLogIndexHash, address indexed updatedBy, string tag, uint256 blocktime);\\r\\n\\r\\n    event InstantPayment(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 amount,\\r\\n        address indexed tokenAddress,\\r\\n        string description,\\r\\n        string tag,\\r\\n        string ipfsHash,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n\\r\\n    function pause() public whenNotPaused onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() public whenPaused onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    function instantPayment(\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        address tokenAddress,\\r\\n        string memory description,\\r\\n        string memory tag,\\r\\n        string memory ipfsHash\\r\\n    ) public payable whenNotPaused {\\r\\n        if (amount == 0) {\\r\\n            revert ValueMustNoBeZero();\\r\\n        }\\r\\n\\r\\n        if (tokenAddress == address(0)) {\\r\\n            (bool success, ) = to.call{ value: amount }('');\\r\\n            require(success, 'Failed to transfer native tokens');\\r\\n        } else {\\r\\n            IERC20(tokenAddress).safeTransferFrom(msg.sender, to, amount);\\r\\n        }\\r\\n\\r\\n        emit InstantPayment(msg.sender, to, amount, tokenAddress, description, tag, ipfsHash, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function updateBullaTag(bytes32 txAndLogIndexHash, string memory newTag) public {\\r\\n        emit InstantPaymentTagUpdated(txAndLogIndexHash, msg.sender, newTag, block.timestamp);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x847c2422f48b005a60ea18d69ea1f2146100c83f15d320c8cf50c5df3967f82b\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/BoringBatchable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7; // @audit : bump version from 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\r\\n// WARNING!!!\\r\\n// Combining BoringBatchable with msg.value can cause double spending issues\\r\\n// https://www.paradigm.xyz/2021/08/two-rights-might-make-a-wrong/\\r\\n\\r\\ncontract BoringBatchable {\\r\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\r\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\r\\n    function _getRevertMsg(bytes memory _returnData)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\r\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\r\\n\\r\\n        assembly {\\r\\n            // Slice the sighash.\\r\\n            _returnData := add(_returnData, 0x04)\\r\\n        }\\r\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\r\\n    }\\r\\n\\r\\n    /// @notice Allows batched call to self (this contract).\\r\\n    /// @param calls An array of inputs for each call.\\r\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\r\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\r\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\r\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\r\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\r\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable {\\r\\n        for (uint256 i = 0; i < calls.length; i++) {\\r\\n            (bool success, bytes memory result) = address(this).delegatecall(\\r\\n                calls[i]\\r\\n            );\\r\\n            if (!success && revertOnFail) {\\r\\n                revert(_getRevertMsg(result));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1160c596e58c7f1902d8b04860def13342c55be95655a90584ff9bd28b08668d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060008060006101000a81548160ff02191690831515021790555061004761003c61004c60201b60201c565b61005460201b60201c565b610119565b600033905090565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611b59806101286000396000f3fe6080604052600436106100865760003560e01c8063715018a611610059578063715018a6146101125780638456cb59146101295780638da5cb5b14610140578063d2423b511461016b578063f2fde38b1461018757610086565b80631eb99a671461008b5780633f4ba83a146100a75780635c975abb146100be5780635cfb4a16146100e9575b600080fd5b6100a560048036038101906100a09190610fd0565b6101b0565b005b3480156100b357600080fd5b506100bc6103d4565b005b3480156100ca57600080fd5b506100d36104a1565b6040516100e09190611471565b60405180910390f35b3480156100f557600080fd5b50610110600480360381019061010b919061113e565b6104b7565b005b34801561011e57600080fd5b5061012761050c565b005b34801561013557600080fd5b5061013e610594565b005b34801561014c57600080fd5b50610155610662565b604051610162919061141f565b60405180910390f35b610185600480360381019061018091906110b1565b61068b565b005b34801561019357600080fd5b506101ae60048036038101906101a99190610fa3565b61079b565b005b6101b86104a1565b156101f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ef9061153e565b60405180910390fd5b6000851415610233576040517f95ca037900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561031a5760008673ffffffffffffffffffffffffffffffffffffffff168660405161028e9061140a565b60006040518083038185875af1925050503d80600081146102cb576040519150601f19603f3d011682016040523d82523d6000602084013e6102d0565b606091505b5050905080610314576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030b9061157e565b60405180910390fd5b50610348565b6103473387878773ffffffffffffffffffffffffffffffffffffffff16610893909392919063ffffffff16565b5b8373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167ff58d1b40800221e8f4f8ce5992e1821d5b8a1286ad8da7da8b61a0fea0b8f3d488878787426040516103c49594939291906115de565b60405180910390a4505050505050565b6103dc6104a1565b61041b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610412906114de565b60405180910390fd5b61042361091c565b73ffffffffffffffffffffffffffffffffffffffff16610441610662565b73ffffffffffffffffffffffffffffffffffffffff1614610497576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048e9061155e565b60405180910390fd5b61049f610924565b565b60008060009054906101000a900460ff16905090565b3373ffffffffffffffffffffffffffffffffffffffff16827f52d5b49fd05ad35249b65196644ca51ff593704ec0f94067bcdc65be8bdefbaf83426040516105009291906114ae565b60405180910390a35050565b61051461091c565b73ffffffffffffffffffffffffffffffffffffffff16610532610662565b73ffffffffffffffffffffffffffffffffffffffff1614610588576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057f9061155e565b60405180910390fd5b61059260006109c5565b565b61059c6104a1565b156105dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d39061153e565b60405180910390fd5b6105e461091c565b73ffffffffffffffffffffffffffffffffffffffff16610602610662565b73ffffffffffffffffffffffffffffffffffffffff1614610658576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064f9061155e565b60405180910390fd5b610660610a8a565b565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60005b83839050811015610795576000803073ffffffffffffffffffffffffffffffffffffffff168686858181106106c6576106c561186e565b5b90506020028101906106d89190611646565b6040516106e69291906113da565b600060405180830381855af49150503d8060008114610721576040519150601f19603f3d011682016040523d82523d6000602084013e610726565b606091505b5091509150811580156107365750835b156107805761074481610b2c565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610777919061148c565b60405180910390fd5b5050808061078d906117f6565b91505061068e565b50505050565b6107a361091c565b73ffffffffffffffffffffffffffffffffffffffff166107c1610662565b73ffffffffffffffffffffffffffffffffffffffff1614610817576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080e9061155e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610887576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087e906114fe565b60405180910390fd5b610890816109c5565b50565b610916846323b872dd60e01b8585856040516024016108b49392919061143a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610b97565b50505050565b600033905090565b61092c6104a1565b61096b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610962906114de565b60405180910390fd5b60008060006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6109ae61091c565b6040516109bb919061141f565b60405180910390a1565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610a926104a1565b15610ad2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac99061153e565b60405180910390fd5b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610b1561091c565b604051610b22919061141f565b60405180910390a1565b6060604482511015610b75576040518060400160405280601d81526020017f5472616e73616374696f6e2072657665727465642073696c656e746c790000008152509050610b92565b60048201915081806020019051810190610b8f919061119a565b90505b919050565b6000610bf9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610c5e9092919063ffffffff16565b9050600081511115610c595780806020019051810190610c199190611111565b610c58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4f906115be565b60405180910390fd5b5b505050565b6060610c6d8484600085610c76565b90509392505050565b606082471015610cbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb29061151e565b60405180910390fd5b610cc485610d8a565b610d03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfa9061159e565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610d2c91906113f3565b60006040518083038185875af1925050503d8060008114610d69576040519150601f19603f3d011682016040523d82523d6000602084013e610d6e565b606091505b5091509150610d7e828286610d9d565b92505050949350505050565b600080823b905060008111915050919050565b60608315610dad57829050610dfd565b600083511115610dc05782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df4919061148c565b60405180910390fd5b9392505050565b6000610e17610e12846116ce565b6116a9565b905082815260208101848484011115610e3357610e326118ea565b5b610e3e848285611783565b509392505050565b6000610e59610e54846116ce565b6116a9565b905082815260208101848484011115610e7557610e746118ea565b5b610e80848285611792565b509392505050565b600081359050610e9781611ac7565b92915050565b60008083601f840112610eb357610eb26118d1565b5b8235905067ffffffffffffffff811115610ed057610ecf6118cc565b5b602083019150836020820283011115610eec57610eeb6118e0565b5b9250929050565b600081359050610f0281611ade565b92915050565b600081519050610f1781611ade565b92915050565b600081359050610f2c81611af5565b92915050565b600082601f830112610f4757610f466118d1565b5b8135610f57848260208601610e04565b91505092915050565b600082601f830112610f7557610f746118d1565b5b8151610f85848260208601610e46565b91505092915050565b600081359050610f9d81611b0c565b92915050565b600060208284031215610fb957610fb86118f4565b5b6000610fc784828501610e88565b91505092915050565b60008060008060008060c08789031215610fed57610fec6118f4565b5b6000610ffb89828a01610e88565b965050602061100c89828a01610f8e565b955050604061101d89828a01610e88565b945050606087013567ffffffffffffffff81111561103e5761103d6118ef565b5b61104a89828a01610f32565b935050608087013567ffffffffffffffff81111561106b5761106a6118ef565b5b61107789828a01610f32565b92505060a087013567ffffffffffffffff811115611098576110976118ef565b5b6110a489828a01610f32565b9150509295509295509295565b6000806000604084860312156110ca576110c96118f4565b5b600084013567ffffffffffffffff8111156110e8576110e76118ef565b5b6110f486828701610e9d565b9350935050602061110786828701610ef3565b9150509250925092565b600060208284031215611127576111266118f4565b5b600061113584828501610f08565b91505092915050565b60008060408385031215611155576111546118f4565b5b600061116385828601610f1d565b925050602083013567ffffffffffffffff811115611184576111836118ef565b5b61119085828601610f32565b9150509250929050565b6000602082840312156111b0576111af6118f4565b5b600082015167ffffffffffffffff8111156111ce576111cd6118ef565b5b6111da84828501610f60565b91505092915050565b6111ec81611731565b82525050565b6111fb81611743565b82525050565b600061120d8385611715565b935061121a838584611783565b82840190509392505050565b6000611231826116ff565b61123b8185611715565b935061124b818560208601611792565b80840191505092915050565b60006112628261170a565b61126c8185611720565b935061127c818560208601611792565b611285816118f9565b840191505092915050565b600061129d601483611720565b91506112a88261190a565b602082019050919050565b60006112c0602683611720565b91506112cb82611933565b604082019050919050565b60006112e3602683611720565b91506112ee82611982565b604082019050919050565b6000611306601083611720565b9150611311826119d1565b602082019050919050565b6000611329602083611720565b9150611334826119fa565b602082019050919050565b600061134c602083611720565b915061135782611a23565b602082019050919050565b600061136f600083611715565b915061137a82611a4c565b600082019050919050565b6000611392601d83611720565b915061139d82611a4f565b602082019050919050565b60006113b5602a83611720565b91506113c082611a78565b604082019050919050565b6113d481611779565b82525050565b60006113e7828486611201565b91508190509392505050565b60006113ff8284611226565b915081905092915050565b600061141582611362565b9150819050919050565b600060208201905061143460008301846111e3565b92915050565b600060608201905061144f60008301866111e3565b61145c60208301856111e3565b61146960408301846113cb565b949350505050565b600060208201905061148660008301846111f2565b92915050565b600060208201905081810360008301526114a68184611257565b905092915050565b600060408201905081810360008301526114c88185611257565b90506114d760208301846113cb565b9392505050565b600060208201905081810360008301526114f781611290565b9050919050565b60006020820190508181036000830152611517816112b3565b9050919050565b60006020820190508181036000830152611537816112d6565b9050919050565b60006020820190508181036000830152611557816112f9565b9050919050565b600060208201905081810360008301526115778161131c565b9050919050565b600060208201905081810360008301526115978161133f565b9050919050565b600060208201905081810360008301526115b781611385565b9050919050565b600060208201905081810360008301526115d7816113a8565b9050919050565b600060a0820190506115f360008301886113cb565b81810360208301526116058187611257565b905081810360408301526116198186611257565b9050818103606083015261162d8185611257565b905061163c60808301846113cb565b9695505050505050565b60008083356001602003843603038112611663576116626118db565b5b80840192508235915067ffffffffffffffff821115611685576116846118d6565b5b6020830192506001820236038313156116a1576116a06118e5565b5b509250929050565b60006116b36116c4565b90506116bf82826117c5565b919050565b6000604051905090565b600067ffffffffffffffff8211156116e9576116e861189d565b5b6116f2826118f9565b9050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061173c82611759565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156117b0578082015181840152602081019050611795565b838111156117bf576000848401525b50505050565b6117ce826118f9565b810181811067ffffffffffffffff821117156117ed576117ec61189d565b5b80604052505050565b600061180182611779565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156118345761183361183f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4661696c656420746f207472616e73666572206e617469766520746f6b656e73600082015250565b50565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b611ad081611731565b8114611adb57600080fd5b50565b611ae781611743565b8114611af257600080fd5b50565b611afe8161174f565b8114611b0957600080fd5b50565b611b1581611779565b8114611b2057600080fd5b5056fea26469706673582212208e10886a1985083c346f5c744ac2eb8714d43391a25066638217decab043ac7e64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c8063715018a611610059578063715018a6146101125780638456cb59146101295780638da5cb5b14610140578063d2423b511461016b578063f2fde38b1461018757610086565b80631eb99a671461008b5780633f4ba83a146100a75780635c975abb146100be5780635cfb4a16146100e9575b600080fd5b6100a560048036038101906100a09190610fd0565b6101b0565b005b3480156100b357600080fd5b506100bc6103d4565b005b3480156100ca57600080fd5b506100d36104a1565b6040516100e09190611471565b60405180910390f35b3480156100f557600080fd5b50610110600480360381019061010b919061113e565b6104b7565b005b34801561011e57600080fd5b5061012761050c565b005b34801561013557600080fd5b5061013e610594565b005b34801561014c57600080fd5b50610155610662565b604051610162919061141f565b60405180910390f35b610185600480360381019061018091906110b1565b61068b565b005b34801561019357600080fd5b506101ae60048036038101906101a99190610fa3565b61079b565b005b6101b86104a1565b156101f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ef9061153e565b60405180910390fd5b6000851415610233576040517f95ca037900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561031a5760008673ffffffffffffffffffffffffffffffffffffffff168660405161028e9061140a565b60006040518083038185875af1925050503d80600081146102cb576040519150601f19603f3d011682016040523d82523d6000602084013e6102d0565b606091505b5050905080610314576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030b9061157e565b60405180910390fd5b50610348565b6103473387878773ffffffffffffffffffffffffffffffffffffffff16610893909392919063ffffffff16565b5b8373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167ff58d1b40800221e8f4f8ce5992e1821d5b8a1286ad8da7da8b61a0fea0b8f3d488878787426040516103c49594939291906115de565b60405180910390a4505050505050565b6103dc6104a1565b61041b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610412906114de565b60405180910390fd5b61042361091c565b73ffffffffffffffffffffffffffffffffffffffff16610441610662565b73ffffffffffffffffffffffffffffffffffffffff1614610497576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048e9061155e565b60405180910390fd5b61049f610924565b565b60008060009054906101000a900460ff16905090565b3373ffffffffffffffffffffffffffffffffffffffff16827f52d5b49fd05ad35249b65196644ca51ff593704ec0f94067bcdc65be8bdefbaf83426040516105009291906114ae565b60405180910390a35050565b61051461091c565b73ffffffffffffffffffffffffffffffffffffffff16610532610662565b73ffffffffffffffffffffffffffffffffffffffff1614610588576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057f9061155e565b60405180910390fd5b61059260006109c5565b565b61059c6104a1565b156105dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d39061153e565b60405180910390fd5b6105e461091c565b73ffffffffffffffffffffffffffffffffffffffff16610602610662565b73ffffffffffffffffffffffffffffffffffffffff1614610658576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064f9061155e565b60405180910390fd5b610660610a8a565b565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60005b83839050811015610795576000803073ffffffffffffffffffffffffffffffffffffffff168686858181106106c6576106c561186e565b5b90506020028101906106d89190611646565b6040516106e69291906113da565b600060405180830381855af49150503d8060008114610721576040519150601f19603f3d011682016040523d82523d6000602084013e610726565b606091505b5091509150811580156107365750835b156107805761074481610b2c565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610777919061148c565b60405180910390fd5b5050808061078d906117f6565b91505061068e565b50505050565b6107a361091c565b73ffffffffffffffffffffffffffffffffffffffff166107c1610662565b73ffffffffffffffffffffffffffffffffffffffff1614610817576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080e9061155e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610887576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087e906114fe565b60405180910390fd5b610890816109c5565b50565b610916846323b872dd60e01b8585856040516024016108b49392919061143a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610b97565b50505050565b600033905090565b61092c6104a1565b61096b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610962906114de565b60405180910390fd5b60008060006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6109ae61091c565b6040516109bb919061141f565b60405180910390a1565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610a926104a1565b15610ad2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac99061153e565b60405180910390fd5b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610b1561091c565b604051610b22919061141f565b60405180910390a1565b6060604482511015610b75576040518060400160405280601d81526020017f5472616e73616374696f6e2072657665727465642073696c656e746c790000008152509050610b92565b60048201915081806020019051810190610b8f919061119a565b90505b919050565b6000610bf9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610c5e9092919063ffffffff16565b9050600081511115610c595780806020019051810190610c199190611111565b610c58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4f906115be565b60405180910390fd5b5b505050565b6060610c6d8484600085610c76565b90509392505050565b606082471015610cbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb29061151e565b60405180910390fd5b610cc485610d8a565b610d03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfa9061159e565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610d2c91906113f3565b60006040518083038185875af1925050503d8060008114610d69576040519150601f19603f3d011682016040523d82523d6000602084013e610d6e565b606091505b5091509150610d7e828286610d9d565b92505050949350505050565b600080823b905060008111915050919050565b60608315610dad57829050610dfd565b600083511115610dc05782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df4919061148c565b60405180910390fd5b9392505050565b6000610e17610e12846116ce565b6116a9565b905082815260208101848484011115610e3357610e326118ea565b5b610e3e848285611783565b509392505050565b6000610e59610e54846116ce565b6116a9565b905082815260208101848484011115610e7557610e746118ea565b5b610e80848285611792565b509392505050565b600081359050610e9781611ac7565b92915050565b60008083601f840112610eb357610eb26118d1565b5b8235905067ffffffffffffffff811115610ed057610ecf6118cc565b5b602083019150836020820283011115610eec57610eeb6118e0565b5b9250929050565b600081359050610f0281611ade565b92915050565b600081519050610f1781611ade565b92915050565b600081359050610f2c81611af5565b92915050565b600082601f830112610f4757610f466118d1565b5b8135610f57848260208601610e04565b91505092915050565b600082601f830112610f7557610f746118d1565b5b8151610f85848260208601610e46565b91505092915050565b600081359050610f9d81611b0c565b92915050565b600060208284031215610fb957610fb86118f4565b5b6000610fc784828501610e88565b91505092915050565b60008060008060008060c08789031215610fed57610fec6118f4565b5b6000610ffb89828a01610e88565b965050602061100c89828a01610f8e565b955050604061101d89828a01610e88565b945050606087013567ffffffffffffffff81111561103e5761103d6118ef565b5b61104a89828a01610f32565b935050608087013567ffffffffffffffff81111561106b5761106a6118ef565b5b61107789828a01610f32565b92505060a087013567ffffffffffffffff811115611098576110976118ef565b5b6110a489828a01610f32565b9150509295509295509295565b6000806000604084860312156110ca576110c96118f4565b5b600084013567ffffffffffffffff8111156110e8576110e76118ef565b5b6110f486828701610e9d565b9350935050602061110786828701610ef3565b9150509250925092565b600060208284031215611127576111266118f4565b5b600061113584828501610f08565b91505092915050565b60008060408385031215611155576111546118f4565b5b600061116385828601610f1d565b925050602083013567ffffffffffffffff811115611184576111836118ef565b5b61119085828601610f32565b9150509250929050565b6000602082840312156111b0576111af6118f4565b5b600082015167ffffffffffffffff8111156111ce576111cd6118ef565b5b6111da84828501610f60565b91505092915050565b6111ec81611731565b82525050565b6111fb81611743565b82525050565b600061120d8385611715565b935061121a838584611783565b82840190509392505050565b6000611231826116ff565b61123b8185611715565b935061124b818560208601611792565b80840191505092915050565b60006112628261170a565b61126c8185611720565b935061127c818560208601611792565b611285816118f9565b840191505092915050565b600061129d601483611720565b91506112a88261190a565b602082019050919050565b60006112c0602683611720565b91506112cb82611933565b604082019050919050565b60006112e3602683611720565b91506112ee82611982565b604082019050919050565b6000611306601083611720565b9150611311826119d1565b602082019050919050565b6000611329602083611720565b9150611334826119fa565b602082019050919050565b600061134c602083611720565b915061135782611a23565b602082019050919050565b600061136f600083611715565b915061137a82611a4c565b600082019050919050565b6000611392601d83611720565b915061139d82611a4f565b602082019050919050565b60006113b5602a83611720565b91506113c082611a78565b604082019050919050565b6113d481611779565b82525050565b60006113e7828486611201565b91508190509392505050565b60006113ff8284611226565b915081905092915050565b600061141582611362565b9150819050919050565b600060208201905061143460008301846111e3565b92915050565b600060608201905061144f60008301866111e3565b61145c60208301856111e3565b61146960408301846113cb565b949350505050565b600060208201905061148660008301846111f2565b92915050565b600060208201905081810360008301526114a68184611257565b905092915050565b600060408201905081810360008301526114c88185611257565b90506114d760208301846113cb565b9392505050565b600060208201905081810360008301526114f781611290565b9050919050565b60006020820190508181036000830152611517816112b3565b9050919050565b60006020820190508181036000830152611537816112d6565b9050919050565b60006020820190508181036000830152611557816112f9565b9050919050565b600060208201905081810360008301526115778161131c565b9050919050565b600060208201905081810360008301526115978161133f565b9050919050565b600060208201905081810360008301526115b781611385565b9050919050565b600060208201905081810360008301526115d7816113a8565b9050919050565b600060a0820190506115f360008301886113cb565b81810360208301526116058187611257565b905081810360408301526116198186611257565b9050818103606083015261162d8185611257565b905061163c60808301846113cb565b9695505050505050565b60008083356001602003843603038112611663576116626118db565b5b80840192508235915067ffffffffffffffff821115611685576116846118d6565b5b6020830192506001820236038313156116a1576116a06118e5565b5b509250929050565b60006116b36116c4565b90506116bf82826117c5565b919050565b6000604051905090565b600067ffffffffffffffff8211156116e9576116e861189d565b5b6116f2826118f9565b9050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061173c82611759565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156117b0578082015181840152602081019050611795565b838111156117bf576000848401525b50505050565b6117ce826118f9565b810181811067ffffffffffffffff821117156117ed576117ec61189d565b5b80604052505050565b600061180182611779565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156118345761183361183f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4661696c656420746f207472616e73666572206e617469766520746f6b656e73600082015250565b50565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b611ad081611731565b8114611adb57600080fd5b50565b611ae781611743565b8114611af257600080fd5b50565b611afe8161174f565b8114611b0957600080fd5b50565b611b1581611779565b8114611b2057600080fd5b5056fea26469706673582212208e10886a1985083c346f5c744ac2eb8714d43391a25066638217decab043ac7e64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "batch(bytes[],bool)": {
        "params": {
          "calls": "An array of inputs for each call.",
          "revertOnFail": "If True then reverts after a failed call and stops doing further calls."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "batch(bytes[],bool)": {
        "notice": "Allows batched call to self (this contract)."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1829,
        "contract": "contracts/BullaInstantPayment.sol:BullaInstantPayment",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1635,
        "contract": "contracts/BullaInstantPayment.sol:BullaInstantPayment",
        "label": "_owner",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}