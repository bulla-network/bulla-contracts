{
  "address": "0x6985d6af038f177438a6681d1F64d4409Dc8AaC2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBullaClaim",
          "name": "_bullaClaim",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "INCORRECT_FEE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_TERM_LENGTH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NOT_ADMIN",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NOT_CREDITOR",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NOT_CREDITOR_OR_DEBTOR",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NOT_DEBTOR",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TRANSFER_FAILED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WITHDRAWAL_FAILED",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bullaManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "updatedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "tag",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blocktime",
          "type": "uint256"
        }
      ],
      "name": "BullaTagUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "claimId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blocktime",
          "type": "uint256"
        }
      ],
      "name": "LoanOfferAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rejectedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blocktime",
          "type": "uint256"
        }
      ],
      "name": "LoanOfferRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "offeredBy",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint24",
              "name": "interestBPS",
              "type": "uint24"
            },
            {
              "internalType": "uint40",
              "name": "termLength",
              "type": "uint40"
            },
            {
              "internalType": "uint128",
              "name": "loanAmount",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "creditor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "debtor",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "claimToken",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint8",
                  "name": "hashFunction",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "size",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Multihash",
              "name": "attachment",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct FrendLend.LoanOffer",
          "name": "loanOffer",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blocktime",
          "type": "uint256"
        }
      ],
      "name": "LoanOffered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "tag",
          "type": "bytes32"
        }
      ],
      "name": "acceptLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bullaClaim",
      "outputs": [
        {
          "internalType": "contract IBullaClaim",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loanOfferCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "loanOffers",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "interestBPS",
          "type": "uint24"
        },
        {
          "internalType": "uint40",
          "name": "termLength",
          "type": "uint40"
        },
        {
          "internalType": "uint128",
          "name": "loanAmount",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "creditor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debtor",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "claimToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "hashFunction",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "size",
              "type": "uint8"
            }
          ],
          "internalType": "struct Multihash",
          "name": "attachment",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint24",
              "name": "interestBPS",
              "type": "uint24"
            },
            {
              "internalType": "uint40",
              "name": "termLength",
              "type": "uint40"
            },
            {
              "internalType": "uint128",
              "name": "loanAmount",
              "type": "uint128"
            },
            {
              "internalType": "address",
              "name": "creditor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "debtor",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "claimToken",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint8",
                  "name": "hashFunction",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "size",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Multihash",
              "name": "attachment",
              "type": "tuple"
            }
          ],
          "internalType": "struct FrendLend.LoanOffer",
          "name": "offer",
          "type": "tuple"
        }
      ],
      "name": "offerLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        }
      ],
      "name": "rejectLoanOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4767dd80e04a34a09be57d907c56d104547c0a9ae47aba216ad67d6e852a906c",
  "receipt": {
    "to": null,
    "from": "0x81f1e947811496453dBBaeA0AC2c250e056BBd96",
    "contractAddress": "0x6985d6af038f177438a6681d1F64d4409Dc8AaC2",
    "transactionIndex": 0,
    "gasUsed": "2816045",
    "logsBloom": "0x
    "blockHash": "0xc1f0fc0e2e2608d68a7bd47bdc78a66a1649e5a789502192f010ecec9b699c37",
    "transactionHash": "0x4767dd80e04a34a09be57d907c56d104547c0a9ae47aba216ad67d6e852a906c",
    "logs": [],
    "blockNumber": 2488928,
    "cumulativeGasUsed": "2816045",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1c534661326b41c8b8aab5631ECED6D9755ff192",
    "0x81f1e947811496453dBBaeA0AC2c250e056BBd96",
    "0"
  ],
  "numDeployments": 1,
  "solcInputHash": "b8545aea175c6ca7dd158e613a2ab35e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBullaClaim\",\"name\":\"_bullaClaim\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"INCORRECT_FEE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_TERM_LENGTH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_ADMIN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_CREDITOR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_CREDITOR_OR_DEBTOR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_DEBTOR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TRANSFER_FAILED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_FAILED\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bullaManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tag\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"BullaTagUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"LoanOfferAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rejectedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"LoanOfferRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"offeredBy\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"interestBPS\",\"type\":\"uint24\"},{\"internalType\":\"uint40\",\"name\":\"termLength\",\"type\":\"uint40\"},{\"internalType\":\"uint128\",\"name\":\"loanAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"hashFunction\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"size\",\"type\":\"uint8\"}],\"internalType\":\"struct Multihash\",\"name\":\"attachment\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct FrendLend.LoanOffer\",\"name\":\"loanOffer\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"LoanOffered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"tag\",\"type\":\"bytes32\"}],\"name\":\"acceptLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bullaClaim\",\"outputs\":[{\"internalType\":\"contract IBullaClaim\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanOfferCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loanOffers\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"interestBPS\",\"type\":\"uint24\"},{\"internalType\":\"uint40\",\"name\":\"termLength\",\"type\":\"uint40\"},{\"internalType\":\"uint128\",\"name\":\"loanAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"hashFunction\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"size\",\"type\":\"uint8\"}],\"internalType\":\"struct Multihash\",\"name\":\"attachment\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint24\",\"name\":\"interestBPS\",\"type\":\"uint24\"},{\"internalType\":\"uint40\",\"name\":\"termLength\",\"type\":\"uint40\"},{\"internalType\":\"uint128\",\"name\":\"loanAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"claimToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"hashFunction\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"size\",\"type\":\"uint8\"}],\"internalType\":\"struct Multihash\",\"name\":\"attachment\",\"type\":\"tuple\"}],\"internalType\":\"struct FrendLend.LoanOffer\",\"name\":\"offer\",\"type\":\"tuple\"}],\"name\":\"offerLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"rejectLoanOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@colinnielsen\",\"kind\":\"dev\",\"methods\":{\"acceptLoan(uint256,string,bytes32)\":{\"params\":{\"offerId\":\"the offerId to acceot\",\"tag\":\"a bytes32 tag for the frontend\",\"tokenURI\":\"the tokenURI for the underlying claim\"}},\"offerLoan((uint24,uint40,uint128,address,address,string,address,(bytes32,uint8,uint8)))\":{\"params\":{\"offer\":\"claim creation params and loan info\"}},\"rejectLoanOffer(uint256)\":{\"params\":{\"offerId\":\"the offerId to reject\"}}},\"title\":\"FrendLend POC\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptLoan(uint256,string,bytes32)\":{\"notice\":\"WARNING: will not work with fee on transfer tokensSPEC:     Allows a debtor to accept a loan offer, and receive payment     This function will:         RES1. Delete the offer from storage         RES2. Creates a new claim for the loan amount + interest         RES3. Transfers the offered loan amount from the creditor to the debtor         RES4. Puts the claim into a non-rejectable repaying state by paying 1 wei         RES5. Emits a BullaTagUpdated event with the claimId, the debtor address, a tag, and the current timestamp         RES6. Emits a LoanOfferAccepted event with the offerId, the accepted claimId, and the current timestamp     Given the following:         P1. the current msg.sender is the debtor listed on the offer (covers: offer exists)\"},\"admin()\":{\"notice\":\"the admin of the contract\"},\"bullaClaim()\":{\"notice\":\"address of the Bulla Claim contract\"},\"fee()\":{\"notice\":\"the fee represented as the wei amount of the network's native token\"},\"loanOfferCount()\":{\"notice\":\"the number of loan offers\"},\"loanOffers(uint256)\":{\"notice\":\"a mapping of id to the FinanceTerms offered by the creditor\"},\"offerLoan((uint24,uint40,uint128,address,address,string,address,(bytes32,uint8,uint8)))\":{\"notice\":\"SPEC:     Allows a user to create offer a loan to a potential debtor     This function will:         RES1. Increment the loan offer count in storage         RES2. Store the offer parameters         RES3. Emit a LoanOffered event with the offer parameters, the offerId, the creator, and the current timestamp         RETURNS: the offerId     Given the following:         P1. `msg.value == fee`         P2. `msg.sender == offer.creditor`         P3. `terms.interestBPS < type(uint24).max`         P4. `terms.termLength < type(uint40).max`         P5. `terms.termLength > 0`\"},\"rejectLoanOffer(uint256)\":{\"notice\":\"SPEC:     Allows a debtor or a offerrer to reject (or rescind) a loan offer     This function will:         RES1. Delete the offer from storage         RES2. Emit a LoanOfferRejected event with the offerId, the msg.sender, and the current timestamp     Given the following:         P1. the current msg.sender is either the creditor or debtor (covers: offer exists)\"},\"withdrawFee(uint256)\":{\"notice\":\"SPEC:     allows an admin to withdraw `withdrawableFee` amount of tokens from this contract's balance     Given the following: `msg.sender == admin`\"}},\"notice\":\"An extension to BullaClaim V1 that allows a creditor to offer capital in exchange for a claimThis is experimental software, use at your own risk\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FrendLend.sol\":\"FrendLend\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa3bbab77849522b73d8c6cd3d2ac54bef7580e4354484f35f4cabf55d3d2b3f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd644260d8e4e64563a7adba96d774dbaac6ae89c2ee58ef49a19850ff1239b08\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x188d038a65a945481cc13fe30db334472dfbed61f7959d4478d05feb6303b1ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/BullaBanker.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"./interfaces/IBullaClaim.sol\\\";\\r\\nimport \\\"./BullaClaimERC721.sol\\\";\\r\\n\\r\\ncontract BullaBanker {\\r\\n    address public bullaClaimERC721;\\r\\n\\r\\n    event BullaTagUpdated(\\r\\n        address indexed bullaManager,\\r\\n        uint256 indexed tokenId,\\r\\n        address indexed updatedBy,\\r\\n        bytes32 tag,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n\\r\\n    event BullaBankerCreated(\\r\\n        address indexed bullaManager,\\r\\n        address indexed bullaClaimERC721,\\r\\n        address bullaBanker,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n    \\r\\n    struct ClaimParams {\\r\\n        uint256 claimAmount;\\r\\n        address creditor;\\r\\n        address debtor;\\r\\n        string description;\\r\\n        uint256 dueBy;\\r\\n        address claimToken;\\r\\n        Multihash attachment;\\r\\n    }\\r\\n\\r\\n    constructor(address _bullaClaimERC721) {\\r\\n        bullaClaimERC721 = _bullaClaimERC721;\\r\\n        emit BullaBankerCreated(\\r\\n            IBullaClaim(_bullaClaimERC721).bullaManager(),\\r\\n            bullaClaimERC721,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function createBullaClaim(\\r\\n        ClaimParams calldata claim,\\r\\n        bytes32 bullaTag,\\r\\n        string calldata _tokenUri\\r\\n    ) public returns (uint256) {\\r\\n        if (msg.sender != claim.creditor && msg.sender != claim.debtor)\\r\\n            revert NotCreditorOrDebtor(msg.sender);\\r\\n\\r\\n        address _bullaClaimERC721Address = bullaClaimERC721;\\r\\n        uint256 newTokenId = BullaClaimERC721(_bullaClaimERC721Address)\\r\\n            .createClaimWithURI(\\r\\n                claim.creditor,\\r\\n                claim.debtor,\\r\\n                claim.description,\\r\\n                claim.claimAmount,\\r\\n                claim.dueBy,\\r\\n                claim.claimToken,\\r\\n                claim.attachment,\\r\\n                _tokenUri\\r\\n            );\\r\\n\\r\\n        emit BullaTagUpdated(\\r\\n            IBullaClaim(_bullaClaimERC721Address).bullaManager(),\\r\\n            newTokenId,\\r\\n            msg.sender,\\r\\n            bullaTag,\\r\\n            block.timestamp\\r\\n        );\\r\\n        return newTokenId;\\r\\n    }\\r\\n\\r\\n    function updateBullaTag(uint256 tokenId, bytes32 newTag) public {\\r\\n        address _bullaClaimERC721Address = bullaClaimERC721;\\r\\n        BullaClaimERC721 _bullaClaimERC721 = BullaClaimERC721(\\r\\n            _bullaClaimERC721Address\\r\\n        );\\r\\n\\r\\n        address claimOwner = _bullaClaimERC721.ownerOf(tokenId);\\r\\n        Claim memory bullaClaim = _bullaClaimERC721.getClaim(tokenId);\\r\\n        if (msg.sender != claimOwner && msg.sender != bullaClaim.debtor)\\r\\n            revert NotCreditorOrDebtor(msg.sender);\\r\\n\\r\\n        emit BullaTagUpdated(\\r\\n            IBullaClaim(_bullaClaimERC721Address).bullaManager(),\\r\\n            tokenId,\\r\\n            msg.sender,\\r\\n            newTag,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd951e4f80b3dff19db20dfd5cd25c1a08f2bbc8bb98dbc8e326221e4bd2260e2\",\"license\":\"BUSL-1.1\"},\"contracts/BullaClaimERC721.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./interfaces/IBullaManager.sol\\\";\\r\\nimport \\\"./interfaces/IBullaClaim.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\nerror ZeroAddress();\\r\\nerror PastDueDate();\\r\\nerror TokenIdNoExist();\\r\\nerror ClaimTokenNotContract();\\r\\nerror NotCreditor(address sender);\\r\\nerror NotDebtor(address sender);\\r\\nerror NotTokenOwner(address sender);\\r\\nerror NotCreditorOrDebtor(address sender);\\r\\nerror OwnerNotCreditor(address sender);\\r\\nerror ClaimCompleted();\\r\\nerror ClaimNotPending();\\r\\nerror IncorrectValue(uint256 value, uint256 expectedValue);\\r\\nerror InsufficientBalance(uint256 senderBalance);\\r\\nerror InsufficientAllowance(uint256 senderAllowance);\\r\\nerror RepayingTooMuch(uint256 amount, uint256 expectedAmount);\\r\\nerror ValueMustBeGreaterThanZero();\\r\\n\\r\\nabstract contract BullaClaimERC721URI is Ownable, ERC721URIStorage {\\r\\n    string public baseURI;\\r\\n\\r\\n    function setBaseURI(string memory baseURI_) public onlyOwner {\\r\\n        baseURI = baseURI_;\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n        return baseURI;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract BullaClaimERC721 is IBullaClaim, BullaClaimERC721URI {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Counters for Counters.Counter;\\r\\n    using Address for address;\\r\\n\\r\\n    Counters.Counter private tokenIds;\\r\\n\\r\\n    address public override bullaManager;\\r\\n    mapping(uint256 => Claim) private claimTokens;\\r\\n\\r\\n    modifier onlyTokenOwner(uint256 tokenId) {\\r\\n        if (ownerOf(tokenId) != msg.sender) revert NotCreditor(msg.sender);\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier onlyDebtor(uint256 tokenId) {\\r\\n        if (claimTokens[tokenId].debtor != msg.sender)\\r\\n            revert NotDebtor(msg.sender);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyIncompleteClaim(uint256 tokenId) {\\r\\n        if (\\r\\n            claimTokens[tokenId].status != Status.Pending &&\\r\\n            claimTokens[tokenId].status != Status.Repaying\\r\\n        ) revert ClaimCompleted();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPendingClaim(uint256 tokenId) {\\r\\n        if (claimTokens[tokenId].status != Status.Pending)\\r\\n            revert ClaimNotPending();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address bullaManager_, string memory baseURI_)\\r\\n        ERC721(\\\"BullaClaim721\\\", \\\"CLAIM\\\")\\r\\n    {\\r\\n        setBullaManager(bullaManager_);\\r\\n        setBaseURI(baseURI_);\\r\\n    }\\r\\n\\r\\n    function setBullaManager(address _bullaManager) public onlyOwner {\\r\\n        address prevBullaManager = bullaManager;\\r\\n        bullaManager = _bullaManager;\\r\\n        emit BullaManagerSet(prevBullaManager, bullaManager, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function _createClaim(\\r\\n        address creditor,\\r\\n        address debtor,\\r\\n        string memory description,\\r\\n        uint256 claimAmount,\\r\\n        uint256 dueBy,\\r\\n        address claimToken,\\r\\n        Multihash calldata attachment\\r\\n    ) internal returns (uint256) {\\r\\n        if (creditor == address(0) || debtor == address(0)) {\\r\\n            revert ZeroAddress();\\r\\n        }\\r\\n        if (claimAmount == 0) {\\r\\n            revert ValueMustBeGreaterThanZero();\\r\\n        }\\r\\n        if (dueBy < block.timestamp) {\\r\\n            revert PastDueDate();\\r\\n        }\\r\\n        if (!claimToken.isContract()) {\\r\\n            revert ClaimTokenNotContract();\\r\\n        }\\r\\n\\r\\n        tokenIds.increment();\\r\\n        uint256 newTokenId = tokenIds.current();\\r\\n        _safeMint(creditor, newTokenId);\\r\\n\\r\\n        Claim memory newClaim;\\r\\n        newClaim.debtor = debtor;\\r\\n        newClaim.claimAmount = claimAmount;\\r\\n        newClaim.dueBy = dueBy;\\r\\n        newClaim.status = Status.Pending;\\r\\n        newClaim.claimToken = claimToken;\\r\\n        newClaim.attachment = attachment;\\r\\n        claimTokens[newTokenId] = newClaim;\\r\\n\\r\\n        emit ClaimCreated(\\r\\n            bullaManager,\\r\\n            newTokenId,\\r\\n            msg.sender,\\r\\n            creditor,\\r\\n            debtor,\\r\\n            tx.origin,\\r\\n            description,\\r\\n            newClaim,\\r\\n            block.timestamp\\r\\n        );\\r\\n        return newTokenId;\\r\\n    }\\r\\n\\r\\n    function createClaim(\\r\\n        address creditor,\\r\\n        address debtor,\\r\\n        string memory description,\\r\\n        uint256 claimAmount,\\r\\n        uint256 dueBy,\\r\\n        address claimToken,\\r\\n        Multihash calldata attachment\\r\\n    ) external override returns (uint256) {\\r\\n        uint256 _tokenId = _createClaim(\\r\\n            creditor,\\r\\n            debtor,\\r\\n            description,\\r\\n            claimAmount,\\r\\n            dueBy,\\r\\n            claimToken,\\r\\n            attachment\\r\\n        );\\r\\n        return _tokenId;\\r\\n    }\\r\\n\\r\\n    function createClaimWithURI(\\r\\n        address creditor,\\r\\n        address debtor,\\r\\n        string memory description,\\r\\n        uint256 claimAmount,\\r\\n        uint256 dueBy,\\r\\n        address claimToken,\\r\\n        Multihash calldata attachment,\\r\\n        string calldata _tokenUri\\r\\n    ) external override returns (uint256) {\\r\\n        uint256 _tokenId = _createClaim(\\r\\n            creditor,\\r\\n            debtor,\\r\\n            description,\\r\\n            claimAmount,\\r\\n            dueBy,\\r\\n            claimToken,\\r\\n            attachment\\r\\n        );\\r\\n        _setTokenURI(_tokenId, _tokenUri);\\r\\n        return _tokenId;\\r\\n    }\\r\\n\\r\\n    function payClaim(uint256 tokenId, uint256 paymentAmount)\\r\\n        external\\r\\n        override\\r\\n        onlyIncompleteClaim(tokenId)\\r\\n    {\\r\\n        if (paymentAmount == 0) revert ValueMustBeGreaterThanZero();\\r\\n        if (!_exists(tokenId)) revert TokenIdNoExist();\\r\\n\\r\\n        Claim memory claim = getClaim(tokenId);\\r\\n        address creditor = ownerOf(tokenId);\\r\\n\\r\\n        uint256 amountToRepay = claim.claimAmount - claim.paidAmount;\\r\\n        uint256 totalPayment = paymentAmount >= amountToRepay\\r\\n            ? amountToRepay\\r\\n            : paymentAmount;\\r\\n        claim.paidAmount + totalPayment == claim.claimAmount\\r\\n            ? claim.status = Status.Paid\\r\\n            : claim.status = Status.Repaying;\\r\\n        claimTokens[tokenId].paidAmount += totalPayment;\\r\\n        claimTokens[tokenId].status = claim.status;\\r\\n\\r\\n        (address collectionAddress, uint256 transactionFee) = IBullaManager(\\r\\n            bullaManager\\r\\n        ).getTransactionFee(msg.sender, totalPayment);\\r\\n\\r\\n        IERC20(claim.claimToken).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            creditor,\\r\\n            totalPayment - transactionFee\\r\\n        );\\r\\n\\r\\n        if (transactionFee > 0) {\\r\\n            IERC20(claim.claimToken).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                collectionAddress,\\r\\n                transactionFee\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit ClaimPayment(\\r\\n            bullaManager,\\r\\n            tokenId,\\r\\n            claim.debtor,\\r\\n            msg.sender,\\r\\n            tx.origin,\\r\\n            paymentAmount,\\r\\n            block.timestamp\\r\\n        );\\r\\n        emit FeePaid(\\r\\n            bullaManager,\\r\\n            tokenId,\\r\\n            collectionAddress,\\r\\n            paymentAmount,\\r\\n            transactionFee,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function rejectClaim(uint256 tokenId)\\r\\n        external\\r\\n        override\\r\\n        onlyDebtor(tokenId)\\r\\n        onlyPendingClaim(tokenId)\\r\\n    {\\r\\n        claimTokens[tokenId].status = Status.Rejected;\\r\\n        emit ClaimRejected(bullaManager, tokenId, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function rescindClaim(uint256 tokenId)\\r\\n        external\\r\\n        override\\r\\n        onlyTokenOwner(tokenId)\\r\\n        onlyPendingClaim(tokenId)\\r\\n    {\\r\\n        claimTokens[tokenId].status = Status.Rescinded;\\r\\n        emit ClaimRescinded(bullaManager, tokenId, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function burn(uint256 tokenId) external onlyTokenOwner(tokenId) {\\r\\n        _burn(tokenId);\\r\\n    }\\r\\n\\r\\n    function nextClaimId() external view returns (uint256) {\\r\\n        return tokenIds.current() + 1;\\r\\n    }\\r\\n\\r\\n    function getClaim(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (Claim memory)\\r\\n    {\\r\\n        return claimTokens[tokenId];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x04fde59493b5291c52467876485e04b393c14d69466eca2ee3b41c8616436dc3\",\"license\":\"BUSL-1.1\"},\"contracts/FrendLend.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.7;\\r\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\r\\nimport './interfaces/IBullaClaim.sol';\\r\\nimport './BullaBanker.sol';\\r\\n\\r\\nuint256 constant MAX_BPS = 10_000;\\r\\n\\r\\n/// @title FrendLend POC\\r\\n/// @author @colinnielsen\\r\\n/// @notice An extension to BullaClaim V1 that allows a creditor to offer capital in exchange for a claim\\r\\n/// @notice This is experimental software, use at your own risk\\r\\ncontract FrendLend {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    struct LoanOffer {\\r\\n        uint24 interestBPS; // can be 0\\r\\n        uint40 termLength; // cannot be 0\\r\\n        uint128 loanAmount;\\r\\n        address creditor;\\r\\n        address debtor;\\r\\n        string description;\\r\\n        address claimToken;\\r\\n        Multihash attachment;\\r\\n    }\\r\\n\\r\\n    /// address of the Bulla Claim contract\\r\\n    IBullaClaim public bullaClaim;\\r\\n    /// the admin of the contract\\r\\n    address public admin;\\r\\n    /// the fee represented as the wei amount of the network's native token\\r\\n    uint256 public fee;\\r\\n    /// the number of loan offers\\r\\n    uint256 public loanOfferCount;\\r\\n    /// a mapping of id to the FinanceTerms offered by the creditor\\r\\n    mapping(uint256 => LoanOffer) public loanOffers;\\r\\n\\r\\n    event LoanOffered(uint256 indexed loanId, address indexed offeredBy, LoanOffer loanOffer, uint256 blocktime);\\r\\n    event LoanOfferAccepted(uint256 indexed loanId, uint256 indexed claimId, uint256 blocktime);\\r\\n    event LoanOfferRejected(uint256 indexed loanId, address indexed rejectedBy, uint256 blocktime);\\r\\n    event BullaTagUpdated(address indexed bullaManager, uint256 indexed tokenId, address indexed updatedBy, bytes32 tag, uint256 blocktime);\\r\\n\\r\\n    error INCORRECT_FEE();\\r\\n    error NOT_CREDITOR();\\r\\n    error NOT_DEBTOR();\\r\\n    error NOT_CREDITOR_OR_DEBTOR();\\r\\n    error NOT_ADMIN();\\r\\n    error INVALID_TERM_LENGTH();\\r\\n    error WITHDRAWAL_FAILED();\\r\\n    error TRANSFER_FAILED();\\r\\n\\r\\n    constructor(\\r\\n        IBullaClaim _bullaClaim,\\r\\n        address _admin,\\r\\n        uint256 _fee\\r\\n    ) {\\r\\n        bullaClaim = _bullaClaim;\\r\\n        admin = _admin;\\r\\n        fee = _fee;\\r\\n    }\\r\\n\\r\\n    ////// ADMIN FUNCTIONS //////\\r\\n\\r\\n    /// @notice SPEC:\\r\\n    ///     allows an admin to withdraw `withdrawableFee` amount of tokens from this contract's balance\\r\\n    ///     Given the following: `msg.sender == admin`\\r\\n    function withdrawFee(uint256 _amount) public {\\r\\n        if (msg.sender != admin) revert NOT_ADMIN();\\r\\n\\r\\n        (bool success, ) = admin.call{ value: _amount }('');\\r\\n        if (!success) revert WITHDRAWAL_FAILED();\\r\\n    }\\r\\n\\r\\n    ////// USER FUNCTIONS //////\\r\\n\\r\\n    /// @param offer claim creation params and loan info\\r\\n    /// @notice SPEC:\\r\\n    ///     Allows a user to create offer a loan to a potential debtor\\r\\n    ///     This function will:\\r\\n    ///         RES1. Increment the loan offer count in storage\\r\\n    ///         RES2. Store the offer parameters\\r\\n    ///         RES3. Emit a LoanOffered event with the offer parameters, the offerId, the creator, and the current timestamp\\r\\n    ///         RETURNS: the offerId\\r\\n    ///     Given the following:\\r\\n    ///         P1. `msg.value == fee`\\r\\n    ///         P2. `msg.sender == offer.creditor`\\r\\n    ///         P3. `terms.interestBPS < type(uint24).max`\\r\\n    ///         P4. `terms.termLength < type(uint40).max`\\r\\n    ///         P5. `terms.termLength > 0`\\r\\n    function offerLoan(LoanOffer calldata offer) public payable returns (uint256) {\\r\\n        if (msg.value != fee) revert INCORRECT_FEE();\\r\\n        if (msg.sender != offer.creditor) revert NOT_CREDITOR();\\r\\n        if (offer.termLength == 0) revert INVALID_TERM_LENGTH();\\r\\n\\r\\n        uint256 offerId = ++loanOfferCount;\\r\\n        loanOffers[offerId] = offer;\\r\\n\\r\\n        emit LoanOffered(offerId, msg.sender, offer, block.timestamp);\\r\\n\\r\\n        return offerId;\\r\\n    }\\r\\n\\r\\n    /// @param offerId the offerId to reject\\r\\n    /// @notice SPEC:\\r\\n    ///     Allows a debtor or a offerrer to reject (or rescind) a loan offer\\r\\n    ///     This function will:\\r\\n    ///         RES1. Delete the offer from storage\\r\\n    ///         RES2. Emit a LoanOfferRejected event with the offerId, the msg.sender, and the current timestamp\\r\\n    ///     Given the following:\\r\\n    ///         P1. the current msg.sender is either the creditor or debtor (covers: offer exists)\\r\\n    function rejectLoanOffer(uint256 offerId) public {\\r\\n        LoanOffer memory offer = loanOffers[offerId];\\r\\n        if (msg.sender != offer.creditor && msg.sender != offer.debtor) revert NOT_CREDITOR_OR_DEBTOR();\\r\\n\\r\\n        delete loanOffers[offerId];\\r\\n\\r\\n        emit LoanOfferRejected(offerId, msg.sender, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /// @param offerId the offerId to acceot\\r\\n    /// @param tokenURI the tokenURI for the underlying claim\\r\\n    /// @param tag a bytes32 tag for the frontend\\r\\n    /// @notice WARNING: will not work with fee on transfer tokens\\r\\n    /// @notice SPEC:\\r\\n    ///     Allows a debtor to accept a loan offer, and receive payment\\r\\n    ///     This function will:\\r\\n    ///         RES1. Delete the offer from storage\\r\\n    ///         RES2. Creates a new claim for the loan amount + interest\\r\\n    ///         RES3. Transfers the offered loan amount from the creditor to the debtor\\r\\n    ///         RES4. Puts the claim into a non-rejectable repaying state by paying 1 wei\\r\\n    ///         RES5. Emits a BullaTagUpdated event with the claimId, the debtor address, a tag, and the current timestamp\\r\\n    ///         RES6. Emits a LoanOfferAccepted event with the offerId, the accepted claimId, and the current timestamp\\r\\n    ///     Given the following:\\r\\n    ///         P1. the current msg.sender is the debtor listed on the offer (covers: offer exists)\\r\\n    function acceptLoan(\\r\\n        uint256 offerId,\\r\\n        string calldata tokenURI,\\r\\n        bytes32 tag\\r\\n    ) public {\\r\\n        LoanOffer memory offer = loanOffers[offerId];\\r\\n        if (msg.sender != offer.debtor) revert NOT_DEBTOR();\\r\\n\\r\\n        delete loanOffers[offerId];\\r\\n\\r\\n        uint256 claimAmount = offer.loanAmount + (offer.loanAmount * offer.interestBPS) / MAX_BPS + 1;\\r\\n        uint256 claimId = bullaClaim.createClaimWithURI(\\r\\n            offer.creditor,\\r\\n            offer.debtor,\\r\\n            offer.description,\\r\\n            claimAmount,\\r\\n            block.timestamp + offer.termLength,\\r\\n            offer.claimToken,\\r\\n            offer.attachment,\\r\\n            tokenURI\\r\\n        );\\r\\n\\r\\n        // add 1 wei to force repaying status\\r\\n        IERC20(offer.claimToken).safeTransferFrom(offer.creditor, address(this), offer.loanAmount + 1);\\r\\n        IERC20(offer.claimToken).approve(address(bullaClaim), 1);\\r\\n        bullaClaim.payClaim(claimId, 1);\\r\\n\\r\\n        IERC20(offer.claimToken).safeTransfer(offer.debtor, offer.loanAmount);\\r\\n\\r\\n        emit BullaTagUpdated(bullaClaim.bullaManager(), claimId, msg.sender, tag, block.timestamp);\\r\\n        emit LoanOfferAccepted(offerId, claimId, block.timestamp);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x92a5c6984ad98b847e3e4263fe56878f69ebe6ec2439374c977bb128581cda52\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBullaClaim.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./IBullaManager.sol\\\";\\r\\n\\r\\nstruct Multihash {\\r\\n    bytes32 hash;\\r\\n    uint8 hashFunction;\\r\\n    uint8 size;\\r\\n}\\r\\n\\r\\nenum Status {\\r\\n    Pending,\\r\\n    Repaying,\\r\\n    Paid,\\r\\n    Rejected,\\r\\n    Rescinded\\r\\n}\\r\\n\\r\\nstruct Claim {\\r\\n    uint256 claimAmount;\\r\\n    uint256 paidAmount;\\r\\n    Status status;\\r\\n    uint256 dueBy;\\r\\n    address debtor;\\r\\n    address claimToken;\\r\\n    Multihash attachment;\\r\\n}\\r\\n\\r\\ninterface IBullaClaim {\\r\\n    event ClaimCreated(\\r\\n        address bullaManager,\\r\\n        uint256 indexed tokenId,\\r\\n        address parent,\\r\\n        address indexed creditor,\\r\\n        address indexed debtor,\\r\\n        address origin,\\r\\n        string description,\\r\\n        Claim claim,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n\\r\\n    event ClaimPayment(\\r\\n        address indexed bullaManager,\\r\\n        uint256 indexed tokenId,\\r\\n        address indexed debtor,\\r\\n        address paidBy,\\r\\n        address paidByOrigin,\\r\\n        uint256 paymentAmount,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n\\r\\n    event ClaimRejected(\\r\\n        address indexed bullaManager,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n\\r\\n    event ClaimRescinded(\\r\\n        address indexed bullaManager,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n\\r\\n    event FeePaid(\\r\\n        address indexed bullaManager,\\r\\n        uint256 indexed tokenId,\\r\\n        address indexed collectionAddress,\\r\\n        uint256 paymentAmount,\\r\\n        uint256 transactionFee,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n\\r\\n    event BullaManagerSet(\\r\\n        address indexed prevBullaManager,\\r\\n        address indexed newBullaManager,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n\\r\\n    function createClaim(\\r\\n        address creditor,\\r\\n        address debtor,\\r\\n        string memory description,\\r\\n        uint256 claimAmount,\\r\\n        uint256 dueBy,\\r\\n        address claimToken,\\r\\n        Multihash calldata attachment\\r\\n    ) external returns (uint256 newTokenId);\\r\\n\\r\\n    function createClaimWithURI(\\r\\n        address creditor,\\r\\n        address debtor,\\r\\n        string memory description,\\r\\n        uint256 claimAmount,\\r\\n        uint256 dueBy,\\r\\n        address claimToken,\\r\\n        Multihash calldata attachment,\\r\\n        string calldata _tokenUri\\r\\n    ) external returns (uint256 newTokenId);\\r\\n\\r\\n    function payClaim(uint256 tokenId, uint256 paymentAmount) external;\\r\\n\\r\\n    function rejectClaim(uint256 tokenId) external;\\r\\n\\r\\n    function rescindClaim(uint256 tokenId) external;\\r\\n\\r\\n    function getClaim(uint256 tokenId) external view returns (Claim calldata);\\r\\n\\r\\n    function bullaManager() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xea0beb1115699b76692d1d251ec041c73eb66e411d4f47d46e0e60fff0339045\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBullaManager.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.3;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nstruct FeeInfo {\\r\\n    address collectionAddress;\\r\\n    uint32 feeBasisPoints;\\r\\n    uint32 bullaTokenThreshold; //# of BULLA tokens held to get fee reduction\\r\\n    uint32 reducedFeeBasisPoints; //reduced fee for BULLA token holders\\r\\n}\\r\\n\\r\\ninterface IBullaManager {\\r\\n    event FeeChanged(\\r\\n        address indexed bullaManager,\\r\\n        uint256 prevFee,\\r\\n        uint256 newFee,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n    event CollectorChanged(\\r\\n        address indexed bullaManager,\\r\\n        address prevCollector,\\r\\n        address newCollector,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n    event OwnerChanged(\\r\\n        address indexed bullaManager,\\r\\n        address prevOwner,\\r\\n        address newOwner,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n    event BullaTokenChanged(\\r\\n        address indexed bullaManager,\\r\\n        address prevBullaToken,\\r\\n        address newBullaToken,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n    event FeeThresholdChanged(\\r\\n        address indexed bullaManager,\\r\\n        uint256 prevFeeThreshold,\\r\\n        uint256 newFeeThreshold,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n    event ReducedFeeChanged(\\r\\n        address indexed bullaManager,\\r\\n        uint256 prevFee,\\r\\n        uint256 newFee,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n\\r\\n    function setOwner(address _owner) external;\\r\\n\\r\\n    function setFee(uint32 _feeBasisPoints) external;\\r\\n\\r\\n    function setCollectionAddress(address _collectionAddress) external;\\r\\n\\r\\n    function setbullaThreshold(uint32 _threshold) external;\\r\\n\\r\\n    function setReducedFee(uint32 reducedFeeBasisPoints) external;\\r\\n\\r\\n    function setBullaTokenAddress(address _bullaTokenAddress) external;\\r\\n\\r\\n    function getBullaBalance(address _holder) external view returns (uint256);\\r\\n\\r\\n    function getFeeInfo(address _holder)\\r\\n        external\\r\\n        view\\r\\n        returns (uint32, address);\\r\\n    \\r\\n    function getTransactionFee(address _holder, uint paymentAmount) external view returns(address sendFeesTo, uint transactionFee);\\r\\n}\\r\\n\",\"keccak256\":\"0x81451ca76f6027531a9873d5c05159b76178ac38bb0c754dfad9c91af8a3378a\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620033333803806200333383398181016040528101906200003791906200010d565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806002819055505050506200020e565b600081519050620000d981620001c0565b92915050565b600081519050620000f081620001da565b92915050565b6000815190506200010781620001f4565b92915050565b600080600060608486031215620001295762000128620001bb565b5b60006200013986828701620000df565b93505060206200014c86828701620000c8565b92505060406200015f86828701620000f6565b9150509250925092565b6000620001768262000191565b9050919050565b60006200018a8262000169565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600080fd5b620001cb8162000169565b8114620001d757600080fd5b50565b620001e5816200017d565b8114620001f157600080fd5b50565b620001ff81620001b1565b81146200020b57600080fd5b50565b613115806200021e6000396000f3fe6080604052600436106100865760003560e01c8063a666cab911610059578063a666cab914610153578063be3576161461017e578063d10bb868146101a7578063ddca3f43146101d0578063f851a440146101fb57610086565b8063150a64221461008b5780632c7bdd4b146100b65780632f81f8bb146100fa5780636208d89c1461012a575b600080fd5b34801561009757600080fd5b506100a0610226565b6040516100ad9190612208565b60405180910390f35b3480156100c257600080fd5b506100dd60048036038101906100d89190611a83565b61022c565b6040516100f1989796959493929190612183565b60405180910390f35b610114600480360381019061010f9190611a3a565b6103e6565b6040516101219190612208565b60405180910390f35b34801561013657600080fd5b50610151600480360381019061014c9190611a83565b610584565b005b34801561015f57600080fd5b50610168610a46565b60405161017591906120b6565b60405180910390f35b34801561018a57600080fd5b506101a560048036038101906101a09190611a83565b610a6a565b005b3480156101b357600080fd5b506101ce60048036038101906101c99190611add565b610bba565b005b3480156101dc57600080fd5b506101e5611466565b6040516101f29190612208565b60405180910390f35b34801561020757600080fd5b5061021061146c565b60405161021d9190611f5a565b60405180910390f35b60035481565b60046020528060005260406000206000915090508060000160009054906101000a900462ffffff16908060000160039054906101000a900464ffffffffff16908060000160089054906101000a90046fffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030180546102e990612975565b80601f016020809104026020016040519081016040528092919081815260200182805461031590612975565b80156103625780601f1061033757610100808354040283529160200191610362565b820191906000526020600020905b81548152906001019060200180831161034557829003601f168201915b5050505050908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600501604051806060016040529081600082015481526020016001820160009054906101000a900460ff1660ff1660ff1681526020016001820160019054906101000a900460ff1660ff1660ff1681525050905088565b60006002543414610423576040517fbd30efc600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81606001602081019061043691906119b3565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461049a576040517f864a486100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008260200160208101906104af9190611b51565b64ffffffffff1614156104ee576040517fe72e726200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006003600081546104ff906129c3565b9190508190559050826004600083815260200190815260200160002081816105279190612f32565b9050503373ffffffffffffffffffffffffffffffffffffffff16817f2c8135e62e42e4a58f701dba91adc10481d6ba72762bb94e531fcac47ec67cec8542604051610573929190612153565b60405180910390a380915050919050565b600060046000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900462ffffff1662ffffff1662ffffff1681526020016000820160039054906101000a900464ffffffffff1664ffffffffff1664ffffffffff1681526020016000820160089054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820180546106f790612975565b80601f016020809104026020016040519081016040528092919081815260200182805461072390612975565b80156107705780601f1061074557610100808354040283529160200191610770565b820191906000526020600020905b81548152906001019060200180831161075357829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160058201604051806060016040529081600082015481526020016001820160009054906101000a900460ff1660ff1660ff1681526020016001820160019054906101000a900460ff1660ff1660ff1681525050815250509050806060015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156108995750806080015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156108d0576040517f703ba1f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60046000838152602001908152602001600020600080820160006101000a81549062ffffff02191690556000820160036101000a81549064ffffffffff02191690556000820160086101000a8154906fffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600382016000610993919061180e565b6004820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600582016000808201600090556001820160006101000a81549060ff02191690556001820160016101000a81549060ff0219169055505050503373ffffffffffffffffffffffffffffffffffffffff16827fbc46b83d2699aadda501802c5fa9eaa3b74d7c1b2932266e9624dbad0d55487f42604051610a3a9190612208565b60405180910390a35050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610af1576040517f6209c08b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682604051610b3990611f45565b60006040518083038185875af1925050503d8060008114610b76576040519150601f19603f3d011682016040523d82523d6000602084013e610b7b565b606091505b5050905080610bb6576040517ffbefd20100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b600060046000868152602001908152602001600020604051806101000160405290816000820160009054906101000a900462ffffff1662ffffff1662ffffff1681526020016000820160039054906101000a900464ffffffffff1664ffffffffff1664ffffffffff1681526020016000820160089054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054610d2d90612975565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5990612975565b8015610da65780601f10610d7b57610100808354040283529160200191610da6565b820191906000526020600020905b815481529060010190602001808311610d8957829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160058201604051806060016040529081600082015481526020016001820160009054906101000a900460ff1660ff1660ff1681526020016001820160019054906101000a900460ff1660ff1660ff1681525050815250509050806080015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ec8576040517f44f1b40000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60046000868152602001908152602001600020600080820160006101000a81549062ffffff02191690556000820160036101000a81549064ffffffffff02191690556000820160086101000a8154906fffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600382016000610f8b919061180e565b6004820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600582016000808201600090556001820160006101000a81549060ff02191690556001820160016101000a81549060ff02191690555050505060006001612710836000015162ffffff16846040015161100b91906124d7565b6fffffffffffffffffffffffffffffffff1661102791906124a6565b83604001516fffffffffffffffffffffffffffffffff166110489190612450565b6110529190612450565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c92aeec1846060015185608001518660a0015186886020015164ffffffffff16426110ba9190612450565b8960c001518a60e001518e8e6040518a63ffffffff1660e01b81526004016110ea99989796959493929190611f75565b602060405180830381600087803b15801561110457600080fd5b505af1158015611118573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113c9190611ab0565b905061119583606001513060018660400151611158919061240a565b6fffffffffffffffffffffffffffffffff168660c0015173ffffffffffffffffffffffffffffffffffffffff16611492909392919063ffffffff16565b8260c0015173ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660016040518363ffffffff1660e01b81526004016111f592919061203b565b602060405180830381600087803b15801561120f57600080fd5b505af1158015611223573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112479190611a0d565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c99c44488260016040518363ffffffff1660e01b81526004016112a4929190612223565b600060405180830381600087803b1580156112be57600080fd5b505af11580156112d2573d6000803e3d6000fd5b5050505061131f836080015184604001516fffffffffffffffffffffffffffffffff168560c0015173ffffffffffffffffffffffffffffffffffffffff1661151b9092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff168160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e39986f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561139d57600080fd5b505afa1580156113b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d591906119e0565b73ffffffffffffffffffffffffffffffffffffffff167f49f89b2b71540cd91d6f6db8f1a06ddb75ad4bbd125e70cf5eb12712ea886f33874260405161141c92919061208d565b60405180910390a480877fc510677fdfd5e92ec5b4548c3fa33aa91c9a1b785c66320c8bc3a2bcb47ee310426040516114559190612208565b60405180910390a350505050505050565b60025481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611515846323b872dd60e01b8585856040516024016114b393929190612004565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506115a1565b50505050565b61159c8363a9059cbb60e01b848460405160240161153a929190612064565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506115a1565b505050565b6000611603826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166116689092919063ffffffff16565b905060008151111561166357808060200190518101906116239190611a0d565b611662576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165990612133565b60405180910390fd5b5b505050565b60606116778484600085611680565b90509392505050565b6060824710156116c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116bc906120f3565b60405180910390fd5b6116ce85611794565b61170d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170490612113565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516117369190611f2e565b60006040518083038185875af1925050503d8060008114611773576040519150601f19603f3d011682016040523d82523d6000602084013e611778565b606091505b50915091506117888282866117a7565b92505050949350505050565b600080823b905060008111915050919050565b606083156117b757829050611807565b6000835111156117ca5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117fe91906120d1565b60405180910390fd5b9392505050565b50805461181a90612975565b6000825580601f1061182c575061184b565b601f01602090049060005260206000209081019061184a919061184e565b5b50565b5b8082111561186757600081600090555060010161184f565b5090565b60008135905061187a81613022565b92915050565b60008151905061188f81613022565b92915050565b6000815190506118a481613039565b92915050565b6000813590506118b981613050565b92915050565b60008083601f8401126118d5576118d4612bc2565b5b8235905067ffffffffffffffff8111156118f2576118f1612bbd565b5b60208301915083600182028301111561190e5761190d612bdb565b5b9250929050565b6000610140828403121561192c5761192b612bcc565b5b81905092915050565b60008135905061194481613067565b92915050565b6000813590506119598161307e565b92915050565b60008135905061196e81613095565b92915050565b60008151905061198381613095565b92915050565b600081359050611998816130ac565b92915050565b6000813590506119ad816130c3565b92915050565b6000602082840312156119c9576119c8612bef565b5b60006119d78482850161186b565b91505092915050565b6000602082840312156119f6576119f5612bef565b5b6000611a0484828501611880565b91505092915050565b600060208284031215611a2357611a22612bef565b5b6000611a3184828501611895565b91505092915050565b600060208284031215611a5057611a4f612bef565b5b600082013567ffffffffffffffff811115611a6e57611a6d612be5565b5b611a7a84828501611915565b91505092915050565b600060208284031215611a9957611a98612bef565b5b6000611aa78482850161195f565b91505092915050565b600060208284031215611ac657611ac5612bef565b5b6000611ad484828501611974565b91505092915050565b60008060008060608587031215611af757611af6612bef565b5b6000611b058782880161195f565b945050602085013567ffffffffffffffff811115611b2657611b25612be5565b5b611b32878288016118bf565b93509350506040611b45878288016118aa565b91505092959194509250565b600060208284031215611b6757611b66612bef565b5b6000611b7584828501611989565b91505092915050565b611b8781612567565b82525050565b611b9681612567565b82525050565b611ba581612585565b82525050565b611bb481612585565b82525050565b6000611bc5826122c4565b611bcf81856122e5565b9350611bdf8185602086016127ca565b80840191505092915050565b611bf481612649565b82525050565b611c038161265b565b82525050565b6000611c1583856122f0565b9350611c228385846127bb565b611c2b83612bf4565b840190509392505050565b6000611c428385612301565b9350611c4f8385846127bb565b611c5883612bf4565b840190509392505050565b6000611c6e826122da565b611c788185612301565b9350611c888185602086016127ca565b611c9181612bf4565b840191505092915050565b6000611ca9602683612301565b9150611cb482612c78565b604082019050919050565b6000611ccc6000836122e5565b9150611cd782612cc7565b600082019050919050565b6000611cef601d83612301565b9150611cfa82612cca565b602082019050919050565b6000611d12602a83612301565b9150611d1d82612cf3565b604082019050919050565b60006101408301611d3c60008401846123c5565b611d496000860182611ed4565b50611d5760208401846123dc565b611d646020860182611f01565b50611d7260408401846123ae565b611d7f6040860182611eb6565b50611d8d6060840184612312565b611d9a6060860182611b7e565b50611da86080840184612312565b611db56080860182611b7e565b50611dc360a0840184612340565b85830360a0870152611dd6838284611c09565b92505050611de760c0840184612312565b611df460c0860182611b7e565b50611e0260e08401846123a3565b611e0f60e0860182611e1a565b508091505092915050565b60608201611e2b6000830183612329565b611e386000850182611b9c565b50611e4660208301836123f3565b611e536020850182611f1f565b50611e6160408301836123f3565b611e6e6040850182611f1f565b50505050565b606082016000820151611e8a6000850182611b9c565b506020820151611e9d6020850182611f1f565b506040820151611eb06040850182611f1f565b50505050565b611ebf8161258f565b82525050565b611ece8161258f565b82525050565b611edd816125cb565b82525050565b611eec816125cb565b82525050565b611efb816125da565b82525050565b611f0a816125e4565b82525050565b611f19816125e4565b82525050565b611f28816125f5565b82525050565b6000611f3a8284611bba565b915081905092915050565b6000611f5082611cbf565b9150819050919050565b6000602082019050611f6f6000830184611b8d565b92915050565b600061014082019050611f8b600083018c611b8d565b611f98602083018b611b8d565b8181036040830152611faa818a611c63565b9050611fb96060830189611ef2565b611fc66080830188611ef2565b611fd360a0830187611b8d565b611fe060c0830186611e74565b818103610120830152611ff4818486611c36565b90509a9950505050505050505050565b60006060820190506120196000830186611b8d565b6120266020830185611b8d565b6120336040830184611ef2565b949350505050565b60006040820190506120506000830185611b8d565b61205d6020830184611bfa565b9392505050565b60006040820190506120796000830185611b8d565b6120866020830184611ef2565b9392505050565b60006040820190506120a26000830185611bab565b6120af6020830184611ef2565b9392505050565b60006020820190506120cb6000830184611beb565b92915050565b600060208201905081810360008301526120eb8184611c63565b905092915050565b6000602082019050818103600083015261210c81611c9c565b9050919050565b6000602082019050818103600083015261212c81611ce2565b9050919050565b6000602082019050818103600083015261214c81611d05565b9050919050565b6000604082019050818103600083015261216d8185611d28565b905061217c6020830184611ef2565b9392505050565b600061014082019050612199600083018b611ee3565b6121a6602083018a611f10565b6121b36040830189611ec5565b6121c06060830188611b8d565b6121cd6080830187611b8d565b81810360a08301526121df8186611c63565b90506121ee60c0830185611b8d565b6121fb60e0830184611e74565b9998505050505050505050565b600060208201905061221d6000830184611ef2565b92915050565b60006040820190506122386000830185611ef2565b6122456020830184611bfa565b9392505050565b6000808335600160200384360303811261226957612268612bd1565b5b80840192508235915067ffffffffffffffff82111561228b5761228a612bc7565b5b6020830192506001820236038313156122a7576122a6612be0565b5b509250929050565b60008190508160005260206000209050919050565b600081519050919050565b600082905092915050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000612321602084018461186b565b905092915050565b600061233860208401846118aa565b905092915050565b6000808335600160200384360303811261235d5761235c612bea565b5b83810192508235915060208301925067ffffffffffffffff82111561238557612384612bb8565b5b60018202360384131561239b5761239a612bd6565b5b509250929050565b600082905092915050565b60006123bd6020840184611935565b905092915050565b60006123d4602084018461194a565b905092915050565b60006123eb6020840184611989565b905092915050565b6000612402602084018461199e565b905092915050565b60006124158261258f565b91506124208361258f565b9250826fffffffffffffffffffffffffffffffff0382111561244557612444612a2a565b5b828201905092915050565b600061245b826125da565b9150612466836125da565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561249b5761249a612a2a565b5b828201905092915050565b60006124b1826125da565b91506124bc836125da565b9250826124cc576124cb612a59565b5b828204905092915050565b60006124e28261258f565b91506124ed8361258f565b9250816fffffffffffffffffffffffffffffffff048311821515161561251657612515612a2a565b5b828202905092915050565b601f82111561256257612533816122af565b61253c84612965565b8101602085101561254b578190505b61255f61255785612965565b830182612602565b50505b505050565b6000612572826125ab565b9050919050565b60008115159050919050565b6000819050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b600064ffffffffff82169050919050565b600060ff82169050919050565b5b8181101561262157612616600082612c60565b600181019050612603565b5050565b60006126308261267f565b9050919050565b600061264282612585565b9050919050565b60006126548261267f565b9050919050565b6000612666826125da565b9050919050565b60006126788261258f565b9050919050565b600061268a82612691565b9050919050565b600061269c826125ab565b9050919050565b60006126ae826125cb565b9050919050565b60006126c0826125da565b9050919050565b60006126d2826125e4565b9050919050565b60006126e4826125f5565b9050919050565b6126f583836122cf565b67ffffffffffffffff81111561270e5761270d612ab7565b5b6127188254612975565b612723828285612521565b6000601f8311600181146127525760008415612740578287013590505b61274a85826129a7565b8655506127b2565b601f198416612760866122af565b60005b8281101561278857848901358255600182019150602085019450602081019050612763565b868310156127a557848901356127a1601f891682612a0c565b8355505b6001600288020188555050505b50505050505050565b82818337600083830152505050565b60005b838110156127e85780820151818401526020810190506127cd565b838111156127f7576000848401525b50505050565b60008101600083018061280f81612b76565b905061281b8184612f4e565b50505060008101602083018061283081612b8c565b905061283c8184612fb7565b50505060008101604083018061285181612b60565b905061285d8184612fda565b50505060018101606083018061287281612b34565b905061287e8184612edc565b50505060028101608083018061289381612b34565b905061289f8184612edc565b5050506003810160a083016128b4818561224c565b6128bf818386612f22565b505050506004810160c08301806128d581612b34565b90506128e18184612edc565b5050506005810160e08301806128f78184612f40565b5050505050565b60008101600083018061291081612b4a565b905061291c8184612eff565b50505060018101602083018061293181612ba2565b905061293d8184612f71565b50505060018101604083018061295281612ba2565b905061295e8184612f94565b5050505050565b60006020601f8301049050919050565b6000600282049050600182168061298d57607f821691505b602082108114156129a1576129a0612a88565b5b50919050565b60006129b38383612a0c565b9150826002028217905092915050565b60006129ce826125da565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612a0157612a00612a2a565b5b600182019050919050565b6000612a1d60001984600802612c53565b1980831691505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000819050919050565b6000612afb82612c46565b9050919050565b6000819050919050565b6000819050919050565b6000819050919050565b6000819050919050565b6000819050919050565b60008135612b4181613022565b80915050919050565b60008135612b5781613050565b80915050919050565b60008135612b6d81613067565b80915050919050565b60008135612b838161307e565b80915050919050565b60008135612b99816130ac565b80915050919050565b60008135612baf816130c3565b80915050919050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160001b9050919050565b60008160181b9050919050565b60008160401b9050919050565b60008160081b9050919050565b600082821b905092915050565b60008160001c9050919050565b600082821c905092915050565b612c686130da565b612c73818484612ffd565b505050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b50565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600077ffffffffffffffffffffffffffffffff0000000000000000612d6684612c1f565b9350801983169250808416831791505092915050565b600060ff612d8984612c05565b9350801983169250808416831791505092915050565b600061ff00612dad84612c2c565b9350801983169250808416831791505092915050565b600073ffffffffffffffffffffffffffffffffffffffff612de384612c05565b9350801983169250808416831791505092915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612e2584612c05565b9350801983169250808416831791505092915050565b600062ffffff612e4a84612c05565b9350801983169250808416831791505092915050565b600067ffffffffff000000612e7484612c12565b9350801983169250808416831791505092915050565b600060088302612eba7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612c39565b612ec48683612c39565b95508019841693508086168417925050509392505050565b612ee582612625565b612ef8612ef182612ae6565b8354612dc3565b8255505050565b612f0882612637565b612f1b612f1482612af0565b8354612df9565b8255505050565b612f2d8383836126eb565b505050565b612f3c82826127fd565b5050565b612f4a82826128fe565b5050565b612f57826126a3565b612f6a612f6382612b0c565b8354612e3b565b8255505050565b612f7a826126d9565b612f8d612f8682612b2a565b8354612d7c565b8255505050565b612f9d826126d9565b612fb0612fa982612b2a565b8354612d9f565b8255505050565b612fc0826126c7565b612fd3612fcc82612b20565b8354612e60565b8255505050565b612fe38261266d565b612ff6612fef82612b02565b8354612d42565b8255505050565b613006836126b5565b61301a61301282612b16565b848454612e8a565b825550505050565b61302b81612567565b811461303657600080fd5b50565b61304281612579565b811461304d57600080fd5b50565b61305981612585565b811461306457600080fd5b50565b6130708161258f565b811461307b57600080fd5b50565b613087816125cb565b811461309257600080fd5b50565b61309e816125da565b81146130a957600080fd5b50565b6130b5816125e4565b81146130c057600080fd5b50565b6130cc816125f5565b81146130d757600080fd5b50565b60009056fea2646970667358221220a6745d04c7639c120a809fb367eea02ae5a2db897220ac42a58ce38149f2864664736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c8063a666cab911610059578063a666cab914610153578063be3576161461017e578063d10bb868146101a7578063ddca3f43146101d0578063f851a440146101fb57610086565b8063150a64221461008b5780632c7bdd4b146100b65780632f81f8bb146100fa5780636208d89c1461012a575b600080fd5b34801561009757600080fd5b506100a0610226565b6040516100ad9190612208565b60405180910390f35b3480156100c257600080fd5b506100dd60048036038101906100d89190611a83565b61022c565b6040516100f1989796959493929190612183565b60405180910390f35b610114600480360381019061010f9190611a3a565b6103e6565b6040516101219190612208565b60405180910390f35b34801561013657600080fd5b50610151600480360381019061014c9190611a83565b610584565b005b34801561015f57600080fd5b50610168610a46565b60405161017591906120b6565b60405180910390f35b34801561018a57600080fd5b506101a560048036038101906101a09190611a83565b610a6a565b005b3480156101b357600080fd5b506101ce60048036038101906101c99190611add565b610bba565b005b3480156101dc57600080fd5b506101e5611466565b6040516101f29190612208565b60405180910390f35b34801561020757600080fd5b5061021061146c565b60405161021d9190611f5a565b60405180910390f35b60035481565b60046020528060005260406000206000915090508060000160009054906101000a900462ffffff16908060000160039054906101000a900464ffffffffff16908060000160089054906101000a90046fffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030180546102e990612975565b80601f016020809104026020016040519081016040528092919081815260200182805461031590612975565b80156103625780601f1061033757610100808354040283529160200191610362565b820191906000526020600020905b81548152906001019060200180831161034557829003601f168201915b5050505050908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600501604051806060016040529081600082015481526020016001820160009054906101000a900460ff1660ff1660ff1681526020016001820160019054906101000a900460ff1660ff1660ff1681525050905088565b60006002543414610423576040517fbd30efc600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81606001602081019061043691906119b3565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461049a576040517f864a486100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008260200160208101906104af9190611b51565b64ffffffffff1614156104ee576040517fe72e726200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006003600081546104ff906129c3565b9190508190559050826004600083815260200190815260200160002081816105279190612f32565b9050503373ffffffffffffffffffffffffffffffffffffffff16817f2c8135e62e42e4a58f701dba91adc10481d6ba72762bb94e531fcac47ec67cec8542604051610573929190612153565b60405180910390a380915050919050565b600060046000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900462ffffff1662ffffff1662ffffff1681526020016000820160039054906101000a900464ffffffffff1664ffffffffff1664ffffffffff1681526020016000820160089054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820180546106f790612975565b80601f016020809104026020016040519081016040528092919081815260200182805461072390612975565b80156107705780601f1061074557610100808354040283529160200191610770565b820191906000526020600020905b81548152906001019060200180831161075357829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160058201604051806060016040529081600082015481526020016001820160009054906101000a900460ff1660ff1660ff1681526020016001820160019054906101000a900460ff1660ff1660ff1681525050815250509050806060015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156108995750806080015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156108d0576040517f703ba1f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60046000838152602001908152602001600020600080820160006101000a81549062ffffff02191690556000820160036101000a81549064ffffffffff02191690556000820160086101000a8154906fffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600382016000610993919061180e565b6004820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600582016000808201600090556001820160006101000a81549060ff02191690556001820160016101000a81549060ff0219169055505050503373ffffffffffffffffffffffffffffffffffffffff16827fbc46b83d2699aadda501802c5fa9eaa3b74d7c1b2932266e9624dbad0d55487f42604051610a3a9190612208565b60405180910390a35050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610af1576040517f6209c08b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682604051610b3990611f45565b60006040518083038185875af1925050503d8060008114610b76576040519150601f19603f3d011682016040523d82523d6000602084013e610b7b565b606091505b5050905080610bb6576040517ffbefd20100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b600060046000868152602001908152602001600020604051806101000160405290816000820160009054906101000a900462ffffff1662ffffff1662ffffff1681526020016000820160039054906101000a900464ffffffffff1664ffffffffff1664ffffffffff1681526020016000820160089054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054610d2d90612975565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5990612975565b8015610da65780601f10610d7b57610100808354040283529160200191610da6565b820191906000526020600020905b815481529060010190602001808311610d8957829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160058201604051806060016040529081600082015481526020016001820160009054906101000a900460ff1660ff1660ff1681526020016001820160019054906101000a900460ff1660ff1660ff1681525050815250509050806080015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ec8576040517f44f1b40000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60046000868152602001908152602001600020600080820160006101000a81549062ffffff02191690556000820160036101000a81549064ffffffffff02191690556000820160086101000a8154906fffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600382016000610f8b919061180e565b6004820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600582016000808201600090556001820160006101000a81549060ff02191690556001820160016101000a81549060ff02191690555050505060006001612710836000015162ffffff16846040015161100b91906124d7565b6fffffffffffffffffffffffffffffffff1661102791906124a6565b83604001516fffffffffffffffffffffffffffffffff166110489190612450565b6110529190612450565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c92aeec1846060015185608001518660a0015186886020015164ffffffffff16426110ba9190612450565b8960c001518a60e001518e8e6040518a63ffffffff1660e01b81526004016110ea99989796959493929190611f75565b602060405180830381600087803b15801561110457600080fd5b505af1158015611118573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113c9190611ab0565b905061119583606001513060018660400151611158919061240a565b6fffffffffffffffffffffffffffffffff168660c0015173ffffffffffffffffffffffffffffffffffffffff16611492909392919063ffffffff16565b8260c0015173ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660016040518363ffffffff1660e01b81526004016111f592919061203b565b602060405180830381600087803b15801561120f57600080fd5b505af1158015611223573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112479190611a0d565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c99c44488260016040518363ffffffff1660e01b81526004016112a4929190612223565b600060405180830381600087803b1580156112be57600080fd5b505af11580156112d2573d6000803e3d6000fd5b5050505061131f836080015184604001516fffffffffffffffffffffffffffffffff168560c0015173ffffffffffffffffffffffffffffffffffffffff1661151b9092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff168160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e39986f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561139d57600080fd5b505afa1580156113b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d591906119e0565b73ffffffffffffffffffffffffffffffffffffffff167f49f89b2b71540cd91d6f6db8f1a06ddb75ad4bbd125e70cf5eb12712ea886f33874260405161141c92919061208d565b60405180910390a480877fc510677fdfd5e92ec5b4548c3fa33aa91c9a1b785c66320c8bc3a2bcb47ee310426040516114559190612208565b60405180910390a350505050505050565b60025481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611515846323b872dd60e01b8585856040516024016114b393929190612004565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506115a1565b50505050565b61159c8363a9059cbb60e01b848460405160240161153a929190612064565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506115a1565b505050565b6000611603826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166116689092919063ffffffff16565b905060008151111561166357808060200190518101906116239190611a0d565b611662576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165990612133565b60405180910390fd5b5b505050565b60606116778484600085611680565b90509392505050565b6060824710156116c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116bc906120f3565b60405180910390fd5b6116ce85611794565b61170d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170490612113565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516117369190611f2e565b60006040518083038185875af1925050503d8060008114611773576040519150601f19603f3d011682016040523d82523d6000602084013e611778565b606091505b50915091506117888282866117a7565b92505050949350505050565b600080823b905060008111915050919050565b606083156117b757829050611807565b6000835111156117ca5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117fe91906120d1565b60405180910390fd5b9392505050565b50805461181a90612975565b6000825580601f1061182c575061184b565b601f01602090049060005260206000209081019061184a919061184e565b5b50565b5b8082111561186757600081600090555060010161184f565b5090565b60008135905061187a81613022565b92915050565b60008151905061188f81613022565b92915050565b6000815190506118a481613039565b92915050565b6000813590506118b981613050565b92915050565b60008083601f8401126118d5576118d4612bc2565b5b8235905067ffffffffffffffff8111156118f2576118f1612bbd565b5b60208301915083600182028301111561190e5761190d612bdb565b5b9250929050565b6000610140828403121561192c5761192b612bcc565b5b81905092915050565b60008135905061194481613067565b92915050565b6000813590506119598161307e565b92915050565b60008135905061196e81613095565b92915050565b60008151905061198381613095565b92915050565b600081359050611998816130ac565b92915050565b6000813590506119ad816130c3565b92915050565b6000602082840312156119c9576119c8612bef565b5b60006119d78482850161186b565b91505092915050565b6000602082840312156119f6576119f5612bef565b5b6000611a0484828501611880565b91505092915050565b600060208284031215611a2357611a22612bef565b5b6000611a3184828501611895565b91505092915050565b600060208284031215611a5057611a4f612bef565b5b600082013567ffffffffffffffff811115611a6e57611a6d612be5565b5b611a7a84828501611915565b91505092915050565b600060208284031215611a9957611a98612bef565b5b6000611aa78482850161195f565b91505092915050565b600060208284031215611ac657611ac5612bef565b5b6000611ad484828501611974565b91505092915050565b60008060008060608587031215611af757611af6612bef565b5b6000611b058782880161195f565b945050602085013567ffffffffffffffff811115611b2657611b25612be5565b5b611b32878288016118bf565b93509350506040611b45878288016118aa565b91505092959194509250565b600060208284031215611b6757611b66612bef565b5b6000611b7584828501611989565b91505092915050565b611b8781612567565b82525050565b611b9681612567565b82525050565b611ba581612585565b82525050565b611bb481612585565b82525050565b6000611bc5826122c4565b611bcf81856122e5565b9350611bdf8185602086016127ca565b80840191505092915050565b611bf481612649565b82525050565b611c038161265b565b82525050565b6000611c1583856122f0565b9350611c228385846127bb565b611c2b83612bf4565b840190509392505050565b6000611c428385612301565b9350611c4f8385846127bb565b611c5883612bf4565b840190509392505050565b6000611c6e826122da565b611c788185612301565b9350611c888185602086016127ca565b611c9181612bf4565b840191505092915050565b6000611ca9602683612301565b9150611cb482612c78565b604082019050919050565b6000611ccc6000836122e5565b9150611cd782612cc7565b600082019050919050565b6000611cef601d83612301565b9150611cfa82612cca565b602082019050919050565b6000611d12602a83612301565b9150611d1d82612cf3565b604082019050919050565b60006101408301611d3c60008401846123c5565b611d496000860182611ed4565b50611d5760208401846123dc565b611d646020860182611f01565b50611d7260408401846123ae565b611d7f6040860182611eb6565b50611d8d6060840184612312565b611d9a6060860182611b7e565b50611da86080840184612312565b611db56080860182611b7e565b50611dc360a0840184612340565b85830360a0870152611dd6838284611c09565b92505050611de760c0840184612312565b611df460c0860182611b7e565b50611e0260e08401846123a3565b611e0f60e0860182611e1a565b508091505092915050565b60608201611e2b6000830183612329565b611e386000850182611b9c565b50611e4660208301836123f3565b611e536020850182611f1f565b50611e6160408301836123f3565b611e6e6040850182611f1f565b50505050565b606082016000820151611e8a6000850182611b9c565b506020820151611e9d6020850182611f1f565b506040820151611eb06040850182611f1f565b50505050565b611ebf8161258f565b82525050565b611ece8161258f565b82525050565b611edd816125cb565b82525050565b611eec816125cb565b82525050565b611efb816125da565b82525050565b611f0a816125e4565b82525050565b611f19816125e4565b82525050565b611f28816125f5565b82525050565b6000611f3a8284611bba565b915081905092915050565b6000611f5082611cbf565b9150819050919050565b6000602082019050611f6f6000830184611b8d565b92915050565b600061014082019050611f8b600083018c611b8d565b611f98602083018b611b8d565b8181036040830152611faa818a611c63565b9050611fb96060830189611ef2565b611fc66080830188611ef2565b611fd360a0830187611b8d565b611fe060c0830186611e74565b818103610120830152611ff4818486611c36565b90509a9950505050505050505050565b60006060820190506120196000830186611b8d565b6120266020830185611b8d565b6120336040830184611ef2565b949350505050565b60006040820190506120506000830185611b8d565b61205d6020830184611bfa565b9392505050565b60006040820190506120796000830185611b8d565b6120866020830184611ef2565b9392505050565b60006040820190506120a26000830185611bab565b6120af6020830184611ef2565b9392505050565b60006020820190506120cb6000830184611beb565b92915050565b600060208201905081810360008301526120eb8184611c63565b905092915050565b6000602082019050818103600083015261210c81611c9c565b9050919050565b6000602082019050818103600083015261212c81611ce2565b9050919050565b6000602082019050818103600083015261214c81611d05565b9050919050565b6000604082019050818103600083015261216d8185611d28565b905061217c6020830184611ef2565b9392505050565b600061014082019050612199600083018b611ee3565b6121a6602083018a611f10565b6121b36040830189611ec5565b6121c06060830188611b8d565b6121cd6080830187611b8d565b81810360a08301526121df8186611c63565b90506121ee60c0830185611b8d565b6121fb60e0830184611e74565b9998505050505050505050565b600060208201905061221d6000830184611ef2565b92915050565b60006040820190506122386000830185611ef2565b6122456020830184611bfa565b9392505050565b6000808335600160200384360303811261226957612268612bd1565b5b80840192508235915067ffffffffffffffff82111561228b5761228a612bc7565b5b6020830192506001820236038313156122a7576122a6612be0565b5b509250929050565b60008190508160005260206000209050919050565b600081519050919050565b600082905092915050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000612321602084018461186b565b905092915050565b600061233860208401846118aa565b905092915050565b6000808335600160200384360303811261235d5761235c612bea565b5b83810192508235915060208301925067ffffffffffffffff82111561238557612384612bb8565b5b60018202360384131561239b5761239a612bd6565b5b509250929050565b600082905092915050565b60006123bd6020840184611935565b905092915050565b60006123d4602084018461194a565b905092915050565b60006123eb6020840184611989565b905092915050565b6000612402602084018461199e565b905092915050565b60006124158261258f565b91506124208361258f565b9250826fffffffffffffffffffffffffffffffff0382111561244557612444612a2a565b5b828201905092915050565b600061245b826125da565b9150612466836125da565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561249b5761249a612a2a565b5b828201905092915050565b60006124b1826125da565b91506124bc836125da565b9250826124cc576124cb612a59565b5b828204905092915050565b60006124e28261258f565b91506124ed8361258f565b9250816fffffffffffffffffffffffffffffffff048311821515161561251657612515612a2a565b5b828202905092915050565b601f82111561256257612533816122af565b61253c84612965565b8101602085101561254b578190505b61255f61255785612965565b830182612602565b50505b505050565b6000612572826125ab565b9050919050565b60008115159050919050565b6000819050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b600064ffffffffff82169050919050565b600060ff82169050919050565b5b8181101561262157612616600082612c60565b600181019050612603565b5050565b60006126308261267f565b9050919050565b600061264282612585565b9050919050565b60006126548261267f565b9050919050565b6000612666826125da565b9050919050565b60006126788261258f565b9050919050565b600061268a82612691565b9050919050565b600061269c826125ab565b9050919050565b60006126ae826125cb565b9050919050565b60006126c0826125da565b9050919050565b60006126d2826125e4565b9050919050565b60006126e4826125f5565b9050919050565b6126f583836122cf565b67ffffffffffffffff81111561270e5761270d612ab7565b5b6127188254612975565b612723828285612521565b6000601f8311600181146127525760008415612740578287013590505b61274a85826129a7565b8655506127b2565b601f198416612760866122af565b60005b8281101561278857848901358255600182019150602085019450602081019050612763565b868310156127a557848901356127a1601f891682612a0c565b8355505b6001600288020188555050505b50505050505050565b82818337600083830152505050565b60005b838110156127e85780820151818401526020810190506127cd565b838111156127f7576000848401525b50505050565b60008101600083018061280f81612b76565b905061281b8184612f4e565b50505060008101602083018061283081612b8c565b905061283c8184612fb7565b50505060008101604083018061285181612b60565b905061285d8184612fda565b50505060018101606083018061287281612b34565b905061287e8184612edc565b50505060028101608083018061289381612b34565b905061289f8184612edc565b5050506003810160a083016128b4818561224c565b6128bf818386612f22565b505050506004810160c08301806128d581612b34565b90506128e18184612edc565b5050506005810160e08301806128f78184612f40565b5050505050565b60008101600083018061291081612b4a565b905061291c8184612eff565b50505060018101602083018061293181612ba2565b905061293d8184612f71565b50505060018101604083018061295281612ba2565b905061295e8184612f94565b5050505050565b60006020601f8301049050919050565b6000600282049050600182168061298d57607f821691505b602082108114156129a1576129a0612a88565b5b50919050565b60006129b38383612a0c565b9150826002028217905092915050565b60006129ce826125da565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612a0157612a00612a2a565b5b600182019050919050565b6000612a1d60001984600802612c53565b1980831691505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000819050919050565b6000612afb82612c46565b9050919050565b6000819050919050565b6000819050919050565b6000819050919050565b6000819050919050565b6000819050919050565b60008135612b4181613022565b80915050919050565b60008135612b5781613050565b80915050919050565b60008135612b6d81613067565b80915050919050565b60008135612b838161307e565b80915050919050565b60008135612b99816130ac565b80915050919050565b60008135612baf816130c3565b80915050919050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160001b9050919050565b60008160181b9050919050565b60008160401b9050919050565b60008160081b9050919050565b600082821b905092915050565b60008160001c9050919050565b600082821c905092915050565b612c686130da565b612c73818484612ffd565b505050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b50565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600077ffffffffffffffffffffffffffffffff0000000000000000612d6684612c1f565b9350801983169250808416831791505092915050565b600060ff612d8984612c05565b9350801983169250808416831791505092915050565b600061ff00612dad84612c2c565b9350801983169250808416831791505092915050565b600073ffffffffffffffffffffffffffffffffffffffff612de384612c05565b9350801983169250808416831791505092915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612e2584612c05565b9350801983169250808416831791505092915050565b600062ffffff612e4a84612c05565b9350801983169250808416831791505092915050565b600067ffffffffff000000612e7484612c12565b9350801983169250808416831791505092915050565b600060088302612eba7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612c39565b612ec48683612c39565b95508019841693508086168417925050509392505050565b612ee582612625565b612ef8612ef182612ae6565b8354612dc3565b8255505050565b612f0882612637565b612f1b612f1482612af0565b8354612df9565b8255505050565b612f2d8383836126eb565b505050565b612f3c82826127fd565b5050565b612f4a82826128fe565b5050565b612f57826126a3565b612f6a612f6382612b0c565b8354612e3b565b8255505050565b612f7a826126d9565b612f8d612f8682612b2a565b8354612d7c565b8255505050565b612f9d826126d9565b612fb0612fa982612b2a565b8354612d9f565b8255505050565b612fc0826126c7565b612fd3612fcc82612b20565b8354612e60565b8255505050565b612fe38261266d565b612ff6612fef82612b02565b8354612d42565b8255505050565b613006836126b5565b61301a61301282612b16565b848454612e8a565b825550505050565b61302b81612567565b811461303657600080fd5b50565b61304281612579565b811461304d57600080fd5b50565b61305981612585565b811461306457600080fd5b50565b6130708161258f565b811461307b57600080fd5b50565b613087816125cb565b811461309257600080fd5b50565b61309e816125da565b81146130a957600080fd5b50565b6130b5816125e4565b81146130c057600080fd5b50565b6130cc816125f5565b81146130d757600080fd5b50565b60009056fea2646970667358221220a6745d04c7639c120a809fb367eea02ae5a2db897220ac42a58ce38149f2864664736f6c63430008070033",
  "devdoc": {
    "author": "@colinnielsen",
    "kind": "dev",
    "methods": {
      "acceptLoan(uint256,string,bytes32)": {
        "params": {
          "offerId": "the offerId to acceot",
          "tag": "a bytes32 tag for the frontend",
          "tokenURI": "the tokenURI for the underlying claim"
        }
      },
      "offerLoan((uint24,uint40,uint128,address,address,string,address,(bytes32,uint8,uint8)))": {
        "params": {
          "offer": "claim creation params and loan info"
        }
      },
      "rejectLoanOffer(uint256)": {
        "params": {
          "offerId": "the offerId to reject"
        }
      }
    },
    "title": "FrendLend POC",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptLoan(uint256,string,bytes32)": {
        "notice": "WARNING: will not work with fee on transfer tokensSPEC:     Allows a debtor to accept a loan offer, and receive payment     This function will:         RES1. Delete the offer from storage         RES2. Creates a new claim for the loan amount + interest         RES3. Transfers the offered loan amount from the creditor to the debtor         RES4. Puts the claim into a non-rejectable repaying state by paying 1 wei         RES5. Emits a BullaTagUpdated event with the claimId, the debtor address, a tag, and the current timestamp         RES6. Emits a LoanOfferAccepted event with the offerId, the accepted claimId, and the current timestamp     Given the following:         P1. the current msg.sender is the debtor listed on the offer (covers: offer exists)"
      },
      "admin()": {
        "notice": "the admin of the contract"
      },
      "bullaClaim()": {
        "notice": "address of the Bulla Claim contract"
      },
      "fee()": {
        "notice": "the fee represented as the wei amount of the network's native token"
      },
      "loanOfferCount()": {
        "notice": "the number of loan offers"
      },
      "loanOffers(uint256)": {
        "notice": "a mapping of id to the FinanceTerms offered by the creditor"
      },
      "offerLoan((uint24,uint40,uint128,address,address,string,address,(bytes32,uint8,uint8)))": {
        "notice": "SPEC:     Allows a user to create offer a loan to a potential debtor     This function will:         RES1. Increment the loan offer count in storage         RES2. Store the offer parameters         RES3. Emit a LoanOffered event with the offer parameters, the offerId, the creator, and the current timestamp         RETURNS: the offerId     Given the following:         P1. `msg.value == fee`         P2. `msg.sender == offer.creditor`         P3. `terms.interestBPS < type(uint24).max`         P4. `terms.termLength < type(uint40).max`         P5. `terms.termLength > 0`"
      },
      "rejectLoanOffer(uint256)": {
        "notice": "SPEC:     Allows a debtor or a offerrer to reject (or rescind) a loan offer     This function will:         RES1. Delete the offer from storage         RES2. Emit a LoanOfferRejected event with the offerId, the msg.sender, and the current timestamp     Given the following:         P1. the current msg.sender is either the creditor or debtor (covers: offer exists)"
      },
      "withdrawFee(uint256)": {
        "notice": "SPEC:     allows an admin to withdraw `withdrawableFee` amount of tokens from this contract's balance     Given the following: `msg.sender == admin`"
      }
    },
    "notice": "An extension to BullaClaim V1 that allows a creditor to offer capital in exchange for a claimThis is experimental software, use at your own risk",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7032,
        "contract": "contracts/FrendLend.sol:FrendLend",
        "label": "bullaClaim",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IBullaClaim)7574"
      },
      {
        "astId": 7035,
        "contract": "contracts/FrendLend.sol:FrendLend",
        "label": "admin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7038,
        "contract": "contracts/FrendLend.sol:FrendLend",
        "label": "fee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 7041,
        "contract": "contracts/FrendLend.sol:FrendLend",
        "label": "loanOfferCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7047,
        "contract": "contracts/FrendLend.sol:FrendLend",
        "label": "loanOffers",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(LoanOffer)7028_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBullaClaim)7574": {
        "encoding": "inplace",
        "label": "contract IBullaClaim",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(LoanOffer)7028_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FrendLend.LoanOffer)",
        "numberOfBytes": "32",
        "value": "t_struct(LoanOffer)7028_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LoanOffer)7028_storage": {
        "encoding": "inplace",
        "label": "struct FrendLend.LoanOffer",
        "members": [
          {
            "astId": 7012,
            "contract": "contracts/FrendLend.sol:FrendLend",
            "label": "interestBPS",
            "offset": 0,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 7014,
            "contract": "contracts/FrendLend.sol:FrendLend",
            "label": "termLength",
            "offset": 3,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 7016,
            "contract": "contracts/FrendLend.sol:FrendLend",
            "label": "loanAmount",
            "offset": 8,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 7018,
            "contract": "contracts/FrendLend.sol:FrendLend",
            "label": "creditor",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 7020,
            "contract": "contracts/FrendLend.sol:FrendLend",
            "label": "debtor",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 7022,
            "contract": "contracts/FrendLend.sol:FrendLend",
            "label": "description",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 7024,
            "contract": "contracts/FrendLend.sol:FrendLend",
            "label": "claimToken",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 7027,
            "contract": "contracts/FrendLend.sol:FrendLend",
            "label": "attachment",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(Multihash)7403_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Multihash)7403_storage": {
        "encoding": "inplace",
        "label": "struct Multihash",
        "members": [
          {
            "astId": 7398,
            "contract": "contracts/FrendLend.sol:FrendLend",
            "label": "hash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 7400,
            "contract": "contracts/FrendLend.sol:FrendLend",
            "label": "hashFunction",
            "offset": 0,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 7402,
            "contract": "contracts/FrendLend.sol:FrendLend",
            "label": "size",
            "offset": 1,
            "slot": "1",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}