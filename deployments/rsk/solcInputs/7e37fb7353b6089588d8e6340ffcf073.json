{
  "language": "Solidity",
  "sources": {
    "contracts/BullaBanker.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.3;\n\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\n\nstruct BullaTag {\n    bytes32 creditorTag;\n    bytes32 debtorTag;\n}\nstruct Multihash {\n    bytes32 hash;\n    uint8 hashFunction;\n    uint8 size;\n}\n\ninterface IBullaClaim {\n    function init(\n        address _bullaManager,\n        address payable _owner,\n        address payable _creditor,\n        address payable _debtor,\n        string memory _description,\n        uint256 _claimAmount,\n        uint256 _dueBy\n    ) external;\n\n    function initMultihash(\n        address _bullaManager,\n        address payable _owner,\n        address payable _creditor,\n        address payable _debtor,\n        string memory _description,\n        uint256 _claimAmount,\n        uint256 _dueBy,\n        Multihash calldata _multihash\n    ) external;\n\n    function getCreditor() external view returns (address);\n\n    function getDebtor() external view returns (address);\n}\n\ncontract BullaBanker {\n    address public bullaManager;\n    mapping(address => BullaTag) public bullaTags;\n\n    address public claimImplementation;\n\n    event BullaTagUpdated(\n        address indexed bullaManager,\n        address indexed bullaClaim,\n        address indexed updatedBy,\n        bytes32 creditorTag,\n        bytes32 debtorTag,\n        uint256 blocktime\n    );\n\n    event BullaBankerCreated(\n        address indexed bullaManager,\n        address bullaBanker,\n        uint256 blocktime\n    );\n\n    constructor(address _bullaManager, address _claimImplementation) {\n        bullaManager = _bullaManager;\n        claimImplementation = _claimImplementation;\n        emit BullaBankerCreated(bullaManager, address(this), block.timestamp);\n    }\n\n    function createBullaClaim(\n        uint256 claimAmount,\n        address payable creditor,\n        address payable debtor,\n        string memory description,\n        bytes32 bullaTag,\n        uint256 dueBy\n    ) public {\n        address newClaimAddress = Clones.clone(claimImplementation);\n\n        IBullaClaim(newClaimAddress).init(\n            bullaManager,\n            payable(msg.sender),\n            creditor,\n            debtor,\n            description,\n            claimAmount,\n            dueBy\n        );\n\n        BullaTag memory newTag;\n        if (msg.sender == creditor) newTag.creditorTag = bullaTag;\n        if (msg.sender == debtor) newTag.debtorTag = bullaTag;\n        bullaTags[newClaimAddress] = newTag;\n\n        emit BullaTagUpdated(\n            bullaManager,\n            newClaimAddress,\n            msg.sender,\n            newTag.creditorTag,\n            newTag.debtorTag,\n            block.timestamp\n        );\n    }\n\n    function createBullaClaimMultihash(\n        uint256 claimAmount,\n        address payable creditor,\n        address payable debtor,\n        string memory description,\n        bytes32 bullaTag,\n        uint256 dueBy,\n        Multihash calldata multihash\n    ) external {\n        address newClaimAddress = Clones.clone(claimImplementation);\n\n        IBullaClaim(newClaimAddress).initMultihash(\n            bullaManager,\n            payable(msg.sender),\n            creditor,\n            debtor,\n            description,\n            claimAmount,\n            dueBy,\n            multihash\n        );\n\n        BullaTag memory newTag;\n        if (msg.sender == creditor) newTag.creditorTag = bullaTag;\n        if (msg.sender == debtor) newTag.debtorTag = bullaTag;\n        bullaTags[newClaimAddress] = newTag;\n\n        emit BullaTagUpdated(\n            bullaManager,\n            newClaimAddress,\n            msg.sender,\n            newTag.creditorTag,\n            newTag.debtorTag,\n            block.timestamp\n        );\n    }\n\n    function updateBullaTag(address _bullaClaim, bytes32 newTag) public {\n        IBullaClaim bullaClaim = IBullaClaim(_bullaClaim);\n        require(\n            msg.sender == bullaClaim.getCreditor() ||\n                msg.sender == bullaClaim.getDebtor()\n        );\n\n        if (msg.sender == bullaClaim.getCreditor())\n            bullaTags[_bullaClaim].creditorTag = newTag;\n        if (msg.sender == bullaClaim.getDebtor())\n            bullaTags[_bullaClaim].debtorTag = newTag;\n\n        emit BullaTagUpdated(\n            bullaManager,\n            address(bullaClaim),\n            msg.sender,\n            bullaTags[_bullaClaim].creditorTag,\n            bullaTags[_bullaClaim].debtorTag,\n            block.timestamp\n        );\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "contracts/BullaClaim.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.3;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\n\ninterface IBullaManager {\n    function getBullaBalance(address _holder) external view returns (uint256);\n\n    function getFeeInfo()\n        external\n        view\n        returns (\n            address payable collectionAddress,\n            uint32 feeBasisPoints,\n            uint32 bullaThreshold, //# of BULLA tokens held to get fee reduction\n            uint32 reducedFeeBasisPoints\n        );\n}\n\nabstract contract BullaClaim is Initializable {\n    enum ActionType {\n        Payment,\n        Reject,\n        Rescind\n    }\n    enum Status {\n        Pending,\n        Repaying,\n        Paid,\n        Rejected,\n        Rescinded\n    }\n\n    //https://medium.com/temporal-cloud/efficient-usable-and-cheap-storage-of-ipfs-hashes-in-solidity-smart-contracts-eb3bef129eba\n    //structure for storing IPFS hash that may hold documents\n    struct Multihash {\n        bytes32 hash;\n        uint8 hashFunction;\n        uint8 size;\n    }\n    Multihash public multihash;\n\n    IBullaManager internal bullaManager;\n    address payable public owner; //current owner of claim\n    address payable creditor;\n    address payable debtor;\n\n    uint256 public claimAmount;\n    uint256 public dueBy;\n    uint256 public paidAmount;\n    Status public status;\n    bool isInitialized;\n\n    //current price that owner is willing to transfer claim\n    uint256 public transferPrice;\n\n    modifier onlyCreditor() {\n        require(creditor == msg.sender, \"restricted to creditor\");\n        _;\n    }\n\n    modifier onlyDebtor() {\n        require(debtor == msg.sender, \"restricted to debtor\");\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(owner == msg.sender, \"restricted to owner\");\n        _;\n    }\n\n    event ClaimAction(\n        address indexed bullaManager,\n        address indexed bullaClaim,\n        ActionType actionType,\n        uint256 paymentAmount,\n        uint256 blocktime\n    );\n\n    event FeePaid(\n        address indexed bullaManager,\n        address indexed bullaClaim,\n        address indexed collectionAddress,\n        uint256 transactionFee,\n        uint256 blocktime\n    );\n\n    event MultihashAdded(\n        address bullaManager,\n        address indexed bullaClaim,\n        address indexed debtor,\n        address indexed creditor,\n        Multihash ipfsHash,\n        uint256 blocktime\n    );\n\n    event TransferPriceUpdated(\n        address indexed bullaClaim,\n        uint256 oldPrice,\n        uint256 newPrice,\n        uint256 blocktime\n    );\n\n    event ClaimTransferred(\n        address indexed bullaClaim,\n        address indexed oldOwner,\n        address indexed newOwner,\n        uint256 transferPrice,\n        uint256 blocktime\n    );\n\n    function setTransferPrice(uint256 newPrice) external onlyOwner {\n        require(owner == creditor, \"only owner can set price\");\n        uint256 oldPrice = transferPrice;\n        transferPrice = newPrice;\n        emit TransferPriceUpdated(\n            address(this),\n            oldPrice,\n            newPrice,\n            block.timestamp\n        );\n    }\n\n    function addMultihash(\n        bytes32 hash,\n        uint8 hashFunction,\n        uint8 size\n    ) public onlyOwner {\n        multihash = Multihash(hash, hashFunction, size);\n        emit MultihashAdded(\n            address(bullaManager),\n            address(this),\n            creditor,\n            debtor,\n            multihash,\n            block.timestamp\n        );\n    }\n\n    function emitActionEvent(ActionType actionType, uint256 _paymentAmount)\n        internal\n    {\n        emit ClaimAction(\n            address(bullaManager),\n            address(this),\n            actionType,\n            _paymentAmount,\n            block.timestamp\n        );\n    }\n\n    function rejectClaim() external payable onlyDebtor {\n        require(\n            status == Status.Pending,\n            \"cannot reject once payment has been made\"\n        );\n        status = Status.Rejected;\n        emitActionEvent(ActionType.Reject, 0);\n    }\n\n    function rescindClaim() external payable onlyCreditor {\n        require(\n            status == Status.Pending,\n            \"cannot rescind once payment has been made\"\n        );\n        status = Status.Rescinded;\n        emitActionEvent(ActionType.Rescind, 0);\n    }\n\n    function getCreditor() external view returns (address) {\n        return creditor;\n    }\n\n    function getDebtor() external view returns (address) {\n        return debtor;\n    }\n}\n\ncontract BullaClaimNative is BullaClaim {\n    event ClaimCreated(\n        address bullaManager,\n        address bullaClaim,\n        address owner,\n        address indexed creditor,\n        address indexed debtor,\n        string description,\n        uint256 claimAmount,\n        uint256 dueBy,\n        address indexed creator,\n        uint256 blocktime\n    );\n\n    function init(\n        address _bullaManager,\n        address payable _owner,\n        address payable _creditor,\n        address payable _debtor,\n        string memory _description,\n        uint256 _claimAmount,\n        uint256 _dueBy\n    ) public {\n        require(\n            _owner == _creditor || _owner == _debtor,\n            \"owner not a debtor or creditor\"\n        );\n        require(!isInitialized, \"already initialized\");\n        isInitialized = true;\n\n        bullaManager = IBullaManager(_bullaManager);\n        owner = _owner;\n        creditor = _creditor;\n        debtor = _debtor;\n        claimAmount = _claimAmount;\n        dueBy = _dueBy;\n\n        emit ClaimCreated(\n            _bullaManager,\n            address(this),\n            owner,\n            creditor,\n            debtor,\n            _description,\n            claimAmount,\n            dueBy,\n            msg.sender,\n            block.timestamp\n        );\n    }\n\n    function initMultihash(\n        address _bullaManager,\n        address payable _owner,\n        address payable _creditor,\n        address payable _debtor,\n        string memory _description,\n        uint256 _claimAmount,\n        uint256 _dueBy,\n        Multihash calldata _multihash\n    ) external {\n        init(\n            _bullaManager,\n            _owner,\n            _creditor,\n            _debtor,\n            _description,\n            _claimAmount,\n            _dueBy\n        );\n        multihash = _multihash;\n        emit MultihashAdded(\n            address(bullaManager),\n            address(this),\n            creditor,\n            debtor,\n            multihash,\n            block.timestamp\n        );\n    }\n\n    function transferOwnership(address payable newOwner) external payable {\n        require(owner == creditor, \"only invoices can be transferred\");\n        require(\n            transferPrice > 0 || msg.sender == owner,\n            \"this claim is not transferable by anyone other than owner\"\n        );\n        require(\n            msg.value == transferPrice,\n            \"incorrect msg.value to transfer ownership\"\n        );\n\n        owner.transfer(msg.value);\n        address oldOwner = owner;\n        owner = newOwner;\n        creditor = newOwner;\n        transferPrice = 0;\n\n        emit ClaimTransferred(\n            address(this),\n            oldOwner,\n            newOwner,\n            msg.value,\n            block.timestamp\n        );\n    }\n\n    function payClaim() external payable onlyDebtor {\n        require(paidAmount + msg.value <= claimAmount, \"repaying too much\");\n        require(msg.value > 0, \"payment must be greater than 0\");\n\n        uint256 bullaTokenBalance = bullaManager.getBullaBalance(owner);\n        (\n            address payable collectionAddress,\n            uint32 fullFee,\n            uint32 bullaThreshold,\n            uint32 reducedFeeBasisPoints\n        ) = bullaManager.getFeeInfo();\n\n        uint32 fee = bullaThreshold > 0 && bullaTokenBalance >= bullaThreshold\n            ? reducedFeeBasisPoints\n            : fullFee;\n\n        uint256 transactionFee = fee > 0\n            ? (msg.value * fee) / 10000 //calculateFee(feeBasisPoints, msg.value)\n            : 0;\n\n        paidAmount += msg.value;\n        paidAmount == claimAmount ? status = Status.Paid : status = Status\n            .Repaying;\n        creditor.transfer(msg.value - transactionFee);\n        emitActionEvent(ActionType.Payment, claimAmount);\n\n        if (transactionFee > 0) {\n            collectionAddress.transfer(transactionFee);\n        }\n        emit FeePaid(\n            address(bullaManager),\n            address(this),\n            collectionAddress,\n            transactionFee,\n            block.timestamp\n        );\n    }\n}\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract BullaClaimERC20 is BullaClaim {\n    using SafeERC20 for IERC20;\n    IERC20 public claimToken;\n\n    event ClaimCreated(\n        address bullaManager,\n        address bullaClaim,\n        address owner,\n        address indexed creditor,\n        address indexed debtor,\n        address claimToken,\n        string description,\n        uint256 claimAmount,\n        uint256 dueBy,\n        address indexed creator,\n        uint256 blocktime\n    );\n\n    function init(\n        address _bullaManager,\n        address payable _owner,\n        address payable _creditor,\n        address payable _debtor,\n        string memory _description,\n        uint256 _claimAmount,\n        uint256 _dueBy,\n        address _claimToken\n    ) public {\n        require(\n            _owner == _creditor || _owner == _debtor,\n            \"owner not a debtor or creditor\"\n        );\n        require(!isInitialized, \"already initialized\");\n        isInitialized = true;\n\n        bullaManager = IBullaManager(_bullaManager);\n        owner = _owner;\n        creditor = _creditor;\n        debtor = _debtor;\n        claimAmount = _claimAmount;\n        dueBy = _dueBy;\n        claimToken = IERC20(_claimToken);\n\n        emit ClaimCreated(\n            _bullaManager,\n            address(this),\n            owner,\n            creditor,\n            debtor,\n            _claimToken,\n            _description,\n            claimAmount,\n            dueBy,\n            msg.sender,\n            block.timestamp\n        );\n    }\n\n    function initMultiHash(\n        address _bullaManager,\n        address payable _owner,\n        address payable _creditor,\n        address payable _debtor,\n        string memory _description,\n        uint256 _claimAmount,\n        uint256 _dueBy,\n        address _claimToken,\n        Multihash calldata _multihash\n    ) external {\n        init(\n            _bullaManager,\n            _owner,\n            _creditor,\n            _debtor,\n            _description,\n            _claimAmount,\n            _dueBy,\n            _claimToken\n        );\n        multihash = _multihash;\n        emit MultihashAdded(\n            address(bullaManager),\n            address(this),\n            creditor,\n            debtor,\n            multihash,\n            block.timestamp\n        );\n    }\n\n    function transferOwnership(address payable newOwner, uint256 transferAmount)\n        external\n    {\n        require(owner == creditor, \"only invoices can be transferred\");\n        require(\n            transferPrice > 0 || msg.sender == owner,\n            \"this claim is not transferable by anyone other than owner\"\n        );\n        require(\n            transferAmount == transferPrice,\n            \"incorrect value to transfer ownership\"\n        );\n\n        claimToken.safeTransferFrom(msg.sender, owner, transferPrice);\n        address oldOwner = owner;\n        owner = newOwner;\n        creditor = newOwner;\n        transferPrice = 0;\n\n        emit ClaimTransferred(\n            address(this),\n            oldOwner,\n            newOwner,\n            transferPrice,\n            block.timestamp\n        );\n    }\n\n    function payClaim(uint256 paymentAmount) external onlyDebtor {\n        require(\n            claimToken.balanceOf(msg.sender) >= claimAmount,\n            \"insufficient funds\"\n        );\n        require(paidAmount + paymentAmount <= claimAmount, \"repaying too much\");\n        require(paymentAmount > 0, \"payment must be greater than 0\");\n        require(\n            claimToken.allowance(msg.sender, address(this)) >= paymentAmount,\n            \"must approve transfer\"\n        );\n\n        uint256 bullaTokenBalance = bullaManager.getBullaBalance(owner);\n        (\n            address payable collectionAddress,\n            uint32 fullFee,\n            uint32 bullaThreshold,\n            uint32 reducedFeeBasisPoints\n        ) = bullaManager.getFeeInfo();\n\n        uint32 fee = bullaThreshold > 0 && bullaTokenBalance >= bullaThreshold\n            ? reducedFeeBasisPoints\n            : fullFee;\n\n        uint256 transactionFee = fee > 0\n            ? (paymentAmount * fee) / 10000 //calculateFee(feeBasisPoints, msg.value)\n            : 0;\n\n        paidAmount += paymentAmount;\n        paidAmount == claimAmount ? status = Status.Paid : status = Status\n            .Repaying;\n\n        claimToken.safeTransferFrom(\n            msg.sender,\n            creditor,\n            paymentAmount - transactionFee\n        );\n        emitActionEvent(ActionType.Payment, claimAmount);\n\n        if (transactionFee > 0) {\n            claimToken.safeTransferFrom(\n                msg.sender,\n                collectionAddress,\n                transactionFee\n            );\n        }\n        emit FeePaid(\n            address(bullaManager),\n            address(this),\n            collectionAddress,\n            transactionFee,\n            block.timestamp\n        );\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/BullaGroup.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.3;\n\nimport \"./BullaClaim.sol\";\n\ncontract BullaGroup {\n    mapping(uint256 => address) public bullaOwners;\n    uint256 bullaCount = 0;\n\n    mapping(address => bool) public isMember;\n    bool public immutable requireMembership;\n\n    bytes32 public immutable groupType;\n    address public immutable bullaManager;\n    address public immutable owner;\n\n    event NewBulla(\n        address indexed bullaManager,\n        address indexed bullaGroup,\n        uint256 bullaId,\n        address indexed owner,\n        string description,\n        uint256 ownerFunding,\n        uint256 blocktime\n    );\n\n    event NewBullaClaim(\n        address indexed bullaManager,\n        address bullaGroup,\n        uint256 bullaId,\n        address bullaClaim,\n        address owner,\n        address indexed creditor,\n        address indexed debtor,\n        string description,\n        uint256 claimAmount,\n        uint256 dueBy,\n        uint256 blocktime\n    );\n\n    event Membership(\n        address indexed groupAddress,\n        address walletAddress,\n        bool isMember,\n        uint256 blocktime\n    );\n\n    constructor(\n        address _bullaManager,\n        address _owner,\n        bytes32 _groupType,\n        bool _requireMembership\n    ) {\n        owner = _owner;\n        bullaManager = _bullaManager;\n        isMember[_owner] = true;\n        requireMembership = _requireMembership;\n        groupType = _groupType;\n    }\n\n    function joinGroup() external {\n        require(isMember[msg.sender] != true, \"members cannot join a group\");\n        isMember[msg.sender] = true;\n        emit Membership(address(this), msg.sender, true, block.timestamp);\n    }\n\n    function leaveGroup() external {\n        require(\n            isMember[msg.sender] == true,\n            \"non-members cannot leave a group\"\n        );\n        require(msg.sender != owner, \"owners cannot leave a group\");\n        isMember[msg.sender] = false;\n        emit Membership(address(this), msg.sender, false, block.timestamp);\n    }\n\n    function createBulla(string calldata desc, uint256 ownerFunding) external {\n        if (requireMembership)\n            require(\n                isMember[msg.sender] == true,\n                \"non-members cannot create a bulla\"\n            );\n        uint256 newBullaId = bullaCount;\n\n        bullaOwners[newBullaId] = msg.sender;\n        bullaCount++;\n\n        emit NewBulla(\n            bullaManager,\n            address(this),\n            newBullaId,\n            msg.sender,\n            desc,\n            ownerFunding,\n            block.timestamp\n        );\n    }\n\n    function createBullaClaim(\n        uint256 bullaId,\n        uint256 claimAmount,\n        address payable creditor,\n        address payable debtor,\n        string memory description,\n        uint256 dueBy\n    ) public {\n        require(bullaOwners[bullaId] != address(0), \"bulla does not exist\");\n        require(\n            bullaOwners[bullaId] == msg.sender,\n            \"only bulla owner's may create a bulla claim\"\n        );\n\n        // BullaClaim newBullaClaim = new BullaClaim(\n        //     bullaManager,\n        //     payable(msg.sender),\n        //     creditor,\n        //     debtor,\n        //     description,\n        //     claimAmount,\n        //     dueBy\n        // );\n\n        // emit NewBullaClaim(\n        //     bullaManager,\n        //     address(this),\n        //     bullaId,\n        //     address(newBullaClaim),\n        //     msg.sender,\n        //     creditor,\n        //     debtor,\n        //     description,\n        //     claimAmount,\n        //     dueBy,\n        //     block.timestamp\n        // );\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/BullaToken.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract BullaToken is ERC20 {\n    constructor() ERC20(\"Token\", \"TKN\") {\n        _mint(msg.sender, 1000000 * (10**uint256(decimals())));\n    }\n}\n"
    },
    "contracts/BullaManager.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nstruct FeeInfo {\n    address payable collectionAddress;\n    uint32 feeBasisPoints;\n    uint32 bullaTokenThreshold; //# of BULLA tokens held to get fee reduction\n    uint32 reducedFeeBasisPoints; //reduced fee for BULLA token holders\n}\n\ncontract BullaManager {\n    bytes32 public immutable description;\n    FeeInfo private feeInfo;\n    IERC20 public bullaToken;\n    address public owner;\n    modifier onlyOwner() {\n        require(owner == msg.sender, \"restricted to contract owner\");\n        _;\n    }\n\n    event FeeChanged(\n        address indexed bullaManager,\n        uint256 prevFee,\n        uint256 newFee,\n        uint256 blocktime\n    );\n    event CollectorChanged(\n        address indexed bullaManager,\n        address prevCollector,\n        address newCollector,\n        uint256 blocktime\n    );\n    event OwnerChanged(\n        address indexed bullaManager,\n        address prevOwner,\n        address newOwner,\n        uint256 blocktime\n    );\n    event BullaTokenChanged(\n        address indexed bullaManager,\n        address prevBullaToken,\n        address newBullaToken,\n        uint256 blocktime\n    );\n    event FeeThresholdChanged(\n        address indexed bullaManager,\n        uint256 prevFeeThreshold,\n        uint256 newFeeThreshold,\n        uint256 blocktime\n    );\n    event ReducedFeeChanged(\n        address indexed bullaManager,\n        uint256 prevFee,\n        uint256 newFee,\n        uint256 blocktime\n    );\n\n    constructor(\n        bytes32 _description,\n        address payable _collectionAddress,\n        uint32 _feeBasisPoints\n    ) {\n        owner = msg.sender;\n        feeInfo.collectionAddress = _collectionAddress;\n        description = _description;\n        feeInfo.feeBasisPoints = _feeBasisPoints;\n\n        emit FeeChanged(address(this), 0, _feeBasisPoints, block.timestamp);\n        emit CollectorChanged(\n            address(this),\n            address(0),\n            _collectionAddress,\n            block.timestamp\n        );\n        emit OwnerChanged(\n            address(this),\n            address(0),\n            msg.sender,\n            block.timestamp\n        );\n    }\n\n    function setOwner(address _owner) external onlyOwner {\n        owner = _owner;\n        emit OwnerChanged(address(this), owner, _owner, block.timestamp);\n    }\n\n    function setFee(uint32 _feeBasisPoints) external onlyOwner {\n        uint32 oldFee = feeInfo.feeBasisPoints;\n        feeInfo.feeBasisPoints = _feeBasisPoints;\n        emit FeeChanged(\n            address(this),\n            oldFee,\n            feeInfo.feeBasisPoints,\n            block.timestamp\n        );\n    }\n\n    function setCollectionAddress(address payable _collectionAddress)\n        external\n        onlyOwner\n    {\n        feeInfo.collectionAddress = _collectionAddress;\n        emit CollectorChanged(\n            address(this),\n            feeInfo.collectionAddress,\n            _collectionAddress,\n            block.timestamp\n        );\n    }\n\n    //Set threshold of BULLA tokens owned that are required to receive reduced fee\n    function setbullaThreshold(uint32 _threshold) external onlyOwner {\n        feeInfo.bullaTokenThreshold = _threshold;\n        emit FeeThresholdChanged(\n            address(this),\n            feeInfo.bullaTokenThreshold,\n            _threshold,\n            block.timestamp\n        );\n    }\n\n    //reduced fee if threshold of BULLA tokens owned is met\n    function setReducedFee(uint32 reducedFeeBasisPoints) external onlyOwner {\n        uint32 oldFee = feeInfo.reducedFeeBasisPoints;\n        feeInfo.reducedFeeBasisPoints = reducedFeeBasisPoints;\n        emit FeeChanged(\n            address(this),\n            oldFee,\n            feeInfo.feeBasisPoints,\n            block.timestamp\n        );\n    }\n\n    //set the contract address of BULLA ERC20 token\n    function setBullaTokenAddress(address payable _bullaTokenAddress)\n        external\n        onlyOwner\n    {\n        bullaToken = IERC20(_bullaTokenAddress);\n        emit BullaTokenChanged(\n            address(this),\n            address(bullaToken),\n            _bullaTokenAddress,\n            block.timestamp\n        );\n    }\n\n    //get the amount of BULLA tokens held by a given address\n    function getBullaBalance(address _holder) external view returns (uint256) {\n        uint256 balance = address(bullaToken) == address(0)\n            ? 0\n            : bullaToken.balanceOf(_holder);\n        return balance;\n    }\n\n    function getFeeInfo() external view returns (FeeInfo memory) {\n        return feeInfo;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}