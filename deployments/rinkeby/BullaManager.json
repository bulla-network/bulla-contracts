{
  "address": "0x75bd9bE688DACAFB05EB99Bdb81e8F5e53783Db9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_description",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "_collectionAddress",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_feeBasisPoints",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bullaManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevBullaToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newBullaToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blocktime",
          "type": "uint256"
        }
      ],
      "name": "BullaTokenChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bullaManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevCollector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newCollector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blocktime",
          "type": "uint256"
        }
      ],
      "name": "CollectorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bullaManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blocktime",
          "type": "uint256"
        }
      ],
      "name": "FeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bullaManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevFeeThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFeeThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blocktime",
          "type": "uint256"
        }
      ],
      "name": "FeeThresholdChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bullaManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blocktime",
          "type": "uint256"
        }
      ],
      "name": "OwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bullaManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blocktime",
          "type": "uint256"
        }
      ],
      "name": "ReducedFeeChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bullaToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        }
      ],
      "name": "getBullaBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "collectionAddress",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "feeBasisPoints",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "bullaTokenThreshold",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "reducedFeeBasisPoints",
              "type": "uint32"
            }
          ],
          "internalType": "struct FeeInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_bullaTokenAddress",
          "type": "address"
        }
      ],
      "name": "setBullaTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_collectionAddress",
          "type": "address"
        }
      ],
      "name": "setCollectionAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_feeBasisPoints",
          "type": "uint32"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "reducedFeeBasisPoints",
          "type": "uint32"
        }
      ],
      "name": "setReducedFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_threshold",
          "type": "uint32"
        }
      ],
      "name": "setbullaThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd9096339db03373d9c3b4b67b61e28a8d43fa9cca3dd487cff82c0cd70f7e44f",
  "receipt": {
    "to": null,
    "from": "0x3b6Ac45817b3bB0544C19412Fbe8B022D0a4db61",
    "contractAddress": "0x75bd9bE688DACAFB05EB99Bdb81e8F5e53783Db9",
    "transactionIndex": 13,
    "gasUsed": "522378",
    "logsBloom": "0x
    "blockHash": "0x82cb2dd96a8818d54799dd05a1c7e0cdf07cd7e70621b30bdc35074957a8d597",
    "transactionHash": "0xd9096339db03373d9c3b4b67b61e28a8d43fa9cca3dd487cff82c0cd70f7e44f",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 9126260,
        "transactionHash": "0xd9096339db03373d9c3b4b67b61e28a8d43fa9cca3dd487cff82c0cd70f7e44f",
        "address": "0x75bd9bE688DACAFB05EB99Bdb81e8F5e53783Db9",
        "topics": [
          "0x920eb1bd59249cc14185b0425c1a4c2749475b15272cb9b73451656ad168e323",
          "0x00000000000000000000000075bd9be688dacafb05eb99bdb81e8f5e53783db9"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000611a9ee3",
        "logIndex": 22,
        "blockHash": "0x82cb2dd96a8818d54799dd05a1c7e0cdf07cd7e70621b30bdc35074957a8d597"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 9126260,
        "transactionHash": "0xd9096339db03373d9c3b4b67b61e28a8d43fa9cca3dd487cff82c0cd70f7e44f",
        "address": "0x75bd9bE688DACAFB05EB99Bdb81e8F5e53783Db9",
        "topics": [
          "0x28fa443c78eecff2421a89aee0a09ea0d05ad6bb15491e6d8b46c24084bab01e",
          "0x00000000000000000000000075bd9be688dacafb05eb99bdb81e8f5e53783db9"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000089e03e7980c92fd81ed3a9b72f5c73fdf57e5e6d00000000000000000000000000000000000000000000000000000000611a9ee3",
        "logIndex": 23,
        "blockHash": "0x82cb2dd96a8818d54799dd05a1c7e0cdf07cd7e70621b30bdc35074957a8d597"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 9126260,
        "transactionHash": "0xd9096339db03373d9c3b4b67b61e28a8d43fa9cca3dd487cff82c0cd70f7e44f",
        "address": "0x75bd9bE688DACAFB05EB99Bdb81e8F5e53783Db9",
        "topics": [
          "0x39186e51606070376273fb5a61f17af17684b1c771b7c32a6ee725284d1a28e4",
          "0x00000000000000000000000075bd9be688dacafb05eb99bdb81e8f5e53783db9"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000003b6ac45817b3bb0544c19412fbe8b022d0a4db6100000000000000000000000000000000000000000000000000000000611a9ee3",
        "logIndex": 24,
        "blockHash": "0x82cb2dd96a8818d54799dd05a1c7e0cdf07cd7e70621b30bdc35074957a8d597"
      }
    ],
    "blockNumber": 9126260,
    "cumulativeGasUsed": "7640339",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x66726f6d2068617264686174206465706c6f7900000000000000000000000000",
    "0x89e03E7980C92fd81Ed3A9b72F5c73fDf57E5e6D",
    0
  ],
  "solcInputHash": "329f5615c573ded6f1ab86986788ab0e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_description\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_feeBasisPoints\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bullaManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevBullaToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBullaToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"BullaTokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bullaManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevCollector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCollector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"CollectorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bullaManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bullaManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevFeeThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeeThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"FeeThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bullaManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bullaManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"ReducedFeeChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bullaToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getBullaBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"feeBasisPoints\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"bullaTokenThreshold\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"reducedFeeBasisPoints\",\"type\":\"uint32\"}],\"internalType\":\"struct FeeInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_bullaTokenAddress\",\"type\":\"address\"}],\"name\":\"setBullaTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_collectionAddress\",\"type\":\"address\"}],\"name\":\"setCollectionAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_feeBasisPoints\",\"type\":\"uint32\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"reducedFeeBasisPoints\",\"type\":\"uint32\"}],\"name\":\"setReducedFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_threshold\",\"type\":\"uint32\"}],\"name\":\"setbullaThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BullaManager.sol\":\"BullaManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa3bbab77849522b73d8c6cd3d2ac54bef7580e4354484f35f4cabf55d3d2b3f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/BullaClaim.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.3;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\n\\r\\ninterface IBullaManager {\\r\\n    function getBullaBalance(address _holder) external view returns (uint256);\\r\\n\\r\\n    function getFeeInfo()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address payable collectionAddress,\\r\\n            uint32 feeBasisPoints,\\r\\n            uint32 bullaThreshold, //# of BULLA tokens held to get fee reduction\\r\\n            uint32 reducedFeeBasisPoints\\r\\n        );\\r\\n}\\r\\n\\r\\ncontract BullaClaim is Initializable {\\r\\n    enum ActionType {\\r\\n        Payment,\\r\\n        Reject,\\r\\n        Rescind\\r\\n    }\\r\\n    enum Status {\\r\\n        Pending,\\r\\n        Repaying,\\r\\n        Paid,\\r\\n        Rejected,\\r\\n        Rescinded\\r\\n    }\\r\\n\\r\\n    //https://medium.com/temporal-cloud/efficient-usable-and-cheap-storage-of-ipfs-hashes-in-solidity-smart-contracts-eb3bef129eba\\r\\n    //structure for storing IPFS hash that may hold documents\\r\\n    struct Multihash {\\r\\n        bytes32 hash;\\r\\n        uint8 hashFunction;\\r\\n        uint8 size;\\r\\n    }\\r\\n    Multihash public multihash;\\r\\n\\r\\n    IBullaManager internal bullaManager;\\r\\n    address payable public owner; //current owner of claim\\r\\n    address payable creditor;\\r\\n    address payable debtor;\\r\\n\\r\\n    uint256 public claimAmount;\\r\\n    uint256 public dueBy;\\r\\n    uint256 public paidAmount;\\r\\n    Status public status;\\r\\n    bool isInitialized;\\r\\n\\r\\n    //current price that owner is willing to transfer claim\\r\\n    uint256 public transferPrice;\\r\\n\\r\\n    modifier onlyCreditor() {\\r\\n        require(creditor == msg.sender, \\\"restricted to creditor\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyDebtor() {\\r\\n        require(debtor == msg.sender, \\\"restricted to debtor\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(owner == msg.sender, \\\"restricted to owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event ClaimAction(\\r\\n        address indexed bullaManager,\\r\\n        address indexed bullaClaim,\\r\\n        ActionType actionType,\\r\\n        uint256 paymentAmount,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n\\r\\n    event FeePaid(\\r\\n        address indexed bullaManager,\\r\\n        address indexed bullaClaim,\\r\\n        address indexed collectionAddress,\\r\\n        uint256 transactionFee,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n\\r\\n    event MultihashAdded(\\r\\n        address indexed bullaManager,\\r\\n        address bullaClaim,\\r\\n        address indexed debtor,\\r\\n        address indexed creditor,\\r\\n        Multihash ipfsHash,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n\\r\\n    event TransferPriceUpdated(\\r\\n        address indexed bullaClaim,\\r\\n        uint256 oldPrice,\\r\\n        uint256 newPrice,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n\\r\\n    event ClaimTransferred(\\r\\n        address indexed bullaClaim,\\r\\n        address indexed oldOwner,\\r\\n        address indexed newOwner,\\r\\n        uint256 trasferPrice,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n\\r\\n    event ClaimCreated(\\r\\n        address indexed bullaManager,\\r\\n        address bullaClaim,\\r\\n        address owner,\\r\\n        address indexed creditor,\\r\\n        address indexed debtor,\\r\\n        string description,\\r\\n        uint256 claimAmount,\\r\\n        uint256 dueBy,\\r\\n        address createdBy,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n\\r\\n    function init(\\r\\n        address _bullaManager,\\r\\n        address payable _owner,\\r\\n        address payable _creditor,\\r\\n        address payable _debtor,\\r\\n        string memory _description,\\r\\n        uint256 _claimAmount,\\r\\n        uint256 _dueBy\\r\\n    ) external {\\r\\n        require(\\r\\n            _owner == _creditor || _owner == _debtor,\\r\\n            \\\"owner not a debtor or creditor\\\"\\r\\n        );\\r\\n        require(!isInitialized, \\\"already initialized\\\");\\r\\n\\r\\n        isInitialized = true;\\r\\n        bullaManager = IBullaManager(_bullaManager);\\r\\n        owner = _owner;\\r\\n        creditor = _creditor;\\r\\n        debtor = _debtor;\\r\\n        claimAmount = _claimAmount;\\r\\n        dueBy = _dueBy;\\r\\n\\r\\n        emit ClaimCreated(\\r\\n            _bullaManager,\\r\\n            address(this),\\r\\n            owner,\\r\\n            creditor,\\r\\n            debtor,\\r\\n            _description,\\r\\n            claimAmount,\\r\\n            dueBy,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setTransferPrice(uint256 newPrice) external onlyOwner {\\r\\n        require(owner == creditor, \\\"only owner can set price\\\");\\r\\n        uint256 oldPrice = transferPrice;\\r\\n        transferPrice = newPrice;\\r\\n        emit TransferPriceUpdated(\\r\\n            address(this),\\r\\n            oldPrice,\\r\\n            newPrice,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address payable newOwner) external payable {\\r\\n        require(owner == creditor, \\\"only invoices can be transferred\\\");\\r\\n        require(\\r\\n            transferPrice > 0 || msg.sender == owner,\\r\\n            \\\"this claim is not transferable by anyone other than owner\\\"\\r\\n        );\\r\\n        require(\\r\\n            msg.value == transferPrice,\\r\\n            \\\"incorrect msg.value to transfer ownership\\\"\\r\\n        );\\r\\n\\r\\n        owner.transfer(msg.value);\\r\\n        address oldOwner = owner;\\r\\n        owner = newOwner;\\r\\n        creditor = newOwner;\\r\\n        transferPrice = 0;\\r\\n\\r\\n        emit ClaimTransferred(\\r\\n            address(this),\\r\\n            oldOwner,\\r\\n            newOwner,\\r\\n            msg.value,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function addMultihash(\\r\\n        bytes32 hash,\\r\\n        uint8 hashFunction,\\r\\n        uint8 size\\r\\n    ) external onlyOwner {\\r\\n        multihash = Multihash(hash, hashFunction, size);\\r\\n        emit MultihashAdded(\\r\\n            address(bullaManager),\\r\\n            address(this),\\r\\n            creditor,\\r\\n            debtor,\\r\\n            multihash,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function emitActionEvent(ActionType actionType, uint256 _paymentAmount)\\r\\n        internal\\r\\n    {\\r\\n        emit ClaimAction(\\r\\n            address(bullaManager),\\r\\n            address(this),\\r\\n            actionType,\\r\\n            _paymentAmount,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function payClaim() external payable onlyDebtor {\\r\\n        require(paidAmount + msg.value <= claimAmount, \\\"repaying too much\\\");\\r\\n        require(msg.value > 0, \\\"payment must be greater than 0\\\");\\r\\n\\r\\n        uint256 bullaTokenBalance = bullaManager.getBullaBalance(owner);\\r\\n        (\\r\\n            address payable collectionAddress,\\r\\n            uint32 fullFee,\\r\\n            uint32 bullaThreshold,\\r\\n            uint32 reducedFeeBasisPoints\\r\\n        ) = bullaManager.getFeeInfo();\\r\\n\\r\\n        uint32 fee = bullaThreshold > 0 && bullaTokenBalance >= bullaThreshold\\r\\n            ? reducedFeeBasisPoints\\r\\n            : fullFee;\\r\\n\\r\\n        uint256 transactionFee = fee > 0\\r\\n            ? (msg.value * fee) / 10000 //calculateFee(feeBasisPoints, msg.value)\\r\\n            : 0;\\r\\n\\r\\n        //DOES this protect against re-entrancy? moved effect before transfer\\r\\n        paidAmount += msg.value;\\r\\n        paidAmount == claimAmount ? status = Status.Paid : status = Status\\r\\n            .Repaying;\\r\\n        creditor.transfer(msg.value - transactionFee);\\r\\n        emitActionEvent(ActionType.Payment, claimAmount);\\r\\n\\r\\n        if (transactionFee > 0) {\\r\\n            collectionAddress.transfer(transactionFee);\\r\\n        }\\r\\n        emit FeePaid(\\r\\n            address(bullaManager),\\r\\n            address(this),\\r\\n            collectionAddress,\\r\\n            transactionFee,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function rejectClaim() external payable onlyDebtor {\\r\\n        require(\\r\\n            status == Status.Pending,\\r\\n            \\\"cannot reject once payment has been made\\\"\\r\\n        );\\r\\n        status = Status.Rejected;\\r\\n        emitActionEvent(ActionType.Reject, 0);\\r\\n    }\\r\\n\\r\\n    function rescindClaim() external payable onlyCreditor {\\r\\n        require(\\r\\n            status == Status.Pending,\\r\\n            \\\"cannot rescind once payment has been made\\\"\\r\\n        );\\r\\n        status = Status.Rescinded;\\r\\n        emitActionEvent(ActionType.Rescind, 0);\\r\\n    }\\r\\n\\r\\n    function getCreditor() external view returns (address) {\\r\\n        return creditor;\\r\\n    }\\r\\n\\r\\n    function getDebtor() external view returns (address) {\\r\\n        return debtor;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xeb3e381ab64d9e439712099920c5a7cca4c3b7e5c48f46e8566d8c65e1a16b21\",\"license\":\"UNLICENSED\"},\"contracts/BullaGroup.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.3;\\r\\n\\r\\nimport \\\"./BullaClaim.sol\\\";\\r\\n\\r\\ncontract BullaGroup {\\r\\n    mapping(uint256 => address) public bullaOwners;\\r\\n    uint256 bullaCount = 0;\\r\\n\\r\\n    mapping(address => bool) public isMember;\\r\\n    bool public immutable requireMembership;\\r\\n\\r\\n    bytes32 public immutable groupType;\\r\\n    address public immutable bullaManager;\\r\\n    address public immutable owner;\\r\\n\\r\\n    event NewBulla(\\r\\n        address indexed bullaManager,\\r\\n        address indexed bullaGroup,\\r\\n        uint256 bullaId,\\r\\n        address indexed owner,\\r\\n        string description,\\r\\n        uint256 ownerFunding,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n\\r\\n    event NewBullaClaim(\\r\\n        address indexed bullaManager,\\r\\n        address bullaGroup,\\r\\n        uint256 bullaId,\\r\\n        address bullaClaim,\\r\\n        address owner,\\r\\n        address indexed creditor,\\r\\n        address indexed debtor,\\r\\n        string description,\\r\\n        uint256 claimAmount,\\r\\n        uint256 dueBy,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n\\r\\n    event Membership(\\r\\n        address indexed groupAddress,\\r\\n        address walletAddress,\\r\\n        bool isMember,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n\\r\\n    constructor(\\r\\n        address _bullaManager,\\r\\n        address _owner,\\r\\n        bytes32 _groupType,\\r\\n        bool _requireMembership\\r\\n    ) {\\r\\n        owner = _owner;\\r\\n        bullaManager = _bullaManager;\\r\\n        isMember[_owner] = true;\\r\\n        requireMembership = _requireMembership;\\r\\n        groupType = _groupType;\\r\\n    }\\r\\n\\r\\n    function joinGroup() external {\\r\\n        require(isMember[msg.sender] != true, \\\"members cannot join a group\\\");\\r\\n        isMember[msg.sender] = true;\\r\\n        emit Membership(address(this), msg.sender, true, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function leaveGroup() external {\\r\\n        require(\\r\\n            isMember[msg.sender] == true,\\r\\n            \\\"non-members cannot leave a group\\\"\\r\\n        );\\r\\n        require(msg.sender != owner, \\\"owners cannot leave a group\\\");\\r\\n        isMember[msg.sender] = false;\\r\\n        emit Membership(address(this), msg.sender, false, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function createBulla(string calldata desc, uint256 ownerFunding) external {\\r\\n        if (requireMembership)\\r\\n            require(\\r\\n                isMember[msg.sender] == true,\\r\\n                \\\"non-members cannot create a bulla\\\"\\r\\n            );\\r\\n        uint256 newBullaId = bullaCount;\\r\\n\\r\\n        bullaOwners[newBullaId] = msg.sender;\\r\\n        bullaCount++;\\r\\n\\r\\n        emit NewBulla(\\r\\n            bullaManager,\\r\\n            address(this),\\r\\n            newBullaId,\\r\\n            msg.sender,\\r\\n            desc,\\r\\n            ownerFunding,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function createBullaClaim(\\r\\n        uint256 bullaId,\\r\\n        uint256 claimAmount,\\r\\n        address payable creditor,\\r\\n        address payable debtor,\\r\\n        string memory description,\\r\\n        uint256 dueBy\\r\\n    ) public {\\r\\n        require(bullaOwners[bullaId] != address(0), \\\"bulla does not exist\\\");\\r\\n        require(\\r\\n            bullaOwners[bullaId] == msg.sender,\\r\\n            \\\"only bulla owner's may create a bulla claim\\\"\\r\\n        );\\r\\n\\r\\n        // BullaClaim newBullaClaim = new BullaClaim(\\r\\n        //     bullaManager,\\r\\n        //     payable(msg.sender),\\r\\n        //     creditor,\\r\\n        //     debtor,\\r\\n        //     description,\\r\\n        //     claimAmount,\\r\\n        //     dueBy\\r\\n        // );\\r\\n\\r\\n        // emit NewBullaClaim(\\r\\n        //     bullaManager,\\r\\n        //     address(this),\\r\\n        //     bullaId,\\r\\n        //     address(newBullaClaim),\\r\\n        //     msg.sender,\\r\\n        //     creditor,\\r\\n        //     debtor,\\r\\n        //     description,\\r\\n        //     claimAmount,\\r\\n        //     dueBy,\\r\\n        //     block.timestamp\\r\\n        // );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xaabfd024e39ca9dabbbbb85ea768d3746612edae7b20de4722616e0278918d7a\",\"license\":\"UNLICENSED\"},\"contracts/BullaManager.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.3;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./BullaGroup.sol\\\";\\r\\n\\r\\nstruct FeeInfo {\\r\\n    address payable collectionAddress;\\r\\n    uint32 feeBasisPoints;\\r\\n    uint32 bullaTokenThreshold; //# of BULLA tokens held to get fee reduction\\r\\n    uint32 reducedFeeBasisPoints; //reduced fee for BULLA token holders\\r\\n}\\r\\n\\r\\ncontract BullaManager {\\r\\n    bytes32 public immutable description;\\r\\n    FeeInfo private feeInfo;\\r\\n    IERC20 public bullaToken;\\r\\n    address public owner;\\r\\n    modifier onlyOwner() {\\r\\n        require(owner == msg.sender, \\\"restricted to contract owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event FeeChanged(\\r\\n        address indexed bullaManager,\\r\\n        uint256 prevFee,\\r\\n        uint256 newFee,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n    event CollectorChanged(\\r\\n        address indexed bullaManager,\\r\\n        address prevCollector,\\r\\n        address newCollector,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n    event OwnerChanged(\\r\\n        address indexed bullaManager,\\r\\n        address prevOwner,\\r\\n        address newOwner,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n    event BullaTokenChanged(\\r\\n        address indexed bullaManager,\\r\\n        address prevBullaToken,\\r\\n        address newBullaToken,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n    event FeeThresholdChanged(\\r\\n        address indexed bullaManager,\\r\\n        uint256 prevFeeThreshold,\\r\\n        uint256 newFeeThreshold,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n    event ReducedFeeChanged(\\r\\n        address indexed bullaManager,\\r\\n        uint256 prevFee,\\r\\n        uint256 newFee,\\r\\n        uint256 blocktime\\r\\n    );\\r\\n\\r\\n    constructor(\\r\\n        bytes32 _description,\\r\\n        address payable _collectionAddress,\\r\\n        uint32 _feeBasisPoints\\r\\n    ) {\\r\\n        owner = msg.sender;\\r\\n        feeInfo.collectionAddress = _collectionAddress;\\r\\n        description = _description;\\r\\n        feeInfo.feeBasisPoints = _feeBasisPoints;\\r\\n\\r\\n        emit FeeChanged(address(this), 0, _feeBasisPoints, block.timestamp);\\r\\n        emit CollectorChanged(\\r\\n            address(this),\\r\\n            address(0),\\r\\n            _collectionAddress,\\r\\n            block.timestamp\\r\\n        );\\r\\n        emit OwnerChanged(\\r\\n            address(this),\\r\\n            address(0),\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setOwner(address _owner) external onlyOwner {\\r\\n        owner = _owner;\\r\\n        emit OwnerChanged(address(this), owner, _owner, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function setFee(uint32 _feeBasisPoints) external onlyOwner {\\r\\n        uint32 oldFee = feeInfo.feeBasisPoints;\\r\\n        feeInfo.feeBasisPoints = _feeBasisPoints;\\r\\n        emit FeeChanged(\\r\\n            address(this),\\r\\n            oldFee,\\r\\n            feeInfo.feeBasisPoints,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setCollectionAddress(address payable _collectionAddress)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        feeInfo.collectionAddress = _collectionAddress;\\r\\n        emit CollectorChanged(\\r\\n            address(this),\\r\\n            feeInfo.collectionAddress,\\r\\n            _collectionAddress,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    //Set threshold of BULLA tokens owned that are required to receive reduced fee\\r\\n    function setbullaThreshold(uint32 _threshold) external onlyOwner {\\r\\n        feeInfo.bullaTokenThreshold = _threshold;\\r\\n        emit FeeThresholdChanged(\\r\\n            address(this),\\r\\n            feeInfo.bullaTokenThreshold,\\r\\n            _threshold,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    //reduced fee if threshold of BULLA tokens owned is met\\r\\n    function setReducedFee(uint32 reducedFeeBasisPoints) external onlyOwner {\\r\\n        uint32 oldFee = feeInfo.reducedFeeBasisPoints;\\r\\n        feeInfo.reducedFeeBasisPoints = reducedFeeBasisPoints;\\r\\n        emit FeeChanged(\\r\\n            address(this),\\r\\n            oldFee,\\r\\n            feeInfo.feeBasisPoints,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    //set the contract address of BULLA ERC20 token\\r\\n    function setBullaTokenAddress(address payable _bullaTokenAddress)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        bullaToken = IERC20(_bullaTokenAddress);\\r\\n        emit BullaTokenChanged(\\r\\n            address(this),\\r\\n            address(bullaToken),\\r\\n            _bullaTokenAddress,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    //get the amount of BULLA tokens held by a given address\\r\\n    function getBullaBalance(address _holder) external view returns (uint256) {\\r\\n        uint256 balance = address(bullaToken) == address(0)\\r\\n            ? 0\\r\\n            : bullaToken.balanceOf(_holder);\\r\\n        return balance;\\r\\n    }\\r\\n\\r\\n    function getFeeInfo() external view returns (FeeInfo memory) {\\r\\n        return feeInfo;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe360636b4756e4f6e55a594d84c92bb08cd0d09457d7e04f33012071b92514bb\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161093a38038061093a83398101604081905261002f9161015a565b600280546001600160a01b0319163317905560008054608085905263ffffffff8316600160a01b026001600160c01b03199091166001600160a01b0385161717815560405130917f920eb1bd59249cc14185b0425c1a4c2749475b15272cb9b73451656ad168e323916100bd91908590429092835263ffffffff919091166020830152604082015260600190565b60405180910390a260408051600081526001600160a01b03841660208201524281830152905130917f28fa443c78eecff2421a89aee0a09ea0d05ad6bb15491e6d8b46c24084bab01e919081900360600190a260408051600081523360208201524281830152905130917f39186e51606070376273fb5a61f17af17684b1c771b7c32a6ee725284d1a28e4919081900360600190a25050506101b0565b60008060006060848603121561016e578283fd5b835160208501519093506001600160a01b038116811461018c578283fd5b604085015190925063ffffffff811681146101a5578182fd5b809150509250925092565b60805161076f6101cb60003960006101c4015261076f6000f3fe608060405234801561001057600080fd5b50600436106100a85760003560e01c80638b019f92116100715780638b019f92146101e65780638da5cb5b146101f9578063a6546d0e14610224578063a6904aa514610237578063eb69615e1461024a578063f10a31791461025d576100a8565b806202eab7146100ad5780630309e65b1461017657806313af4035146101975780631ab971ab146101ac5780637284e416146101bf575b600080fd5b61012360408051608081018252600080825260208201819052918101829052606081019190915250604080516080810182526000546001600160a01b038116825263ffffffff600160a01b820481166020840152600160c01b8204811693830193909352600160e01b9004909116606082015290565b60405161016d919081516001600160a01b0316815260208083015163ffffffff90811691830191909152604080840151821690830152606092830151169181019190915260800190565b60405180910390f35b610189610184366004610692565b610270565b60405190815260200161016d565b6101aa6101a5366004610692565b610312565b005b6101aa6101ba3660046106c6565b6103aa565b6101897f000000000000000000000000000000000000000000000000000000000000000081565b6101aa6101f4366004610692565b61044d565b60025461020c906001600160a01b031681565b6040516001600160a01b03909116815260200161016d565b6101aa6102323660046106c6565b6104d5565b6101aa610245366004610692565b61056c565b60015461020c906001600160a01b031681565b6101aa61026b3660046106c6565b6105f4565b60015460009081906001600160a01b031615610308576001546040516370a0823160e01b81526001600160a01b038581166004830152909116906370a082319060240160206040518083038186803b1580156102cb57600080fd5b505afa1580156102df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030391906106ae565b61030b565b60005b9392505050565b6002546001600160a01b031633146103455760405162461bcd60e51b815260040161033c906106ea565b60405180910390fd5b600280546001600160a01b0319166001600160a01b038316908117909155604080518281526020810192909252429082015230907f39186e51606070376273fb5a61f17af17684b1c771b7c32a6ee725284d1a28e4906060015b60405180910390a250565b6002546001600160a01b031633146103d45760405162461bcd60e51b815260040161033c906106ea565b6000805463ffffffff838116600160a01b90810263ffffffff60a01b198416179384905560408051938290048316808552919094049091166020830152429282019290925230907f920eb1bd59249cc14185b0425c1a4c2749475b15272cb9b73451656ad168e323906060015b60405180910390a25050565b6002546001600160a01b031633146104775760405162461bcd60e51b815260040161033c906106ea565b600180546001600160a01b0319166001600160a01b038316908117909155604080518281526020810192909252429082015230907f0372929f77950d9d7af01484f77c437aaafdb1f22504ce8a66fa42d233862cc79060600161039f565b6002546001600160a01b031633146104ff5760405162461bcd60e51b815260040161033c906106ea565b6000805463ffffffff60c01b1916600160c01b63ffffffff848116828102939093179384905560408051929094041681526020810191909152429181019190915230907f1288d38590ededfeff607d9a0d70a08db1ef3baa2414283868ae007c582fab1d9060600161039f565b6002546001600160a01b031633146105965760405162461bcd60e51b815260040161033c906106ea565b600080546001600160a01b0319166001600160a01b038316908117909155604080518281526020810192909252429082015230907f28fa443c78eecff2421a89aee0a09ea0d05ad6bb15491e6d8b46c24084bab01e9060600161039f565b6002546001600160a01b0316331461061e5760405162461bcd60e51b815260040161033c906106ea565b6000805463ffffffff838116600160e01b9081026001600160e01b038416179384905560408051919093048216808252600160a01b9094049091166020820152429181019190915230907f920eb1bd59249cc14185b0425c1a4c2749475b15272cb9b73451656ad168e32390606001610441565b6000602082840312156106a3578081fd5b813561030b81610721565b6000602082840312156106bf578081fd5b5051919050565b6000602082840312156106d7578081fd5b813563ffffffff8116811461030b578182fd5b6020808252601c908201527f7265737472696374656420746f20636f6e7472616374206f776e657200000000604082015260600190565b6001600160a01b038116811461073657600080fd5b5056fea2646970667358221220c38938fb8f8782a432f38f7611a0ea2958a8488ee88047f39eb51e4ea504ebcf64736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a85760003560e01c80638b019f92116100715780638b019f92146101e65780638da5cb5b146101f9578063a6546d0e14610224578063a6904aa514610237578063eb69615e1461024a578063f10a31791461025d576100a8565b806202eab7146100ad5780630309e65b1461017657806313af4035146101975780631ab971ab146101ac5780637284e416146101bf575b600080fd5b61012360408051608081018252600080825260208201819052918101829052606081019190915250604080516080810182526000546001600160a01b038116825263ffffffff600160a01b820481166020840152600160c01b8204811693830193909352600160e01b9004909116606082015290565b60405161016d919081516001600160a01b0316815260208083015163ffffffff90811691830191909152604080840151821690830152606092830151169181019190915260800190565b60405180910390f35b610189610184366004610692565b610270565b60405190815260200161016d565b6101aa6101a5366004610692565b610312565b005b6101aa6101ba3660046106c6565b6103aa565b6101897f000000000000000000000000000000000000000000000000000000000000000081565b6101aa6101f4366004610692565b61044d565b60025461020c906001600160a01b031681565b6040516001600160a01b03909116815260200161016d565b6101aa6102323660046106c6565b6104d5565b6101aa610245366004610692565b61056c565b60015461020c906001600160a01b031681565b6101aa61026b3660046106c6565b6105f4565b60015460009081906001600160a01b031615610308576001546040516370a0823160e01b81526001600160a01b038581166004830152909116906370a082319060240160206040518083038186803b1580156102cb57600080fd5b505afa1580156102df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030391906106ae565b61030b565b60005b9392505050565b6002546001600160a01b031633146103455760405162461bcd60e51b815260040161033c906106ea565b60405180910390fd5b600280546001600160a01b0319166001600160a01b038316908117909155604080518281526020810192909252429082015230907f39186e51606070376273fb5a61f17af17684b1c771b7c32a6ee725284d1a28e4906060015b60405180910390a250565b6002546001600160a01b031633146103d45760405162461bcd60e51b815260040161033c906106ea565b6000805463ffffffff838116600160a01b90810263ffffffff60a01b198416179384905560408051938290048316808552919094049091166020830152429282019290925230907f920eb1bd59249cc14185b0425c1a4c2749475b15272cb9b73451656ad168e323906060015b60405180910390a25050565b6002546001600160a01b031633146104775760405162461bcd60e51b815260040161033c906106ea565b600180546001600160a01b0319166001600160a01b038316908117909155604080518281526020810192909252429082015230907f0372929f77950d9d7af01484f77c437aaafdb1f22504ce8a66fa42d233862cc79060600161039f565b6002546001600160a01b031633146104ff5760405162461bcd60e51b815260040161033c906106ea565b6000805463ffffffff60c01b1916600160c01b63ffffffff848116828102939093179384905560408051929094041681526020810191909152429181019190915230907f1288d38590ededfeff607d9a0d70a08db1ef3baa2414283868ae007c582fab1d9060600161039f565b6002546001600160a01b031633146105965760405162461bcd60e51b815260040161033c906106ea565b600080546001600160a01b0319166001600160a01b038316908117909155604080518281526020810192909252429082015230907f28fa443c78eecff2421a89aee0a09ea0d05ad6bb15491e6d8b46c24084bab01e9060600161039f565b6002546001600160a01b0316331461061e5760405162461bcd60e51b815260040161033c906106ea565b6000805463ffffffff838116600160e01b9081026001600160e01b038416179384905560408051919093048216808252600160a01b9094049091166020820152429181019190915230907f920eb1bd59249cc14185b0425c1a4c2749475b15272cb9b73451656ad168e32390606001610441565b6000602082840312156106a3578081fd5b813561030b81610721565b6000602082840312156106bf578081fd5b5051919050565b6000602082840312156106d7578081fd5b813563ffffffff8116811461030b578182fd5b6020808252601c908201527f7265737472696374656420746f20636f6e7472616374206f776e657200000000604082015260600190565b6001600160a01b038116811461073657600080fd5b5056fea2646970667358221220c38938fb8f8782a432f38f7611a0ea2958a8488ee88047f39eb51e4ea504ebcf64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1390,
        "contract": "contracts/BullaManager.sol:BullaManager",
        "label": "feeInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(FeeInfo)1385_storage"
      },
      {
        "astId": 1393,
        "contract": "contracts/BullaManager.sol:BullaManager",
        "label": "bullaToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)203"
      },
      {
        "astId": 1395,
        "contract": "contracts/BullaManager.sol:BullaManager",
        "label": "owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)203": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_struct(FeeInfo)1385_storage": {
        "encoding": "inplace",
        "label": "struct FeeInfo",
        "members": [
          {
            "astId": 1378,
            "contract": "contracts/BullaManager.sol:BullaManager",
            "label": "collectionAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 1380,
            "contract": "contracts/BullaManager.sol:BullaManager",
            "label": "feeBasisPoints",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1382,
            "contract": "contracts/BullaManager.sol:BullaManager",
            "label": "bullaTokenThreshold",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1384,
            "contract": "contracts/BullaManager.sol:BullaManager",
            "label": "reducedFeeBasisPoints",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}