{
  "language": "Solidity",
  "sources": {
    "contracts/BullaBanker.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.3;\r\n\r\n//import \"./BullaClaim.sol\";\r\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\r\n\r\nstruct BullaTag {\r\n    bytes32 creditorTag;\r\n    bytes32 debtorTag;\r\n}\r\n\r\ninterface IBullaClaim {\r\n    function init(\r\n        address _bullaManager,\r\n        address payable _owner,\r\n        address payable _creditor,\r\n        address payable _debtor,\r\n        string memory _description,\r\n        uint256 _claimAmount,\r\n        uint256 _dueBy\r\n    ) external;\r\n\r\n    function getCreditor() external view returns (address);\r\n\r\n    function getDebtor() external view returns (address);\r\n}\r\n\r\ncontract BullaBanker {\r\n    address public immutable bullaManager;\r\n    mapping(address => BullaTag) public bullaTags;\r\n\r\n    address public implementation;\r\n\r\n    event BullaBankerClaimCreated(\r\n        address indexed bullaManager,\r\n        address bullaClaim,\r\n        address owner,\r\n        address indexed creditor,\r\n        address indexed debtor,\r\n        string description,\r\n        bytes32 tag,\r\n        uint256 claimAmount,\r\n        uint256 dueBy,\r\n        uint256 blocktime\r\n    );\r\n\r\n    event BullaTagUpdated(\r\n        address indexed bullaManager,\r\n        address indexed bullaClaim,\r\n        bytes32 creditorTag,\r\n        bytes32 debtorTag,\r\n        uint256 blocktime\r\n    );\r\n\r\n    constructor(address _bullaManager, address _implementation) {\r\n        bullaManager = _bullaManager;\r\n        implementation = _implementation;\r\n    }\r\n\r\n    function createBullaClaim(\r\n        uint256 claimAmount,\r\n        address payable creditor,\r\n        address payable debtor,\r\n        string memory description,\r\n        bytes32 bullaTag,\r\n        uint256 dueBy\r\n    ) external {\r\n        address newClaimAddress = Clones.clone(implementation);\r\n\r\n        IBullaClaim(newClaimAddress).init(\r\n            bullaManager,\r\n            payable(msg.sender),\r\n            creditor,\r\n            debtor,\r\n            description,\r\n            claimAmount,\r\n            dueBy\r\n        );\r\n\r\n        emit BullaBankerClaimCreated(\r\n            bullaManager,\r\n            newClaimAddress,\r\n            msg.sender,\r\n            creditor,\r\n            debtor,\r\n            description,\r\n            bullaTag,\r\n            claimAmount,\r\n            dueBy,\r\n            block.timestamp\r\n        );\r\n\r\n        BullaTag memory newTag;\r\n        if (msg.sender == creditor) newTag.creditorTag = bullaTag;\r\n        if (msg.sender == debtor) newTag.debtorTag = bullaTag;\r\n        bullaTags[newClaimAddress] = newTag;\r\n\r\n        emit BullaTagUpdated(\r\n            bullaManager,\r\n            newClaimAddress,\r\n            newTag.creditorTag,\r\n            newTag.debtorTag,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function updateBullaTag(address _bullaClaim, bytes32 newTag) public {\r\n        IBullaClaim bullaClaim = IBullaClaim(_bullaClaim);\r\n        require(\r\n            msg.sender == bullaClaim.getCreditor() ||\r\n                msg.sender == bullaClaim.getDebtor()\r\n        );\r\n\r\n        if (msg.sender == bullaClaim.getCreditor())\r\n            bullaTags[_bullaClaim].creditorTag = newTag;\r\n        if (msg.sender == bullaClaim.getDebtor())\r\n            bullaTags[_bullaClaim].debtorTag = newTag;\r\n        emit BullaTagUpdated(\r\n            bullaManager,\r\n            address(bullaClaim),\r\n            bullaTags[_bullaClaim].creditorTag,\r\n            bullaTags[_bullaClaim].debtorTag,\r\n            block.timestamp\r\n        );\r\n    }\r\n}\r\n\r\n//\"0x7465737400000000000000000000000000000000000000000000000000000000\"\r\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "contracts/BullaClaim.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.3;\r\n\r\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\r\n\r\ninterface IBullaManager {\r\n    function getBullaBalance(address _holder) external view returns (uint256);\r\n\r\n    function getFeeInfo()\r\n        external\r\n        view\r\n        returns (\r\n            address payable collectionAddress,\r\n            uint32 feeBasisPoints,\r\n            uint32 bullaThreshold, //# of BULLA tokens held to get fee reduction\r\n            uint32 reducedFeeBasisPoints\r\n        );\r\n}\r\n\r\ncontract BullaClaim is Initializable {\r\n    enum ActionType {\r\n        Payment,\r\n        Reject,\r\n        Rescind\r\n    }\r\n    enum Status {\r\n        Pending,\r\n        Repaying,\r\n        Paid,\r\n        Rejected,\r\n        Rescinded\r\n    }\r\n\r\n    //https://medium.com/temporal-cloud/efficient-usable-and-cheap-storage-of-ipfs-hashes-in-solidity-smart-contracts-eb3bef129eba\r\n    //structure for storing IPFS hash that may hold documents\r\n    struct Multihash {\r\n        bytes32 hash;\r\n        uint8 hashFunction;\r\n        uint8 size;\r\n    }\r\n    Multihash public multihash;\r\n\r\n    IBullaManager internal bullaManager;\r\n    address payable public owner; //current owner of claim\r\n    address payable creditor;\r\n    address payable debtor;\r\n\r\n    uint256 public claimAmount;\r\n    uint256 public dueBy;\r\n    uint256 public paidAmount;\r\n    Status public status;\r\n    bool isInitialized;\r\n\r\n    //current price that owner is willing to transfer claim\r\n    uint256 public transferPrice;\r\n\r\n    modifier onlyCreditor() {\r\n        require(creditor == msg.sender, \"restricted to creditor\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyDebtor() {\r\n        require(debtor == msg.sender, \"restricted to debtor\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"restricted to owner\");\r\n        _;\r\n    }\r\n\r\n    event ClaimAction(\r\n        address indexed bullaManager,\r\n        address indexed bullaClaim,\r\n        ActionType actionType,\r\n        uint256 paymentAmount,\r\n        uint256 blocktime\r\n    );\r\n\r\n    event FeePaid(\r\n        address indexed bullaManager,\r\n        address indexed bullaClaim,\r\n        address indexed collectionAddress,\r\n        uint256 transactionFee,\r\n        uint256 blocktime\r\n    );\r\n\r\n    event MultihashAdded(\r\n        address indexed bullaManager,\r\n        address bullaClaim,\r\n        address indexed debtor,\r\n        address indexed creditor,\r\n        Multihash ipfsHash,\r\n        uint256 blocktime\r\n    );\r\n\r\n    event TransferPriceUpdated(\r\n        address indexed bullaClaim,\r\n        uint256 oldPrice,\r\n        uint256 newPrice,\r\n        uint256 blocktime\r\n    );\r\n\r\n    event ClaimTransferred(\r\n        address indexed bullaClaim,\r\n        address indexed oldOwner,\r\n        address indexed newOwner,\r\n        uint256 trasferPrice,\r\n        uint256 blocktime\r\n    );\r\n\r\n    event ClaimCreated(\r\n        address indexed bullaManager,\r\n        address bullaClaim,\r\n        address owner,\r\n        address indexed creditor,\r\n        address indexed debtor,\r\n        string description,\r\n        uint256 claimAmount,\r\n        uint256 dueBy,\r\n        address createdBy,\r\n        uint256 blocktime\r\n    );\r\n\r\n    function init(\r\n        address _bullaManager,\r\n        address payable _owner,\r\n        address payable _creditor,\r\n        address payable _debtor,\r\n        string memory _description,\r\n        uint256 _claimAmount,\r\n        uint256 _dueBy\r\n    ) external {\r\n        require(\r\n            _owner == _creditor || _owner == _debtor,\r\n            \"owner not a debtor or creditor\"\r\n        );\r\n        require(!isInitialized, \"already initialized\");\r\n\r\n        isInitialized = true;\r\n        bullaManager = IBullaManager(_bullaManager);\r\n        owner = _owner;\r\n        creditor = _creditor;\r\n        debtor = _debtor;\r\n        claimAmount = _claimAmount;\r\n        dueBy = _dueBy;\r\n\r\n        emit ClaimCreated(\r\n            _bullaManager,\r\n            address(this),\r\n            owner,\r\n            creditor,\r\n            debtor,\r\n            _description,\r\n            claimAmount,\r\n            dueBy,\r\n            msg.sender,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function setTransferPrice(uint256 newPrice) external onlyOwner {\r\n        require(owner == creditor, \"only owner can set price\");\r\n        uint256 oldPrice = transferPrice;\r\n        transferPrice = newPrice;\r\n        emit TransferPriceUpdated(\r\n            address(this),\r\n            oldPrice,\r\n            newPrice,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function transferOwnership(address payable newOwner) external payable {\r\n        require(owner == creditor, \"only invoices can be transferred\");\r\n        require(\r\n            transferPrice > 0 || msg.sender == owner,\r\n            \"this claim is not transferable by anyone other than owner\"\r\n        );\r\n        require(\r\n            msg.value == transferPrice,\r\n            \"incorrect msg.value to transfer ownership\"\r\n        );\r\n\r\n        owner.transfer(msg.value);\r\n        address oldOwner = owner;\r\n        owner = newOwner;\r\n        creditor = newOwner;\r\n        transferPrice = 0;\r\n\r\n        emit ClaimTransferred(\r\n            address(this),\r\n            oldOwner,\r\n            newOwner,\r\n            msg.value,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addMultihash(\r\n        bytes32 hash,\r\n        uint8 hashFunction,\r\n        uint8 size\r\n    ) external onlyOwner {\r\n        multihash = Multihash(hash, hashFunction, size);\r\n        emit MultihashAdded(\r\n            address(bullaManager),\r\n            address(this),\r\n            creditor,\r\n            debtor,\r\n            multihash,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function emitActionEvent(ActionType actionType, uint256 _paymentAmount)\r\n        internal\r\n    {\r\n        emit ClaimAction(\r\n            address(bullaManager),\r\n            address(this),\r\n            actionType,\r\n            _paymentAmount,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function payClaim() external payable onlyDebtor {\r\n        require(paidAmount + msg.value <= claimAmount, \"repaying too much\");\r\n        require(msg.value > 0, \"payment must be greater than 0\");\r\n\r\n        uint256 bullaTokenBalance = bullaManager.getBullaBalance(owner);\r\n        (\r\n            address payable collectionAddress,\r\n            uint32 fullFee,\r\n            uint32 bullaThreshold,\r\n            uint32 reducedFeeBasisPoints\r\n        ) = bullaManager.getFeeInfo();\r\n\r\n        uint32 fee = bullaThreshold > 0 && bullaTokenBalance >= bullaThreshold\r\n            ? reducedFeeBasisPoints\r\n            : fullFee;\r\n\r\n        uint256 transactionFee = fee > 0\r\n            ? (msg.value * fee) / 10000 //calculateFee(feeBasisPoints, msg.value)\r\n            : 0;\r\n\r\n        //DOES this protect against re-entrancy? moved effect before transfer\r\n        paidAmount += msg.value;\r\n        paidAmount == claimAmount ? status = Status.Paid : status = Status\r\n            .Repaying;\r\n        creditor.transfer(msg.value - transactionFee);\r\n        emitActionEvent(ActionType.Payment, claimAmount);\r\n\r\n        if (transactionFee > 0) {\r\n            collectionAddress.transfer(transactionFee);\r\n        }\r\n        emit FeePaid(\r\n            address(bullaManager),\r\n            address(this),\r\n            collectionAddress,\r\n            transactionFee,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function rejectClaim() external payable onlyDebtor {\r\n        require(\r\n            status == Status.Pending,\r\n            \"cannot reject once payment has been made\"\r\n        );\r\n        status = Status.Rejected;\r\n        emitActionEvent(ActionType.Reject, 0);\r\n    }\r\n\r\n    function rescindClaim() external payable onlyCreditor {\r\n        require(\r\n            status == Status.Pending,\r\n            \"cannot rescind once payment has been made\"\r\n        );\r\n        status = Status.Rescinded;\r\n        emitActionEvent(ActionType.Rescind, 0);\r\n    }\r\n\r\n    function getCreditor() external view returns (address) {\r\n        return creditor;\r\n    }\r\n\r\n    function getDebtor() external view returns (address) {\r\n        return debtor;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "contracts/BullaGroup.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.3;\r\n\r\nimport \"./BullaClaim.sol\";\r\n\r\ncontract BullaGroup {\r\n    mapping(uint256 => address) public bullaOwners;\r\n    uint256 bullaCount = 0;\r\n\r\n    mapping(address => bool) public isMember;\r\n    bool public immutable requireMembership;\r\n\r\n    bytes32 public immutable groupType;\r\n    address public immutable bullaManager;\r\n    address public immutable owner;\r\n\r\n    event NewBulla(\r\n        address indexed bullaManager,\r\n        address indexed bullaGroup,\r\n        uint256 bullaId,\r\n        address indexed owner,\r\n        string description,\r\n        uint256 ownerFunding,\r\n        uint256 blocktime\r\n    );\r\n\r\n    event NewBullaClaim(\r\n        address indexed bullaManager,\r\n        address bullaGroup,\r\n        uint256 bullaId,\r\n        address bullaClaim,\r\n        address owner,\r\n        address indexed creditor,\r\n        address indexed debtor,\r\n        string description,\r\n        uint256 claimAmount,\r\n        uint256 dueBy,\r\n        uint256 blocktime\r\n    );\r\n\r\n    event Membership(\r\n        address indexed groupAddress,\r\n        address walletAddress,\r\n        bool isMember,\r\n        uint256 blocktime\r\n    );\r\n\r\n    constructor(\r\n        address _bullaManager,\r\n        address _owner,\r\n        bytes32 _groupType,\r\n        bool _requireMembership\r\n    ) {\r\n        owner = _owner;\r\n        bullaManager = _bullaManager;\r\n        isMember[_owner] = true;\r\n        requireMembership = _requireMembership;\r\n        groupType = _groupType;\r\n    }\r\n\r\n    function joinGroup() external {\r\n        require(isMember[msg.sender] != true, \"members cannot join a group\");\r\n        isMember[msg.sender] = true;\r\n        emit Membership(address(this), msg.sender, true, block.timestamp);\r\n    }\r\n\r\n    function leaveGroup() external {\r\n        require(\r\n            isMember[msg.sender] == true,\r\n            \"non-members cannot leave a group\"\r\n        );\r\n        require(msg.sender != owner, \"owners cannot leave a group\");\r\n        isMember[msg.sender] = false;\r\n        emit Membership(address(this), msg.sender, false, block.timestamp);\r\n    }\r\n\r\n    function createBulla(string calldata desc, uint256 ownerFunding) external {\r\n        if (requireMembership)\r\n            require(\r\n                isMember[msg.sender] == true,\r\n                \"non-members cannot create a bulla\"\r\n            );\r\n        uint256 newBullaId = bullaCount;\r\n\r\n        bullaOwners[newBullaId] = msg.sender;\r\n        bullaCount++;\r\n\r\n        emit NewBulla(\r\n            bullaManager,\r\n            address(this),\r\n            newBullaId,\r\n            msg.sender,\r\n            desc,\r\n            ownerFunding,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function createBullaClaim(\r\n        uint256 bullaId,\r\n        uint256 claimAmount,\r\n        address payable creditor,\r\n        address payable debtor,\r\n        string memory description,\r\n        uint256 dueBy\r\n    ) public {\r\n        require(bullaOwners[bullaId] != address(0), \"bulla does not exist\");\r\n        require(\r\n            bullaOwners[bullaId] == msg.sender,\r\n            \"only bulla owner's may create a bulla claim\"\r\n        );\r\n\r\n        // BullaClaim newBullaClaim = new BullaClaim(\r\n        //     bullaManager,\r\n        //     payable(msg.sender),\r\n        //     creditor,\r\n        //     debtor,\r\n        //     description,\r\n        //     claimAmount,\r\n        //     dueBy\r\n        // );\r\n\r\n        // emit NewBullaClaim(\r\n        //     bullaManager,\r\n        //     address(this),\r\n        //     bullaId,\r\n        //     address(newBullaClaim),\r\n        //     msg.sender,\r\n        //     creditor,\r\n        //     debtor,\r\n        //     description,\r\n        //     claimAmount,\r\n        //     dueBy,\r\n        //     block.timestamp\r\n        // );\r\n    }\r\n}\r\n"
    },
    "contracts/BullaManager.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.3;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./BullaGroup.sol\";\r\n\r\nstruct FeeInfo {\r\n    address payable collectionAddress;\r\n    uint32 feeBasisPoints;\r\n    uint32 bullaTokenThreshold; //# of BULLA tokens held to get fee reduction\r\n    uint32 reducedFeeBasisPoints; //reduced fee for BULLA token holders\r\n}\r\n\r\ncontract BullaManager {\r\n    bytes32 public immutable description;\r\n    FeeInfo private feeInfo;\r\n    IERC20 public bullaToken;\r\n    address public owner;\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"restricted to contract owner\");\r\n        _;\r\n    }\r\n\r\n    event FeeChanged(\r\n        address indexed bullaManager,\r\n        uint256 prevFee,\r\n        uint256 newFee,\r\n        uint256 blocktime\r\n    );\r\n    event CollectorChanged(\r\n        address indexed bullaManager,\r\n        address prevCollector,\r\n        address newCollector,\r\n        uint256 blocktime\r\n    );\r\n    event OwnerChanged(\r\n        address indexed bullaManager,\r\n        address prevOwner,\r\n        address newOwner,\r\n        uint256 blocktime\r\n    );\r\n    event BullaTokenChanged(\r\n        address indexed bullaManager,\r\n        address prevBullaToken,\r\n        address newBullaToken,\r\n        uint256 blocktime\r\n    );\r\n    event FeeThresholdChanged(\r\n        address indexed bullaManager,\r\n        uint256 prevFeeThreshold,\r\n        uint256 newFeeThreshold,\r\n        uint256 blocktime\r\n    );\r\n    event ReducedFeeChanged(\r\n        address indexed bullaManager,\r\n        uint256 prevFee,\r\n        uint256 newFee,\r\n        uint256 blocktime\r\n    );\r\n\r\n    constructor(\r\n        bytes32 _description,\r\n        address payable _collectionAddress,\r\n        uint32 _feeBasisPoints\r\n    ) {\r\n        owner = msg.sender;\r\n        feeInfo.collectionAddress = _collectionAddress;\r\n        description = _description;\r\n        feeInfo.feeBasisPoints = _feeBasisPoints;\r\n\r\n        emit FeeChanged(address(this), 0, _feeBasisPoints, block.timestamp);\r\n        emit CollectorChanged(\r\n            address(this),\r\n            address(0),\r\n            _collectionAddress,\r\n            block.timestamp\r\n        );\r\n        emit OwnerChanged(\r\n            address(this),\r\n            address(0),\r\n            msg.sender,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function setOwner(address _owner) external onlyOwner {\r\n        owner = _owner;\r\n        emit OwnerChanged(address(this), owner, _owner, block.timestamp);\r\n    }\r\n\r\n    function setFee(uint32 _feeBasisPoints) external onlyOwner {\r\n        uint32 oldFee = feeInfo.feeBasisPoints;\r\n        feeInfo.feeBasisPoints = _feeBasisPoints;\r\n        emit FeeChanged(\r\n            address(this),\r\n            oldFee,\r\n            feeInfo.feeBasisPoints,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function setCollectionAddress(address payable _collectionAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        feeInfo.collectionAddress = _collectionAddress;\r\n        emit CollectorChanged(\r\n            address(this),\r\n            feeInfo.collectionAddress,\r\n            _collectionAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    //Set threshold of BULLA tokens owned that are required to receive reduced fee\r\n    function setbullaThreshold(uint32 _threshold) external onlyOwner {\r\n        feeInfo.bullaTokenThreshold = _threshold;\r\n        emit FeeThresholdChanged(\r\n            address(this),\r\n            feeInfo.bullaTokenThreshold,\r\n            _threshold,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    //reduced fee if threshold of BULLA tokens owned is met\r\n    function setReducedFee(uint32 reducedFeeBasisPoints) external onlyOwner {\r\n        uint32 oldFee = feeInfo.reducedFeeBasisPoints;\r\n        feeInfo.reducedFeeBasisPoints = reducedFeeBasisPoints;\r\n        emit FeeChanged(\r\n            address(this),\r\n            oldFee,\r\n            feeInfo.feeBasisPoints,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    //set the contract address of BULLA ERC20 token\r\n    function setBullaTokenAddress(address payable _bullaTokenAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        bullaToken = IERC20(_bullaTokenAddress);\r\n        emit BullaTokenChanged(\r\n            address(this),\r\n            address(bullaToken),\r\n            _bullaTokenAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    //get the amount of BULLA tokens held by a given address\r\n    function getBullaBalance(address _holder) external view returns (uint256) {\r\n        uint256 balance = address(bullaToken) == address(0)\r\n            ? 0\r\n            : bullaToken.balanceOf(_holder);\r\n        return balance;\r\n    }\r\n\r\n    function getFeeInfo() external view returns (FeeInfo memory) {\r\n        return feeInfo;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}