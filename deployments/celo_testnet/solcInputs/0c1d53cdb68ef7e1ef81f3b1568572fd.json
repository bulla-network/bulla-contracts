{
  "language": "Solidity",
  "sources": {
    "contracts/BullaClaim.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.3;\n\nimport \"./BullaGroup.sol\";\nimport \"./BullaManager.sol\";\n\ncontract BullaClaim {\n    enum ActionType {Payment, Reject, Rescind}\n    enum Status {Pending, Repaying, Paid, Rejected, Rescinded}\n    enum RejectReason {\n        None,\n        UnknownAddress,\n        DisputedClaim,\n        SuspectedFraud,\n        Other\n    }\n\n    //structure for storing IPFS hash that may hold documents\n    struct Multihash {\n        bytes32 hash;\n        uint8 hashFunction;\n        uint8 size;\n    }\n    Multihash public multihash;\n\n    uint256 public bullaId; //parent bullaId\n    address public bullaGroup; //parent bullaGroup\n\n    address payable public owner; //current owner of claim\n    address payable public creditor;\n    address payable public debtor;\n\n    uint256 public claimAmount;\n    uint256 public dueBy;\n    uint256 public paidAmount;\n    Status public status;\n\n    //current price that owner is willing to transfer claim\n    uint256 public transferPrice;\n\n    modifier onlyCreditor() {\n        require(creditor == msg.sender, \"restricted to creditor wallet\");\n        _;\n    }\n\n    modifier onlyDebtor() {\n        require(debtor == msg.sender, \"restricted to debtor wallet\");\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(owner == msg.sender, \"restricted to owning wallet\");\n        _;\n    }\n\n    event ClaimAction(\n        address indexed bullaManager,\n        address indexed bullaGroup,\n        uint256 indexed bullaId,\n        address bullaClaim,\n        ActionType actionType,\n        uint256 paymentAmount,\n        RejectReason rejectReason,\n        uint256 blocktime\n    );\n\n    event FeePaid(\n        address indexed bullaManager,\n        address indexed bullaClaim,\n        address indexed collectionAddress,\n        uint256 transactionFee,\n        uint256 blocktime\n    );\n\n    event MultihashAdded(\n        address indexed bullaManager,\n        address bullaClaim,\n        Multihash ipfsHash,\n        uint256 blocktime\n    );\n\n    event TransferPriceUpdated(\n        address indexed bullaClaim,\n        uint256 oldPrice,\n        uint256 newPrice,\n        uint256 blocktime\n    );\n\n    event ClaimTransferred(\n        address indexed bullaClaim,\n        address indexed oldOwner,\n        address indexed newOwner,\n        uint256 trasferPrice,\n        uint256 blocktime\n    );\n\n    constructor(\n        uint256 _bullaId,\n        address payable _owner,\n        address payable _creditor,\n        address payable _debtor,\n        uint256 _claimAmount,\n        uint256 _dueBy\n    ) {\n        bullaGroup = msg.sender;\n        bullaId = _bullaId;\n        owner = _owner;\n        creditor = _creditor;\n        debtor = _debtor;\n        claimAmount = _claimAmount;\n        dueBy = _dueBy;\n    }\n\n    function setTransferPrice(uint256 newPrice) external onlyOwner {\n        require(owner == creditor, \"only owner can set price\");\n        uint256 oldPrice = transferPrice;\n        transferPrice = newPrice;\n        emit TransferPriceUpdated(\n            address(this),\n            oldPrice,\n            newPrice,\n            block.timestamp\n        );\n    }\n\n    function transferOwnership(address payable newOwner) external payable {\n        require(owner == creditor, \"only invoices can be transferred\");\n        require(\n            transferPrice > 0 || msg.sender == owner,\n            \"this claim is not transferable by anyone other than owner\"\n        );\n        require(\n            msg.value == transferPrice,\n            \"incorrect msg.value to transfer ownership\"\n        );\n\n        //TODO: is this done in the correct order. Is it safe?\n        owner.transfer(msg.value);\n        address oldOwner = owner;\n        owner = newOwner;\n        creditor = newOwner;\n        transferPrice = 0;\n\n        emit ClaimTransferred(\n            address(this),\n            oldOwner,\n            newOwner,\n            msg.value,\n            block.timestamp\n        );\n    }\n\n    function addMultihash(\n        bytes32 hash,\n        uint8 hashFunction,\n        uint8 size\n    ) external onlyOwner {\n        multihash = Multihash(hash, hashFunction, size);\n        emit MultihashAdded(\n            getBullaManager(),\n            address(this),\n            multihash,\n            block.timestamp\n        );\n    }\n\n    function getBullaManager() internal view returns (address) {\n        BullaGroup _bullaGroup = BullaGroup(bullaGroup);\n        return _bullaGroup.bullaManager();\n    }\n\n    function getFeeInfo() public view returns (uint256, address payable) {\n        BullaManager bullaManager = BullaManager(getBullaManager());\n        uint256 bullaTokenBalance = bullaManager.getBullaBalance(owner);\n        (\n            address payable collectionAddress,\n            uint32 fullFee,\n            uint32 bullaThreshold,\n            uint32 reducedFeeBasisPoints\n        ) = bullaManager.feeInfo();\n\n        uint32 fee =\n            bullaThreshold > 0 && bullaTokenBalance >= bullaThreshold\n                ? reducedFeeBasisPoints\n                : fullFee;\n        return (fee, collectionAddress);\n    }\n\n    function calculateFee(uint256 bpFee, uint256 value)\n        internal\n        pure\n        returns (uint256)\n    {\n        return (value * bpFee) / 10000;\n    }\n\n    function emitActionEvent(\n        ActionType actionType,\n        uint256 _paymentAmount,\n        RejectReason reason\n    ) internal {\n        emit ClaimAction(\n            getBullaManager(),\n            bullaGroup,\n            bullaId,\n            address(this),\n            actionType,\n            _paymentAmount,\n            reason,\n            block.timestamp\n        );\n    }\n\n    function payClaim() external payable onlyDebtor {\n        require(paidAmount + msg.value <= claimAmount, \"repaying too much\");\n        require(msg.value > 0, \"payment must be greater than 0\");\n\n        (uint256 feeBasisPoints, address payable collectionAddress) =\n            getFeeInfo();\n\n        uint256 transactionFee =\n            feeBasisPoints > 0 ? calculateFee(feeBasisPoints, msg.value) : 0;\n        address bullaManager = getBullaManager();\n\n        creditor.transfer(msg.value - transactionFee);\n        emitActionEvent(ActionType.Payment, claimAmount, RejectReason.None);\n        paidAmount += msg.value;\n        paidAmount == claimAmount ? status = Status.Paid : status = Status\n            .Repaying;\n\n        if (transactionFee > 0) {\n            collectionAddress.transfer(transactionFee);\n        }\n        emit FeePaid(\n            bullaManager,\n            address(this),\n            collectionAddress,\n            transactionFee,\n            block.timestamp\n        );\n    }\n\n    function rejectClaim(RejectReason reason) external payable onlyDebtor {\n        require(\n            status == Status.Pending,\n            \"cannot reject once payment has been made\"\n        );\n        status = Status.Rejected;\n        emitActionEvent(ActionType.Reject, 0, reason);\n    }\n\n    function rescindClaim() external payable onlyCreditor {\n        require(\n            status == Status.Pending,\n            \"cannot rescind once payment has been made\"\n        );\n        status = Status.Rescinded;\n        emitActionEvent(ActionType.Rescind, 0, RejectReason.None);\n    }\n}\n"
    },
    "contracts/BullaGroup.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.3;\n\nimport \"./BullaClaim.sol\";\n\ncontract BullaGroup {\n    mapping(uint256 => address) public bullaOwners;\n    uint256 bullaCount = 0;\n\n    mapping(address => bool) public isMember;\n    bool public immutable requireMembership;\n\n    bytes32 public immutable groupType;\n    address public immutable bullaManager;\n    address public immutable owner;\n\n    event NewBulla(\n        address indexed bullaManager,\n        address indexed bullaGroup,\n        uint256 bullaId,\n        address indexed owner,\n        string description,\n        uint256 ownerFunding,\n        uint256 blocktime\n    );\n\n    event NewBullaClaim(\n        address indexed bullaManager,\n        address bullaGroup,\n        uint256 bullaId,\n        address bullaClaim,\n        address owner,\n        address indexed creditor,\n        address indexed debtor,\n        string description,\n        uint256 claimAmount,\n        uint256 dueBy,\n        uint256 blocktime\n    );\n\n    event Membership(\n        address indexed groupAddress,\n        address walletAddress,\n        bool isMember,\n        uint256 blocktime\n    );\n\n    constructor(\n        address _bullaManager,\n        address _owner,\n        bytes32 _groupType,\n        bool _requireMembership\n    ) {\n        owner = _owner;\n        bullaManager = _bullaManager;\n        isMember[_owner] = true;\n        requireMembership = _requireMembership;\n        groupType = _groupType;\n    }\n\n    function joinGroup() external {\n        require(isMember[msg.sender] != true, \"members cannot join a group\");\n        isMember[msg.sender] = true;\n        emit Membership(address(this), msg.sender, true, block.timestamp);\n    }\n\n    function leaveGroup() external {\n        require(\n            isMember[msg.sender] == true,\n            \"non-members cannot leave a group\"\n        );\n        require(msg.sender != owner, \"owners cannot leave a group\");\n        isMember[msg.sender] = false;\n        emit Membership(address(this), msg.sender, false, block.timestamp);\n    }\n\n    function createBulla(string calldata desc, uint256 ownerFunding) external {\n        if (requireMembership)\n            require(\n                isMember[msg.sender] == true,\n                \"non-members cannot make journal\"\n            );\n        uint256 newBullaId = bullaCount;\n\n        //bullas[newBullaId].id = newBullaId;\n        bullaOwners[newBullaId] = msg.sender;\n        bullaCount++;\n\n        emit NewBulla(\n            bullaManager,\n            address(this),\n            newBullaId,\n            msg.sender,\n            desc,\n            ownerFunding,\n            block.timestamp\n        );\n    }\n\n    function createBullaClaim(\n        uint256 bullaId,\n        uint256 claimAmount,\n        address payable creditor,\n        address payable debtor,\n        string memory description,\n        uint256 dueBy\n    ) public {\n        require(bullaOwners[bullaId] != address(0), \"bulla does not exist\");\n        require(\n            bullaOwners[bullaId] == msg.sender,\n            \"only bulla owner's may create a bulla claim\"\n        );\n\n        BullaClaim newBullaClaim =\n            new BullaClaim(\n                bullaId,\n                payable(msg.sender),\n                creditor,\n                debtor,\n                claimAmount,\n                dueBy\n            );\n\n        emit NewBullaClaim(\n            bullaManager,\n            address(this),\n            bullaId,\n            address(newBullaClaim),\n            msg.sender,\n            creditor,\n            debtor,\n            description,\n            claimAmount,\n            dueBy,\n            block.timestamp\n        );\n    }\n}\n"
    },
    "contracts/BullaManager.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./BullaGroup.sol\";\n\nstruct FeeInfo {\n    address payable collectionAddress;\n    uint32 feeBasisPoints;\n    uint32 bullaThreshold; //# of BULLA tokens held to get fee reduction\n    uint32 reducedFeeBasisPoints; //reduced fee for BULLA token holders\n}\n\ncontract BullaManager {\n    bytes32 public immutable description;\n    FeeInfo public feeInfo;\n    IERC20 public bullaToken;\n    address public owner;\n    modifier onlyOwner() {\n        require(owner == msg.sender, \"restricted to contract owner\");\n        _;\n    }\n\n    event NewBullaGroup(\n        address indexed bullaManager,\n        address indexed bullaGroup,\n        address owner,\n        string description,\n        bytes32 groupType,\n        bool requireMembership,\n        uint256 blocktime\n    );\n    event FeeChanged(\n        address indexed bullaManager,\n        uint256 prevFee,\n        uint256 newFee,\n        uint256 blocktime\n    );\n    event CollectorChanged(\n        address indexed bullaManager,\n        address prevCollector,\n        address newCollector,\n        uint256 blocktime\n    );\n    event OwnerChanged(\n        address indexed bullaManager,\n        address prevOwner,\n        address newOwner,\n        uint256 blocktime\n    );\n    event BullaTokenChanged(\n        address indexed bullaManager,\n        address prevBullaToken,\n        address newBullaToken,\n        uint256 blocktime\n    );\n    event FeeThresholdChanged(\n        address indexed bullaManager,\n        uint256 prevFeeThreshold,\n        uint256 newFeeThreshold,\n        uint256 blocktime\n    );\n    event ReducedFeeChanged(\n        address indexed bullaManager,\n        uint256 prevFee,\n        uint256 newFee,\n        uint256 blocktime\n    );\n\n    constructor(\n        bytes32 _description,\n        address payable _collectionAddress,\n        uint32 _feeBasisPoints\n    ) {\n        owner = msg.sender;\n        feeInfo.collectionAddress = _collectionAddress;\n        description = _description;\n        feeInfo.feeBasisPoints = _feeBasisPoints;\n\n        emit FeeChanged(address(this), 0, _feeBasisPoints, block.timestamp);\n        emit CollectorChanged(\n            address(this),\n            address(0),\n            _collectionAddress,\n            block.timestamp\n        );\n        emit OwnerChanged(\n            address(this),\n            address(0),\n            msg.sender,\n            block.timestamp\n        );\n    }\n\n    function createBullaGroup(\n        string calldata _description,\n        bytes32 groupType,\n        bool requireMembership\n    ) external {\n        BullaGroup newGroup =\n            new BullaGroup(\n                address(this),\n                msg.sender,\n                groupType,\n                requireMembership\n            );\n        emit NewBullaGroup(\n            address(this),\n            address(newGroup),\n            msg.sender,\n            _description,\n            groupType,\n            requireMembership,\n            block.timestamp\n        );\n    }\n\n    function setOwner(address _owner) external onlyOwner {\n        owner = _owner;\n        emit OwnerChanged(address(this), owner, _owner, block.timestamp);\n    }\n\n    function setFee(uint32 _feeBasisPoints) external onlyOwner {\n        uint32 oldFee = feeInfo.feeBasisPoints;\n        feeInfo.feeBasisPoints = _feeBasisPoints;\n        emit FeeChanged(\n            address(this),\n            oldFee,\n            feeInfo.feeBasisPoints,\n            block.timestamp\n        );\n    }\n\n    function setCollectionAddress(address payable _collectionAddress)\n        external\n        onlyOwner\n    {\n        feeInfo.collectionAddress = _collectionAddress;\n        emit CollectorChanged(\n            address(this),\n            feeInfo.collectionAddress,\n            _collectionAddress,\n            block.timestamp\n        );\n    }\n\n    //Set threshold of BULLA tokens owned that are required to receive reduced fee\n    function setbullaThreshold(uint32 _threshold) external onlyOwner {\n        feeInfo.bullaThreshold = _threshold;\n        emit FeeThresholdChanged(\n            address(this),\n            feeInfo.bullaThreshold,\n            _threshold,\n            block.timestamp\n        );\n    }\n\n    //reduced fee if threshold of BULLA tokens owned is met\n    function setReducedFee(uint32 reducedFeeBasisPoints) external onlyOwner {\n        uint32 oldFee = feeInfo.reducedFeeBasisPoints;\n        feeInfo.reducedFeeBasisPoints = reducedFeeBasisPoints;\n        emit FeeChanged(\n            address(this),\n            oldFee,\n            feeInfo.feeBasisPoints,\n            block.timestamp\n        );\n    }\n\n    //set the contract address of BULLA ERC20 token\n    function setBullaTokenAddress(address payable _bullaTokenAddress)\n        external\n        onlyOwner\n    {\n        bullaToken = IERC20(_bullaTokenAddress);\n        emit BullaTokenChanged(\n            address(this),\n            address(bullaToken),\n            _bullaTokenAddress,\n            block.timestamp\n        );\n    }\n\n    //get the amount of BULLA tokens held by a given address\n    function getBullaBalance(address _holder) external view returns (uint256) {\n        uint256 balance =\n            address(bullaToken) == address(0)\n                ? 0\n                : bullaToken.balanceOf(_holder);\n        return balance;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}