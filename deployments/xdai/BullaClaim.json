{
  "address": "0xAA6E5B4E34f3C3BA4D90694909dca7DDdf058079",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bullaManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bullaClaim",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum BullaClaim.ActionType",
          "name": "actionType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paymentAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blocktime",
          "type": "uint256"
        }
      ],
      "name": "ClaimAction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bullaClaim",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transferPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blocktime",
          "type": "uint256"
        }
      ],
      "name": "ClaimTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bullaManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bullaClaim",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collectionAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transactionFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blocktime",
          "type": "uint256"
        }
      ],
      "name": "FeePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bullaManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bullaClaim",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "debtor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creditor",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "hashFunction",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "size",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct BullaClaim.Multihash",
          "name": "ipfsHash",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blocktime",
          "type": "uint256"
        }
      ],
      "name": "MultihashAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bullaClaim",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blocktime",
          "type": "uint256"
        }
      ],
      "name": "TransferPriceUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "hashFunction",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "size",
          "type": "uint8"
        }
      ],
      "name": "addMultihash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dueBy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCreditor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDebtor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multihash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "hashFunction",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "size",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paidAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rejectClaim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rescindClaim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "setTransferPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "internalType": "enum BullaClaim.Status",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7a344d462e470230ceef7119325a79d8b7e070c71f18f4edaa2ad5e6a2f2d483",
  "receipt": {
    "to": null,
    "from": "0xe2B28b58cc5d34872794E861fd1ba1982122B907",
    "contractAddress": "0xAA6E5B4E34f3C3BA4D90694909dca7DDdf058079",
    "transactionIndex": 50,
    "gasUsed": "53000",
    "logsBloom": "0x
    "blockHash": "0x96c498c51c2a6cec913c92519f821eb4256a204bb5fae52f1e54df4b7c06bec7",
    "transactionHash": "0x7a344d462e470230ceef7119325a79d8b7e070c71f18f4edaa2ad5e6a2f2d483",
    "logs": [],
    "blockNumber": 17989877,
    "cumulativeGasUsed": "13643194",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "7e37fb7353b6089588d8e6340ffcf073",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bullaManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bullaClaim\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum BullaClaim.ActionType\",\"name\":\"actionType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"ClaimAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bullaClaim\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"ClaimTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bullaManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bullaClaim\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"FeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bullaManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bullaClaim\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"hashFunction\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"size\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct BullaClaim.Multihash\",\"name\":\"ipfsHash\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"MultihashAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bullaClaim\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocktime\",\"type\":\"uint256\"}],\"name\":\"TransferPriceUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"hashFunction\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"size\",\"type\":\"uint8\"}],\"name\":\"addMultihash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dueBy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreditor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDebtor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multihash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"hashFunction\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"size\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paidAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rejectClaim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescindClaim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setTransferPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum BullaClaim.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BullaClaim.sol\":\"BullaClaim\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa3bbab77849522b73d8c6cd3d2ac54bef7580e4354484f35f4cabf55d3d2b3f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/BullaClaim.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\ninterface IBullaManager {\\n    function getBullaBalance(address _holder) external view returns (uint256);\\n\\n    function getFeeInfo()\\n        external\\n        view\\n        returns (\\n            address payable collectionAddress,\\n            uint32 feeBasisPoints,\\n            uint32 bullaThreshold, //# of BULLA tokens held to get fee reduction\\n            uint32 reducedFeeBasisPoints\\n        );\\n}\\n\\nabstract contract BullaClaim is Initializable {\\n    enum ActionType {\\n        Payment,\\n        Reject,\\n        Rescind\\n    }\\n    enum Status {\\n        Pending,\\n        Repaying,\\n        Paid,\\n        Rejected,\\n        Rescinded\\n    }\\n\\n    //https://medium.com/temporal-cloud/efficient-usable-and-cheap-storage-of-ipfs-hashes-in-solidity-smart-contracts-eb3bef129eba\\n    //structure for storing IPFS hash that may hold documents\\n    struct Multihash {\\n        bytes32 hash;\\n        uint8 hashFunction;\\n        uint8 size;\\n    }\\n    Multihash public multihash;\\n\\n    IBullaManager internal bullaManager;\\n    address payable public owner; //current owner of claim\\n    address payable creditor;\\n    address payable debtor;\\n\\n    uint256 public claimAmount;\\n    uint256 public dueBy;\\n    uint256 public paidAmount;\\n    Status public status;\\n    bool isInitialized;\\n\\n    //current price that owner is willing to transfer claim\\n    uint256 public transferPrice;\\n\\n    modifier onlyCreditor() {\\n        require(creditor == msg.sender, \\\"restricted to creditor\\\");\\n        _;\\n    }\\n\\n    modifier onlyDebtor() {\\n        require(debtor == msg.sender, \\\"restricted to debtor\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"restricted to owner\\\");\\n        _;\\n    }\\n\\n    event ClaimAction(\\n        address indexed bullaManager,\\n        address indexed bullaClaim,\\n        ActionType actionType,\\n        uint256 paymentAmount,\\n        uint256 blocktime\\n    );\\n\\n    event FeePaid(\\n        address indexed bullaManager,\\n        address indexed bullaClaim,\\n        address indexed collectionAddress,\\n        uint256 transactionFee,\\n        uint256 blocktime\\n    );\\n\\n    event MultihashAdded(\\n        address bullaManager,\\n        address indexed bullaClaim,\\n        address indexed debtor,\\n        address indexed creditor,\\n        Multihash ipfsHash,\\n        uint256 blocktime\\n    );\\n\\n    event TransferPriceUpdated(\\n        address indexed bullaClaim,\\n        uint256 oldPrice,\\n        uint256 newPrice,\\n        uint256 blocktime\\n    );\\n\\n    event ClaimTransferred(\\n        address indexed bullaClaim,\\n        address indexed oldOwner,\\n        address indexed newOwner,\\n        uint256 transferPrice,\\n        uint256 blocktime\\n    );\\n\\n    function setTransferPrice(uint256 newPrice) external onlyOwner {\\n        require(owner == creditor, \\\"only owner can set price\\\");\\n        uint256 oldPrice = transferPrice;\\n        transferPrice = newPrice;\\n        emit TransferPriceUpdated(\\n            address(this),\\n            oldPrice,\\n            newPrice,\\n            block.timestamp\\n        );\\n    }\\n\\n    function addMultihash(\\n        bytes32 hash,\\n        uint8 hashFunction,\\n        uint8 size\\n    ) public onlyOwner {\\n        multihash = Multihash(hash, hashFunction, size);\\n        emit MultihashAdded(\\n            address(bullaManager),\\n            address(this),\\n            creditor,\\n            debtor,\\n            multihash,\\n            block.timestamp\\n        );\\n    }\\n\\n    function emitActionEvent(ActionType actionType, uint256 _paymentAmount)\\n        internal\\n    {\\n        emit ClaimAction(\\n            address(bullaManager),\\n            address(this),\\n            actionType,\\n            _paymentAmount,\\n            block.timestamp\\n        );\\n    }\\n\\n    function rejectClaim() external payable onlyDebtor {\\n        require(\\n            status == Status.Pending,\\n            \\\"cannot reject once payment has been made\\\"\\n        );\\n        status = Status.Rejected;\\n        emitActionEvent(ActionType.Reject, 0);\\n    }\\n\\n    function rescindClaim() external payable onlyCreditor {\\n        require(\\n            status == Status.Pending,\\n            \\\"cannot rescind once payment has been made\\\"\\n        );\\n        status = Status.Rescinded;\\n        emitActionEvent(ActionType.Rescind, 0);\\n    }\\n\\n    function getCreditor() external view returns (address) {\\n        return creditor;\\n    }\\n\\n    function getDebtor() external view returns (address) {\\n        return debtor;\\n    }\\n}\\n\\ncontract BullaClaimNative is BullaClaim {\\n    event ClaimCreated(\\n        address bullaManager,\\n        address bullaClaim,\\n        address owner,\\n        address indexed creditor,\\n        address indexed debtor,\\n        string description,\\n        uint256 claimAmount,\\n        uint256 dueBy,\\n        address indexed creator,\\n        uint256 blocktime\\n    );\\n\\n    function init(\\n        address _bullaManager,\\n        address payable _owner,\\n        address payable _creditor,\\n        address payable _debtor,\\n        string memory _description,\\n        uint256 _claimAmount,\\n        uint256 _dueBy\\n    ) public {\\n        require(\\n            _owner == _creditor || _owner == _debtor,\\n            \\\"owner not a debtor or creditor\\\"\\n        );\\n        require(!isInitialized, \\\"already initialized\\\");\\n        isInitialized = true;\\n\\n        bullaManager = IBullaManager(_bullaManager);\\n        owner = _owner;\\n        creditor = _creditor;\\n        debtor = _debtor;\\n        claimAmount = _claimAmount;\\n        dueBy = _dueBy;\\n\\n        emit ClaimCreated(\\n            _bullaManager,\\n            address(this),\\n            owner,\\n            creditor,\\n            debtor,\\n            _description,\\n            claimAmount,\\n            dueBy,\\n            msg.sender,\\n            block.timestamp\\n        );\\n    }\\n\\n    function initMultihash(\\n        address _bullaManager,\\n        address payable _owner,\\n        address payable _creditor,\\n        address payable _debtor,\\n        string memory _description,\\n        uint256 _claimAmount,\\n        uint256 _dueBy,\\n        Multihash calldata _multihash\\n    ) external {\\n        init(\\n            _bullaManager,\\n            _owner,\\n            _creditor,\\n            _debtor,\\n            _description,\\n            _claimAmount,\\n            _dueBy\\n        );\\n        multihash = _multihash;\\n        emit MultihashAdded(\\n            address(bullaManager),\\n            address(this),\\n            creditor,\\n            debtor,\\n            multihash,\\n            block.timestamp\\n        );\\n    }\\n\\n    function transferOwnership(address payable newOwner) external payable {\\n        require(owner == creditor, \\\"only invoices can be transferred\\\");\\n        require(\\n            transferPrice > 0 || msg.sender == owner,\\n            \\\"this claim is not transferable by anyone other than owner\\\"\\n        );\\n        require(\\n            msg.value == transferPrice,\\n            \\\"incorrect msg.value to transfer ownership\\\"\\n        );\\n\\n        owner.transfer(msg.value);\\n        address oldOwner = owner;\\n        owner = newOwner;\\n        creditor = newOwner;\\n        transferPrice = 0;\\n\\n        emit ClaimTransferred(\\n            address(this),\\n            oldOwner,\\n            newOwner,\\n            msg.value,\\n            block.timestamp\\n        );\\n    }\\n\\n    function payClaim() external payable onlyDebtor {\\n        require(paidAmount + msg.value <= claimAmount, \\\"repaying too much\\\");\\n        require(msg.value > 0, \\\"payment must be greater than 0\\\");\\n\\n        uint256 bullaTokenBalance = bullaManager.getBullaBalance(owner);\\n        (\\n            address payable collectionAddress,\\n            uint32 fullFee,\\n            uint32 bullaThreshold,\\n            uint32 reducedFeeBasisPoints\\n        ) = bullaManager.getFeeInfo();\\n\\n        uint32 fee = bullaThreshold > 0 && bullaTokenBalance >= bullaThreshold\\n            ? reducedFeeBasisPoints\\n            : fullFee;\\n\\n        uint256 transactionFee = fee > 0\\n            ? (msg.value * fee) / 10000 //calculateFee(feeBasisPoints, msg.value)\\n            : 0;\\n\\n        paidAmount += msg.value;\\n        paidAmount == claimAmount ? status = Status.Paid : status = Status\\n            .Repaying;\\n        creditor.transfer(msg.value - transactionFee);\\n        emitActionEvent(ActionType.Payment, claimAmount);\\n\\n        if (transactionFee > 0) {\\n            collectionAddress.transfer(transactionFee);\\n        }\\n        emit FeePaid(\\n            address(bullaManager),\\n            address(this),\\n            collectionAddress,\\n            transactionFee,\\n            block.timestamp\\n        );\\n    }\\n}\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract BullaClaimERC20 is BullaClaim {\\n    using SafeERC20 for IERC20;\\n    IERC20 public claimToken;\\n\\n    event ClaimCreated(\\n        address bullaManager,\\n        address bullaClaim,\\n        address owner,\\n        address indexed creditor,\\n        address indexed debtor,\\n        address claimToken,\\n        string description,\\n        uint256 claimAmount,\\n        uint256 dueBy,\\n        address indexed creator,\\n        uint256 blocktime\\n    );\\n\\n    function init(\\n        address _bullaManager,\\n        address payable _owner,\\n        address payable _creditor,\\n        address payable _debtor,\\n        string memory _description,\\n        uint256 _claimAmount,\\n        uint256 _dueBy,\\n        address _claimToken\\n    ) public {\\n        require(\\n            _owner == _creditor || _owner == _debtor,\\n            \\\"owner not a debtor or creditor\\\"\\n        );\\n        require(!isInitialized, \\\"already initialized\\\");\\n        isInitialized = true;\\n\\n        bullaManager = IBullaManager(_bullaManager);\\n        owner = _owner;\\n        creditor = _creditor;\\n        debtor = _debtor;\\n        claimAmount = _claimAmount;\\n        dueBy = _dueBy;\\n        claimToken = IERC20(_claimToken);\\n\\n        emit ClaimCreated(\\n            _bullaManager,\\n            address(this),\\n            owner,\\n            creditor,\\n            debtor,\\n            _claimToken,\\n            _description,\\n            claimAmount,\\n            dueBy,\\n            msg.sender,\\n            block.timestamp\\n        );\\n    }\\n\\n    function initMultiHash(\\n        address _bullaManager,\\n        address payable _owner,\\n        address payable _creditor,\\n        address payable _debtor,\\n        string memory _description,\\n        uint256 _claimAmount,\\n        uint256 _dueBy,\\n        address _claimToken,\\n        Multihash calldata _multihash\\n    ) external {\\n        init(\\n            _bullaManager,\\n            _owner,\\n            _creditor,\\n            _debtor,\\n            _description,\\n            _claimAmount,\\n            _dueBy,\\n            _claimToken\\n        );\\n        multihash = _multihash;\\n        emit MultihashAdded(\\n            address(bullaManager),\\n            address(this),\\n            creditor,\\n            debtor,\\n            multihash,\\n            block.timestamp\\n        );\\n    }\\n\\n    function transferOwnership(address payable newOwner, uint256 transferAmount)\\n        external\\n    {\\n        require(owner == creditor, \\\"only invoices can be transferred\\\");\\n        require(\\n            transferPrice > 0 || msg.sender == owner,\\n            \\\"this claim is not transferable by anyone other than owner\\\"\\n        );\\n        require(\\n            transferAmount == transferPrice,\\n            \\\"incorrect value to transfer ownership\\\"\\n        );\\n\\n        claimToken.safeTransferFrom(msg.sender, owner, transferPrice);\\n        address oldOwner = owner;\\n        owner = newOwner;\\n        creditor = newOwner;\\n        transferPrice = 0;\\n\\n        emit ClaimTransferred(\\n            address(this),\\n            oldOwner,\\n            newOwner,\\n            transferPrice,\\n            block.timestamp\\n        );\\n    }\\n\\n    function payClaim(uint256 paymentAmount) external onlyDebtor {\\n        require(\\n            claimToken.balanceOf(msg.sender) >= claimAmount,\\n            \\\"insufficient funds\\\"\\n        );\\n        require(paidAmount + paymentAmount <= claimAmount, \\\"repaying too much\\\");\\n        require(paymentAmount > 0, \\\"payment must be greater than 0\\\");\\n        require(\\n            claimToken.allowance(msg.sender, address(this)) >= paymentAmount,\\n            \\\"must approve transfer\\\"\\n        );\\n\\n        uint256 bullaTokenBalance = bullaManager.getBullaBalance(owner);\\n        (\\n            address payable collectionAddress,\\n            uint32 fullFee,\\n            uint32 bullaThreshold,\\n            uint32 reducedFeeBasisPoints\\n        ) = bullaManager.getFeeInfo();\\n\\n        uint32 fee = bullaThreshold > 0 && bullaTokenBalance >= bullaThreshold\\n            ? reducedFeeBasisPoints\\n            : fullFee;\\n\\n        uint256 transactionFee = fee > 0\\n            ? (paymentAmount * fee) / 10000 //calculateFee(feeBasisPoints, msg.value)\\n            : 0;\\n\\n        paidAmount += paymentAmount;\\n        paidAmount == claimAmount ? status = Status.Paid : status = Status\\n            .Repaying;\\n\\n        claimToken.safeTransferFrom(\\n            msg.sender,\\n            creditor,\\n            paymentAmount - transactionFee\\n        );\\n        emitActionEvent(ActionType.Payment, claimAmount);\\n\\n        if (transactionFee > 0) {\\n            claimToken.safeTransferFrom(\\n                msg.sender,\\n                collectionAddress,\\n                transactionFee\\n            );\\n        }\\n        emit FeePaid(\\n            address(bullaManager),\\n            address(this),\\n            collectionAddress,\\n            transactionFee,\\n            block.timestamp\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x80811343c1ccc39a6fbb1bf9118996c1b87da3aa00e7346c5ea54544a99f2901\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 85,
        "contract": "contracts/BullaClaim.sol:BullaClaim",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 88,
        "contract": "contracts/BullaClaim.sol:BullaClaim",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1736,
        "contract": "contracts/BullaClaim.sol:BullaClaim",
        "label": "multihash",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Multihash)1733_storage"
      },
      {
        "astId": 1739,
        "contract": "contracts/BullaClaim.sol:BullaClaim",
        "label": "bullaManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IBullaManager)1714"
      },
      {
        "astId": 1741,
        "contract": "contracts/BullaClaim.sol:BullaClaim",
        "label": "owner",
        "offset": 0,
        "slot": "4",
        "type": "t_address_payable"
      },
      {
        "astId": 1743,
        "contract": "contracts/BullaClaim.sol:BullaClaim",
        "label": "creditor",
        "offset": 0,
        "slot": "5",
        "type": "t_address_payable"
      },
      {
        "astId": 1745,
        "contract": "contracts/BullaClaim.sol:BullaClaim",
        "label": "debtor",
        "offset": 0,
        "slot": "6",
        "type": "t_address_payable"
      },
      {
        "astId": 1747,
        "contract": "contracts/BullaClaim.sol:BullaClaim",
        "label": "claimAmount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1749,
        "contract": "contracts/BullaClaim.sol:BullaClaim",
        "label": "dueBy",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1751,
        "contract": "contracts/BullaClaim.sol:BullaClaim",
        "label": "paidAmount",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1754,
        "contract": "contracts/BullaClaim.sol:BullaClaim",
        "label": "status",
        "offset": 0,
        "slot": "10",
        "type": "t_enum(Status)1726"
      },
      {
        "astId": 1756,
        "contract": "contracts/BullaClaim.sol:BullaClaim",
        "label": "isInitialized",
        "offset": 1,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 1758,
        "contract": "contracts/BullaClaim.sol:BullaClaim",
        "label": "transferPrice",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBullaManager)1714": {
        "encoding": "inplace",
        "label": "contract IBullaManager",
        "numberOfBytes": "20"
      },
      "t_enum(Status)1726": {
        "encoding": "inplace",
        "label": "enum BullaClaim.Status",
        "numberOfBytes": "1"
      },
      "t_struct(Multihash)1733_storage": {
        "encoding": "inplace",
        "label": "struct BullaClaim.Multihash",
        "members": [
          {
            "astId": 1728,
            "contract": "contracts/BullaClaim.sol:BullaClaim",
            "label": "hash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 1730,
            "contract": "contracts/BullaClaim.sol:BullaClaim",
            "label": "hashFunction",
            "offset": 0,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 1732,
            "contract": "contracts/BullaClaim.sol:BullaClaim",
            "label": "size",
            "offset": 1,
            "slot": "1",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}